<NameSpace
 X="230"
 Y="70"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Name="LevelTransition"
 Guid="c7686458-322b-4861-9f8c-de43b74bb2c3"
>
<NameSpaces>
</NameSpaces>
<Structures>
<Structure
 Default=""
 X="450"
 Y="10"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 Name="LevelTransitionStruct"
 Guid="d5dd0ecb-bbb2-49c8-a2cf-cfc1498e4d2d"
>
<ReqRef
 Id="7e7c641f-fe52-42ac-9aa8-12e5c7dfd6b2"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="1c9c894e-b403-43e4-940a-a41a5304413a"
>
</ReqRef><ReqRef
 Id="8015eb3f-9570-4532-95e5-d755311dfa7a"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="5a26d0da-a356-45fe-a2f5-f7d176ec2d2c"
>
</ReqRef><ReqRef
 Id="375f3135-e004-4d28-9eff-dc2eb0a8bc7c"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="ea4e2c95-0a5b-4441-b32c-26918ed088b7"
>
</ReqRef><Comment>Contains a possible value of the level together with its acknowledgement length.</Comment>
<StructureElement
 TypeName="BaseTypes.Length"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Name="AcknLength"
 Guid="467478db-5a13-4b20-b6ba-fe14a259d387"
>
<ReqRef
 Id="8dc3adec-c4e6-489e-849a-d05eac8ee50b"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="af193e56-1121-4498-a70f-d19d01f96aac"
>
</ReqRef></StructureElement><StructureElement
 TypeName="LevelDataStruct"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Name="TRLevel"
 Guid="692b9f3c-cf6a-48c1-b629-b20539429dba"
>
<ReqRef
 Id="a59e0f85-7d70-426a-a85c-75592258286f"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="853740c6-8e99-40d7-b4ea-c90875669cd4"
>
</ReqRef><ReqRef
 Id="957132d4-ee44-447a-8bae-75d858cd1963"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="166e5b58-4865-45e1-a493-cbdd0f15b840"
>
</ReqRef></StructureElement></Structure><Structure
 Default=""
 X="20"
 Y="10"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 Name="LevelTransitionOrderStruct"
 Guid="4941448b-3df6-4eae-8321-c4ea9331b27c"
>
<ReqRef
 Id="7e7c641f-fe52-42ac-9aa8-12e5c7dfd6b2"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="5eb6aa01-aa99-4b49-83d1-4aa2e2fc7282"
>
</ReqRef><ReqRef
 Id="569b9466-f366-4f5e-b29a-47dbd42081e2"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="fde13829-81e7-4dd9-9af9-486e512cb8dc"
>
</ReqRef><ReqRef
 Id="375f3135-e004-4d28-9eff-dc2eb0a8bc7c"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="1357aa53-9594-4df9-a14e-92c3936e1421"
>
</ReqRef><ReqRef
 Id="e249c65e-2618-4df7-b69d-97ced56922b4"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="ebc998ec-0df9-4167-afbe-ee3b42ff2856"
>
</ReqRef><Comment>Represents a level transition order. Composed of the distance of the level transition and a list of possible levels with their acknowledgement legths. Can be conditional or not.</Comment>
<StructureElement
 TypeName="BaseTypes.Distance"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Name="Location"
 Guid="4f40beb6-ff3b-4761-822e-d73684fc10ce"
>
<ReqRef
 Id="48cd2e35-67c2-46a5-9f39-4d543c9361d0"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="87188775-ccc8-46ae-ae6b-2a58661f4fa0"
>
</ReqRef></StructureElement><StructureElement
 TypeName="LevelTransitionsCol"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Name="LevelAndLength"
 Guid="ac8bcb1e-a8c3-49a6-b543-1cdd6f9705b0"
>
<ReqRef
 Id="8dc3adec-c4e6-489e-849a-d05eac8ee50b"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="93b3e829-47db-4fdf-aa99-a5d0304a65e1"
>
</ReqRef></StructureElement><StructureElement
 TypeName="LevelDataStruct"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Name="CurrentLevel"
 Guid="1333791e-a914-4788-9d07-cd1aa6d8018e"
>
<ReqRef
 Id="47b91cc7-c8e6-4d25-94b9-7992b9456daa"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="b0c0ef69-70cf-4674-8041-5f45b9142900"
>
</ReqRef><ReqRef
 Id="fef79c41-a6e7-4139-94de-a5a9b000932d"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="16240869-63f0-422a-80ba-b6739b4d0dd6"
>
</ReqRef><ReqRef
 Id="a7605778-28fc-48d9-b6cd-2429b3e840e2"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="e25b02c7-2696-4956-9ebe-70ac9b774dc9"
>
</ReqRef><ReqRef
 Id="917e038b-c314-4423-b3a6-c0131f148410"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="57d66372-e102-4458-b57b-6955858b3715"
>
</ReqRef><ReqRef
 Id="4f4a1783-3d82-4056-8a27-0f47ff27ce77"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="a1b346d9-b586-4e56-8cc4-eb180441bd6b"
>
</ReqRef><ReqRef
 Id="74a30d76-76b6-4796-9af7-51fcc86fdda3"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="12e43f6e-2578-41d9-a0ac-c2c513535975"
>
</ReqRef><Comment>The level of the train before applying the level transition order.</Comment>
</StructureElement><StructureElement
 TypeName="Boolean"
 Default="False"
 Mode="Internal"
 Implemented="TRUE"
 Name="PositionReportSent"
 Guid="d34ba99f-bc39-4d93-9b0e-5707eeab8534"
>
<ReqRef
 Id="47b91cc7-c8e6-4d25-94b9-7992b9456daa"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="264445e9-bb13-40d2-b598-ca230b34203f"
>
</ReqRef><ReqRef
 Id="fef79c41-a6e7-4139-94de-a5a9b000932d"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="553bfe68-3989-473f-bae5-ff257d5d8e59"
>
</ReqRef><ReqRef
 Id="a7605778-28fc-48d9-b6cd-2429b3e840e2"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="ea02c2cd-1626-40b1-ae74-3f7b97f2f42c"
>
</ReqRef><Comment>Stores whether the position report to be sent after leaving a level 2/3 area has been sent to the RBC.</Comment>
</StructureElement><Interfaces>
<StructureRef
 Name="BaseTypes.LocationInterface"
 Guid="d75fc4c2-7084-4ac4-afa0-3e3631d190b2"
>
</StructureRef></Interfaces>
</Structure></Structures>
<Collections>
<Collection
 TypeName="LevelTransitionStruct"
 MaxSize="20"
 Default="[]"
 X="240"
 Y="10"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 Name="LevelTransitionsCol"
 Guid="515a3a9b-fcdb-4d4b-84fb-7d347a587cbf"
>
<ReqRef
 Id="375f3135-e004-4d28-9eff-dc2eb0a8bc7c"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="1da9d143-d07f-490c-98a3-ed1e9d19f02e"
>
</ReqRef><Comment>Collection of possible levels with their acknowlegement lengths.</Comment>
</Collection></Collections>
<Functions>
<Function
 Type="LevelEnum"
 Default=""
 X="240"
 Y="360"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 Name="ERTMSToEFSLevel"
 Guid="cd232b1d-a061-442b-bb87-7659f2506c34"
>
<ReqRef
 Id="7e7c641f-fe52-42ac-9aa8-12e5c7dfd6b2"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="deda796a-0385-4be7-90e2-3d0b343d6564"
>
</ReqRef><Comment>Converts the level received from trackside to the level used by EFS.</Comment>
<Parameters>
<Parameter
 Type="Messages.M_LEVELTR"
 Name="LevelT"
 Guid="2675e0a5-7baa-40c5-ab70-7640110a784c"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Level 0"
 Guid="5a1ecea0-9764-450c-8b31-874818732f14"
>
<PreConditions>
<PreCondition
 Guid="5afbaba3-f808-437d-b085-4139409c92ea"
>LevelT== Messages.M_LEVELTR.Level_0</PreCondition></PreConditions>
<Expression>LevelEnum.L0</Expression>
</Case><Case
 Name="Level 1"
 Guid="6bc3f312-88af-4e25-9d3e-e6d2b04fb7de"
>
<PreConditions>
<PreCondition
 Guid="c4adefb8-5403-4459-ae07-a08a5abb77c8"
>LevelT == Messages.M_LEVELTR.Level_1</PreCondition></PreConditions>
<Expression>LevelEnum.L1</Expression>
</Case><Case
 Name="Level 2"
 Guid="87b3fa69-db82-427d-b7c5-8628085f1117"
>
<PreConditions>
<PreCondition
 Guid="77a55ed0-fc74-4fb8-9db2-444105a39fab"
>LevelT == Messages.M_LEVELTR.Level_2</PreCondition></PreConditions>
<Expression>LevelEnum.L2</Expression>
</Case><Case
 Name="Level 3"
 Guid="2bd9216e-6801-402b-a88c-ef6ee9dfcdcd"
>
<PreConditions>
<PreCondition
 Guid="53c00526-b28d-44d6-a8f8-8960a6b415f2"
>LevelT == Messages.M_LEVELTR.Level_3</PreCondition></PreConditions>
<Expression>LevelEnum.L3</Expression>
</Case><Case
 Name="Level STM"
 Guid="204562b3-8736-4ca6-9d1e-3054cb410f83"
>
<PreConditions>
<PreCondition
 Guid="416ab9e7-316b-4221-b5c5-666f38de4161"
>LevelT == Messages.M_LEVELTR.Level_STM_specified_by_NID_STM</PreCondition></PreConditions>
<Expression>LevelEnum.LNTC</Expression>
</Case></Cases>
</Function><Function
 Type="Boolean"
 Default=""
 X="130"
 Y="360"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 Name="AvailableForUse"
 Guid="53cf121e-1419-433c-a39b-5d3a6ac9e7f4"
>
<ReqRef
 Id="d88669ab-b014-4a92-b565-0f1e46f40945"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="17388681-ae49-4d52-b851-2c7f6320e914"
>
</ReqRef><ReqRef
 Id="9fb4faf4-8c92-4619-9edc-a411b5cc07cf"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="66230b84-139d-4268-9a9d-dd3a4d916ad9"
>
</ReqRef><Comment>Level NTC remains a non-implemented case because we have no information here which NTC/STM is relevant (and how this is modelled).</Comment>
<Parameters>
<Parameter
 Type="LevelDataStruct"
 Name="Level"
 Guid="46695204-7578-4c8a-9699-e0c5e4ed1123"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Level 0,1"
 Guid="4b1df126-54b3-4c89-875e-211b858d1952"
>
<PreConditions>
<PreCondition
 Guid="47dafefb-e91a-4ce8-9bb9-714efb34ba20"
>Level.Value in [LevelEnum.L0, LevelEnum.L1]</PreCondition></PreConditions>
<Expression>Boolean.True</Expression>
</Case><Case
 Name="Level NTC"
 Guid="199eb7de-5afe-4668-864b-7286008e167a"
>
<PreConditions>
<PreCondition
 Guid="3894d9bf-99c3-4031-a849-43c8d27dfba7"
>Level.Value == LevelEnum.LNTC</PreCondition><PreCondition
 Guid="d4921d5d-80a6-4357-9508-d1e02eee12f6"
>THERE_IS X IN TrainData.TrainData.Value.LevelsSupportedOnBoard |  ( X.Value == Level.Value AND X.NTC == Level.NTC )</PreCondition></PreConditions>
<Expression>Boolean.True</Expression>
</Case><Case
 Name="Level 2,3"
 Guid="6358c398-bfa0-4889-9fea-c1774ec93f6a"
>
<PreConditions>
<PreCondition
 Guid="c2264a6b-4910-4c79-bc1f-45ac870f5e5a"
>Level.Value in [LevelEnum.L2, LevelEnum.L3]</PreCondition><PreCondition
 Guid="61d995ef-8596-4728-b62d-8eca9127d8d8"
>EURORADIO.Terminal.OneMobileTerminalIsAvailable()</PreCondition></PreConditions>
<Expression>Boolean.True</Expression>
</Case><Case
 Name="Otherwise"
 Guid="aafdca18-228e-4281-a30d-e1799a998e52"
>
<Expression>Boolean.False</Expression>
</Case></Cases>
</Function><Function
 Type="BaseTypes.Distance"
 Default=""
 X="20"
 Y="360"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="ComputeLTODistance"
 Guid="fd20b9f2-73c0-4e6f-aa9e-36ce9fecd9a3"
>
<ReqRef
 Id="48cd2e35-67c2-46a5-9f39-4d543c9361d0"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="76d3a7e7-d3dc-4162-824d-254688fdc4be"
>
</ReqRef><Comment>Converts the distance received from the trackside to the distance used on-board. If D_LEVELTR equals 32767 (= special value &quot;Now&quot;), the stored distance will equal BTM.TravelledDistanceFromLRBG(), otherwise it is translated as usually.</Comment>
<Parameters>
<Parameter
 Type="MessageTypes.Distance"
 Name="aDistance"
 Guid="4dead16f-9ec4-4761-9b58-f020c2dbca8e"
>
</Parameter><Parameter
 Type="Messages.Q_SCALE"
 Name="aScale"
 Guid="7e133d04-9468-42a1-86a4-46abfc9a6853"
>
</Parameter><Parameter
 Type="BaseTypes.Distance"
 Name="aDistanceFromRef"
 Guid="6dd5a855-6f98-4ab0-b21a-b3717c42ab72"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Special value &quot;now&quot;"
 Guid="941e4694-f686-4e96-ab79-bae123c083fe"
>
<PreConditions>
<PreCondition
 Guid="2a28cce7-3c7e-4ceb-a109-be236d69e4af"
>aDistance == 32767</PreCondition></PreConditions>
<Expression>Kernel.TrainPosition.FrontEndPosition(DistanceIntervalEnum.Nom)</Expression>
</Case><Case
 Name="Otherwise"
 Guid="a0f2f271-9086-4966-8579-24238c7e2adb"
>
<Expression>aDistanceFromRef + MessageTypes.QScaleDistance ( distance =&gt; aDistance, scale =&gt; aScale )</Expression>
</Case></Cases>
</Function><Function
 Type="Boolean"
 Default=""
 X="350"
 Y="360"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="AcknowledgementRequiredForLT"
 Guid="41be7128-6029-484c-9d47-1dfec1b786f0"
>
<ReqRef
 Id="8d4e3494-0d48-4a2c-9b77-5f6c3172b190"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="ed999388-254c-49d3-a68d-dd6ec685d937"
>
</ReqRef><ReqRef
 Id="a3a0049d-a3a9-4214-8f52-5e8bc71b4d74"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="e3ae7613-aba6-47aa-bde0-f1ed0f420ff8"
>
</ReqRef><ReqRef
 Id="a19779b8-8b61-4cfa-8ee6-b2a0a005a1ef"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="9d7e17f0-732c-4094-9ca6-98ece92f4c6a"
>
</ReqRef><ReqRef
 Id="8b054aef-0c7c-4bb6-b706-dc8f199900c8"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="d1de50a2-d565-4566-8a67-8b9c6656a6fb"
>
</ReqRef><ReqRef
 Id="10532251-984f-4e9b-9194-e8b1e47d73a4"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="7a287679-7e57-4dae-9460-4e1dd059653e"
>
</ReqRef><Comment>Indicates if the level transition requires the acknowledgement from the driver, according to the current level of the on-board and to the level of the level transition.</Comment>
<Parameters>
<Parameter
 Type="LevelTransitionStruct"
 Name="anLTO"
 Guid="cce3afb1-e47c-4834-aef8-2030ee570304"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Transition to L0"
 Guid="d49a8c09-431c-4f54-a2e6-0c628ebb4b38"
>
<PreConditions>
<PreCondition
 Guid="719c0338-4cbc-46ce-9cc9-79eece2f3361"
>anLTO.TRLevel.Value == LevelEnum.L0</PreCondition></PreConditions>
<Expression>Kernel.Level.Value.Value in [LevelEnum.L1, LevelEnum.L2, LevelEnum.L3, LevelEnum.LNTC]</Expression>
</Case><Case
 Name="Transition to L1"
 Guid="56f2f296-9ad7-40a2-97ae-86fa1bbd6d85"
>
<PreConditions>
<PreCondition
 Guid="e867f5a1-cb45-4b2b-8756-3acbf248c2da"
>anLTO.TRLevel.Value == LevelEnum.L1</PreCondition></PreConditions>
<Expression>Kernel.Level.Value.Value in [LevelEnum.LNTC]</Expression>
</Case><Case
 Name="Transition to L2"
 Guid="4644b186-48e9-42ef-a097-5af5bd38a70a"
>
<PreConditions>
<PreCondition
 Guid="d99bbf7e-2c43-4f73-89b2-6f3073524634"
>anLTO.TRLevel.Value == LevelEnum.L2</PreCondition></PreConditions>
<Expression>Kernel.Level.Value.Value in [LevelEnum.LNTC]</Expression>
</Case><Case
 Name="Transition to L3"
 Guid="e3dcefe8-0a6e-4c35-af1e-1cae0abc2c3d"
>
<PreConditions>
<PreCondition
 Guid="f309a7c2-0879-4ca7-bdb3-af5b22680bec"
>anLTO.TRLevel.Value == LevelEnum.L3</PreCondition></PreConditions>
<Expression>Kernel.Level.Value.Value in [LevelEnum.LNTC]</Expression>
</Case><Case
 Name="Transition to LNTC"
 Guid="aedccfb5-1bbd-43ed-96f5-5176b508b71c"
>
<PreConditions>
<PreCondition
 Guid="c8f31cb9-bb3a-4cef-ba29-fc9eaa7d3f5f"
>anLTO.TRLevel.Value == LevelEnum.LNTC</PreCondition></PreConditions>
<Expression>Kernel.Level.Value.Value in [LevelEnum.L0, LevelEnum.L1, LevelEnum.L2, LevelEnum.L3, LevelEnum.LNTC]</Expression>
</Case></Cases>
</Function></Functions>
<Procedures>
<Procedure
 X="20"
 Y="280"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 Name="AddNewLTO"
 Guid="17b81d46-93b1-4f1e-acad-9a5a64af63cf"
>
<ReqRef
 Id="8dc3adec-c4e6-489e-849a-d05eac8ee50b"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="f8927730-587d-4ac4-8f10-dcdc956c64c2"
>
</ReqRef><ReqRef
 Id="a59e0f85-7d70-426a-a85c-75592258286f"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="c68f0959-ee13-4990-9346-4315b8bac50f"
>
</ReqRef><ReqRef
 Id="8015eb3f-9570-4532-95e5-d755311dfa7a"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="af8f9d60-81f0-4f41-9351-68d72b8a37bd"
>
</ReqRef><ReqRef
 Id="375f3135-e004-4d28-9eff-dc2eb0a8bc7c"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="0d3127fc-63a8-4e10-b3d5-a05d1aa4e528"
>
</ReqRef><ReqRef
 Id="f1e6e692-0410-42c3-8425-da3a74657106"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="78609c81-6ce6-47fa-84ef-e7b41420bbee"
>
</ReqRef><Comment>Inserts a new level transition order in the list of level transition orders stored on-board.</Comment>
<Parameters>
<Parameter
 Type="MessageTypes.Length"
 Name="aL_ACKLEVELTR"
 Guid="61d38eaa-05d3-4cae-8d6c-318c10a31f9c"
>
</Parameter><Parameter
 Type="Messages.M_LEVELTR"
 Name="aM_LEVELTR"
 Guid="7376ff28-7b7d-44ea-ae56-06cd470b3e09"
>
</Parameter><Parameter
 Type="Messages.Q_SCALE"
 Name="aQ_SCALE"
 Guid="781237a3-2c52-40c8-b52b-fbc9efb59607"
>
</Parameter><Parameter
 Type="Messages.NID_NTC"
 Name="aNID_NTC"
 Guid="c7045001-1398-4d36-9778-9b179f4265d2"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 Name="Add new level transition order"
 Guid="3cef57c0-1b62-417d-9593-f4ea8e6ab7e6"
>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Level transition order to NTC"
 Guid="73dab62e-9c45-4ec1-8529-6f89f30f4815"
>
<Comment>Inserts a new transition order to the NTC level.</Comment>
<PreConditions>
<PreCondition
 Guid="deffbc9b-7242-4693-960f-aef5e0d2a07c"
>Kernel.LevelTransition.ERTMSToEFSLevel ( LevelT =&gt; aM_LEVELTR ) == LevelEnum.LNTC</PreCondition></PreConditions>
<Actions>
<Action
 Guid="5a5d8ed3-4dc4-4a07-8e01-dca8be3b0fed"
>INSERT
Kernel.LevelTransition.LevelTransitionStruct
{
    AcknLength=&gt;MessageTypes.QScaleLength ( length =&gt; aL_ACKLEVELTR, scale =&gt; aQ_SCALE ),
    TRLevel =&gt; LevelDataStruct {
       Value =&gt; Kernel.LevelTransition.ERTMSToEFSLevel ( LevelT =&gt; aM_LEVELTR ),
       NTC =&gt; Default.NID_NTC(aNID_NTC)
    }
}
IN  Kernel.LevelTransition.LevelTransitionOrder.LevelAndLength</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 Name="Level transition order to other level"
 Guid="bc06ebae-82a4-47c1-ba19-ba8f8e948492"
>
<Comment>Inserts a new transition order to the level different from NTC.</Comment>
<PreConditions>
<PreCondition
 Guid="5f3b6b13-fbbb-49f3-9e3c-593ace6052e8"
>Kernel.LevelTransition.ERTMSToEFSLevel ( LevelT =&gt; aM_LEVELTR ) != LevelEnum.LNTC</PreCondition></PreConditions>
<Actions>
<Action
 Guid="3896ef04-bbce-4b8e-bc64-36982d960e64"
>INSERT
Kernel.LevelTransition.LevelTransitionStruct
{
    AcknLength=&gt;MessageTypes.QScaleLength ( length =&gt; aL_ACKLEVELTR, scale =&gt; aQ_SCALE ),
    TRLevel =&gt; LevelDataStruct {
       Value =&gt; Kernel.LevelTransition.ERTMSToEFSLevel ( LevelT =&gt; aM_LEVELTR ),
       NTC =&gt; Default.NID_NTC.NOT_APPLICABLE
    }
}
IN  Kernel.LevelTransition.LevelTransitionOrder.LevelAndLength</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="20"
 Y="220"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 Name="LTOReceived"
 Guid="304f3b87-4b8b-42a3-8c9b-56d23ffbd040"
>
<ReqRef
 Id="7e7c641f-fe52-42ac-9aa8-12e5c7dfd6b2"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="5f527624-66fc-4329-ba25-e1abe05be5eb"
>
</ReqRef><ReqRef
 Id="8015eb3f-9570-4532-95e5-d755311dfa7a"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="05acd2a5-8f46-436c-9a1a-5cbe371fef62"
>
</ReqRef><ReqRef
 Id="b14e5210-48d3-4eed-89e3-4d03324dd8f6"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="46f7a264-2f51-4d1a-b263-f2757761cb99"
>
</ReqRef><ReqRef
 Id="375f3135-e004-4d28-9eff-dc2eb0a8bc7c"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="1b4a87b9-669b-41f3-977e-b2be0781dbc8"
>
</ReqRef><ReqRef
 Id="2f665d04-952a-40f9-917d-bfc51f72a606"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="d62c1f9e-3b39-446f-bebf-aa35413acfe9"
>
</ReqRef><ReqRef
 Id="07f0d51c-ecb9-4d52-8f3c-9cbd443a65bb"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="c6c3636c-cca1-4e8f-8f38-0cc54af367a8"
>
</ReqRef><ReqRef
 Id="ffdc9150-a628-4750-a762-a41c20c3dd26"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="a7a736fd-6a2c-492d-9322-151eece18334"
>
</ReqRef><ReqRef
 Id="1800bf83-b2c2-4d37-8406-ca0c31b30f0b"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="bb068f28-1567-402b-a7c2-afb86fe3681a"
>
</ReqRef><ReqRef
 Id="67c0ab2b-17af-47e9-b8f6-322caf6c7bdf"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="248cc78d-00e7-43e4-ac7a-4b66f0c3a9dd"
>
</ReqRef><ReqRef
 Id="2756e35e-8821-4ea1-b357-f59f62a8ff5d"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="ad93fa4f-ac97-44d2-a267-750492d96ce8"
>
</ReqRef><ReqRef
 Id="421b1ec9-4fb4-4b14-9e6d-498fccd32eee"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="9ebd696c-3220-4ed4-83dd-7456cb1c9f7c"
>
</ReqRef><ReqRef
 Id="7287a160-b4b5-453b-af0e-c36f019a289e"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="094560a3-3eac-4242-ba07-006cbc753912"
>
</ReqRef><ReqRef
 Id="6c2271aa-b854-4ce6-ba1f-4892e06164b4"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="d2af027d-fd18-4963-996a-5b0c7166aea1"
>
</ReqRef><Comment>Is called whenever a new trackside-information regarding an upcoming level transition is received. It will take care about the first (highest priority) LTO, forward the others to AddNewLTO and then process the new information.</Comment>
<Parameters>
<Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.LEVEL_TRANSITION_ORDER.Message"
 Name="Packet"
 Guid="44953883-e910-4506-ae5f-d113f72e9bf9"
>
</Parameter><Parameter
 Type="BaseTypes.Distance"
 Name="aDistanceFromRef"
 Guid="aa908325-2a02-4afb-91af-dde15293e4e8"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 Name="Replace previous information"
 Guid="431257d3-ce85-4629-9e3d-44b0d3ff6a4f"
>
<ReqRef
 Id="154fb773-8860-4dc7-85c1-7aff2b6bd741"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="b8643463-aeb5-4d39-bf81-5841894c6b47"
>
</ReqRef><ReqRef
 Id="375f3135-e004-4d28-9eff-dc2eb0a8bc7c"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="fd280359-f58e-4ac5-8103-a1b976c43682"
>
</ReqRef><ReqRef
 Id="22e84f41-00e6-498d-90b7-9a6a6c2dc136"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="9f344fa6-6e36-4ee1-8f61-115e4acb34ba"
>
</ReqRef><ReqRef
 Id="105589ab-9536-4d66-b95e-b3155a3a97f5"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="2a8e7ca6-6703-4fae-b097-7d44dd57cd0d"
>
</ReqRef><Comment>First, replace the previous information with the new one.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Replace previous information"
 Guid="80f02659-3e0a-4140-9113-61a38c5b8fcf"
>
<PreConditions>
<PreCondition
 Guid="03e95979-8ae6-471e-be3a-e68cab1f63fa"
><Comment>In SH or PS modes, the LTO is only stored if it is immediate.</Comment>
Kernel.Mode not in [ModeEnum.SH, ModeEnum.PS]
  OR  
Packet.D_LEVELTR == 32767</PreCondition></PreConditions>
<Actions>
<Action
 Guid="fdddee24-a2ec-4f7a-be60-6dc368978033"
>Kernel.LevelTransition.LevelTransitionOrder &lt;- Kernel.LevelTransition.LevelTransitionOrderStruct
{
  CurrentLevel =&gt; Level.Value,
  PositionReportSent =&gt; False,
  Location =&gt; ComputeLTODistance ( aDistance =&gt; Packet.D_LEVELTR, aScale =&gt; Packet.Q_SCALE, aDistanceFromRef =&gt; aDistanceFromRef ),
  LevelAndLength =&gt; 
  [ 
      LevelTransitionStruct { 
          AcknLength =&gt; MessageTypes.QScaleLength( length=&gt;Packet.L_ACKLEVELTR,  scale=&gt;Packet.Q_SCALE ),
          TRLevel =&gt; LevelDataStruct {
             Value =&gt; Kernel.LevelTransition.ERTMSToEFSLevel ( Packet.M_LEVELTR ) ,
             NTC =&gt; Packet.NID_NTC
         }
      }
  ]
}</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 Name="Handle all the level values"
 Guid="019f945e-875d-4a18-a861-769eb9da18ac"
>
<Comment>Then, insert the following levels of the table of priority to the list of levels.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Handle all the level values"
 Guid="7915a4ef-dfb9-4e29-998c-3d273019ad3e"
>
<PreConditions>
<PreCondition
 Guid="ff929c1d-de94-46e4-a636-d2b729cae5ac"
><Comment>In SH or PS modes, the LTO is only stored if it is immediate.</Comment>
Kernel.Mode not in [ModeEnum.SH, ModeEnum.PS]
  OR  
Packet.D_LEVELTR == 32767</PreCondition></PreConditions>
<Actions>
<Action
 Guid="a8e25caf-0ad5-4053-ac0a-f626072bf07e"
>APPLY 
Kernel.LevelTransition.AddNewLTO 
( 
   aL_ACKLEVELTR =&gt; X.L_ACKLEVELTR,
   aM_LEVELTR =&gt; X.M_LEVELTR,
   aNID_NTC =&gt; Packet.NID_NTC,
   aQ_SCALE=&gt; Packet.Q_SCALE
)
ON 
Packet.Sequence1</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 Name="Process the level transition order"
 Guid="9c568db2-28f9-4b44-a8a4-d25f61ec89c2"
>
<Comment>Finally, handle the new information.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Process the level transition order"
 Guid="bbe927d4-96e9-44f8-988b-0bf8b08a27e4"
>
<PreConditions>
<PreCondition
 Guid="f020e824-04db-4701-aa36-47cab4f8570a"
>Kernel.Mode not in [ModeEnum.SH, ModeEnum.PS]</PreCondition></PreConditions>
<Actions>
<Action
 Guid="f47d50dc-9fb7-45f3-bad6-736e4f447e1e"
>Kernel.LevelTransition.ProcessLTO( IsImmediate =&gt; Packet.D_LEVELTR == 32767 )</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="130"
 Y="220"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 Name="CLTOReceived"
 Guid="592255a0-2935-48b2-b02c-da2ba5d0b49b"
>
<ReqRef
 Id="569b9466-f366-4f5e-b29a-47dbd42081e2"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="338336d3-0344-4b2f-8380-68db927b7096"
>
</ReqRef><ReqRef
 Id="5bcc87bc-5d11-48c0-b51c-a864660e918f"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="57f1665c-3be9-4d1a-b4e2-7b5fb7308de9"
>
</ReqRef><ReqRef
 Id="07f0d51c-ecb9-4d52-8f3c-9cbd443a65bb"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="49dfdfbd-4f99-4198-bd3c-82c03590230a"
>
</ReqRef><ReqRef
 Id="2f665d04-952a-40f9-917d-bfc51f72a606"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="4d2b584a-7e83-4b9d-8cd3-72985651744a"
>
</ReqRef><Comment>Is called whenever a new trackside-information regarding an upcoming conditional level transition is received. It will take care about the first (highest priority) LTO, forward the others to AddNewLTO and then process the new information.</Comment>
<Parameters>
<Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.CONDITIONAL_LEVEL_TRANSITION_ORDER.Message"
 Name="Packet"
 Guid="3c51134e-97a7-4127-9cdb-e4e12b740aa8"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="Replace previous information"
 Guid="71e17414-df0a-4b73-b728-0440539665b4"
>
<ReqRef
 Id="22e84f41-00e6-498d-90b7-9a6a6c2dc136"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="ebc9ed77-1029-4f55-94ed-d6b37199fd0a"
>
</ReqRef><ReqRef
 Id="105589ab-9536-4d66-b95e-b3155a3a97f5"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="71d0b1e5-2162-4ec9-9ffb-0f38a8d60ff5"
>
</ReqRef><Comment>First, replace the previous information with the new one.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Replace previous information"
 Guid="5414400b-af6a-4136-828a-e6ebe9b04a47"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="747eb726-b54e-45cc-ab5b-9093722e93e4"
>Kernel.LevelTransition.LevelTransitionOrder &lt;- Kernel.LevelTransition.LevelTransitionOrderStruct
{
   CurrentLevel =&gt; Level.Value,
   PositionReportSent =&gt; False,
   Location =&gt; BaseTypes.Distance.Unknown,
   LevelAndLength =&gt; [ 
      LevelTransitionStruct { 
         AcknLength =&gt; BaseTypes.Length.NA, 
         TRLevel =&gt; LevelDataStruct {
             Value =&gt; Kernel.LevelTransition.ERTMSToEFSLevel( LevelT =&gt;Packet.M_LEVELTR ),
             NTC =&gt; Packet.NID_NTC
         }
      }
   ]
}</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="Handle all the level values"
 Guid="8f83c7d2-f581-49d3-964f-0a37295c2979"
>
<Comment>Then, insert the following levels of the table of priority to the list of levels.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Handle all the level values"
 Guid="6c77b971-d614-4463-909a-3b5aa347c13f"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="57e67d49-4efd-4083-a2c5-a7a599eaf591"
>APPLY 
Kernel.LevelTransition.AddNewLTO 
(  
   aM_LEVELTR =&gt; X.M_LEVELTR,
   aNID_NTC =&gt; Packet.NID_NTC,
   aQ_SCALE =&gt; Messages.Q_SCALE.Spare,
   aL_ACKLEVELTR =&gt; MessageTypes.Length.NA
)
ON 
Packet.Sequence1</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="Process the conditional level transition order"
 Guid="b0986f57-114d-4425-ba4c-9f93221238e2"
>
<Comment>Finally, handle the new information.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Process the conditional level transition order"
 Guid="04b0ea50-4702-4e8b-a61a-8ab209c27006"
>
<ReqRef
 Id="d8cf2f6a-d8be-41d9-948a-ae97df851041"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="28e41018-55ca-40cf-bb57-9116da7c76b1"
>
</ReqRef><ReqRef
 Id="e959ba39-6b20-4678-ab9e-59be9ce585a3"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="a7af2c92-6d39-405d-bdd0-ec901bb13ca4"
>
</ReqRef><ReqRef
 Id="dcd5e982-e0cd-4f3e-be0c-2d1ab066cfa7"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="9b7dca80-a5c3-4b54-a6e9-5fcfed3d100e"
>
</ReqRef><Comment>If this precondition is met, dont carry out a level transition #morido, 13/10/15</Comment>
<PreConditions>
<PreCondition
 Guid="7432ff75-4a66-4ae6-9aae-3df6be9e372b"
>NOT (THERE_IS X IN Kernel.LevelTransition.LevelTransitionOrder.LevelAndLength | X.TRLevel.Value == Kernel.Level.Value.Value)</PreCondition><PreCondition
 Guid="1a10c0fb-f68d-41d0-900c-4dd3613eacdc"
>Kernel.Mode not in [ModeEnum.SH, ModeEnum.PS]</PreCondition></PreConditions>
<Actions>
<Action
 Guid="1a6bdf17-071d-4c6b-921d-d6e6833e5395"
>Kernel.LevelTransition.ProcessLTO( IsImmediate =&gt; True )</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="240"
 Y="220"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ProcessLTO"
 Guid="9f0e907e-219e-4923-a617-2a61a1063133"
>
<ReqRef
 Id="5000ea5a-8c25-4e82-b64e-1651fe1cea12"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="45363af2-0936-412e-9368-b4ef2b8c06c1"
>
</ReqRef><Comment>This does all general stuff required for a level transition independent from the source and target level It is therefore a preliminary step for ProcessLTOSpecific.</Comment>
<Parameters>
<Parameter
 Type="Boolean"
 Name="IsImmediate"
 Guid="fa6f1edc-a8ac-47fe-99b7-6256f2b9f138"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="Reduce LTO to one"
 Guid="82a28339-5519-4d4f-8f48-fb0925f0bf48"
>
<ReqRef
 Id="a7b92d29-b0ce-4de8-8642-497eddf906d4"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="52896317-fa43-4b20-bf88-201b8512a6d3"
>
</ReqRef><ReqRef
 Id="19d133b1-bf49-4450-93e0-905a1a42b1e7"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="fbb1473a-f0aa-4110-908c-b391112b8736"
>
</ReqRef><ReqRef
 Id="2c603461-d585-4f5b-a625-44c11d721ef7"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="427b62a5-f0fa-4848-82df-a98acfae9ef8"
>
</ReqRef><ReqRef
 Id="9fb4faf4-8c92-4619-9edc-a411b5cc07cf"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="b01c3aa0-7c88-43b9-8177-784da120c0ac"
>
</ReqRef><Comment>We now prepare the level-transition. I.e. all relevant data has been received and we will now filter out the one single transition which shall be performed</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Reduce LTO to one"
 Guid="f4557bca-d63c-4099-88fe-7af1e08de1c5"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="ed925502-1144-4258-9df9-8077986730c3"
>Kernel.LevelTransition.LevelTransitionToProcess &lt;- FIRST X IN Kernel.LevelTransition.LevelTransitionOrder.LevelAndLength | Kernel.LevelTransition.AvailableForUse( Level=&gt; X.TRLevel )</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="Fallback if nothing available"
 Guid="6e7e131b-05be-48da-8d86-4f3cd1e5fd9a"
>
<ReqRef
 Id="eba5be0d-c9b6-41cf-8df3-0cf45aa32159"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="2a66ddbd-1775-4be9-872c-7381d0d40473"
>
</ReqRef><Comment>This is only executed if the previous step (&quot;ReduceLTOtoOne&quot;) failed (i,e, nothing is available)</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Fallback if nothing available"
 Guid="ab6c5d8f-4fea-4400-b8c1-34b13a2785bf"
>
<PreConditions>
<PreCondition
 Guid="aea1dfa9-f22d-41e6-b71f-28c16a37d8ab"
>Kernel.LevelTransition.LevelTransitionToProcess.AcknLength == BaseTypes.Length.NA</PreCondition><PreCondition
 Guid="0905157e-7ec2-4c8f-b7ed-41eda4a774b2"
>Kernel.LevelTransition.LevelTransitionToProcess.TRLevel.Value == LevelEnum.Unknown</PreCondition><PreCondition
 Guid="51f56750-a2ca-4d8d-813b-c8da29fbd2e3"
>Kernel.LevelTransition.LevelTransitionToProcess.TRLevel.NTC == NID_NTC.NOT_APPLICABLE</PreCondition></PreConditions>
<Actions>
<Action
 Guid="13a35181-3fe7-41a0-ac21-38a64a3091f6"
>Kernel.LevelTransition.LevelTransitionToProcess &lt;- LAST X IN ( Kernel.LevelTransition.LevelTransitionOrder.LevelAndLength )</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="CheckAcknowledgement"
 Guid="ca6a90e6-8f59-4986-8c59-80e27df43cd1"
>
<ReqRef
 Id="326c0395-05a3-431d-b435-8b4d44c094c1"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="84598eac-1a6e-48de-a7ca-6c82b575f50a"
>
</ReqRef><ReqRef
 Id="8328bb5f-310c-462b-9f15-802a2fee99b9"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="95bbb81a-e94a-4249-a2cf-2c51ee4bc965"
>
</ReqRef><ReqRef
 Id="a9175422-b443-4cc7-95c0-c99e8be3f93b"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="1d6f84dc-9ff9-434d-924e-6b991d83e2e9"
>
</ReqRef><Comment>If this is an immediate level transition order (or a conditional level transition order, which has to be handled as an immediate one), the on-board asks the driver to acknowledge the level transition.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="CheckAcknowledgement"
 Guid="ec0364d2-cac7-4416-8161-2f940de28c6c"
>
<PreConditions>
<PreCondition
 Guid="0304e311-65dd-4d61-9fc9-5bf978e8a25f"
>IsImmediate</PreCondition><PreCondition
 Guid="d6084a3b-1eef-4337-853b-ac80bbe9af51"
>Kernel.LevelTransition.AcknowledgementRequiredForLT( anLTO =&gt; Kernel.LevelTransition.LevelTransitionToProcess )</PreCondition><PreCondition
 Guid="1f3fc39c-13be-4818-b96a-906fb7e5d4e6"
>Kernel.Mode != ModeEnum.NL</PreCondition></PreConditions>
<Actions>
<Action
 Guid="6e7033cb-ec67-45ae-8141-1fb4371273ce"
>DMI.MasterDMI().In_AcknOfLevelTransition.InitiateRequest( aLevel =&gt; Kernel.LevelTransition.LevelTransitionToProcess.TRLevel )</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="130"
 Y="280"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="ExecuteLevelTransitionOrder"
 Guid="7c8fb721-4325-47f8-9f3f-a3ddca9332d9"
>
<ReqRef
 Id="d20e6c3b-b738-4e4a-9046-a9bc93ed6bf1"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="735599f4-da3a-4775-903f-c0e418d97b5f"
>
</ReqRef><Comment>Executed the level transition order when the train has reached its location. Different actions can be taken according to the current level and the target level.</Comment>
<Rules>
<Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 Name="Execute level transition"
 Guid="65e5f4f7-e073-4aa9-a8ad-91bd65ac5a39"
>
<Comment>According to the values of the current and the target level, the level transitions are handled in different ways.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Execute level transition"
 Guid="4a02871c-70ae-4b77-aa21-24e61f3c0442"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="097a357d-a5c2-47af-a6ac-050fe94ed1ed"
>Kernel.SetLevel(Kernel.LevelTransition.LevelTransitionToProcess.TRLevel)</Action><Action
 Guid="0ddeb99e-7c2c-4f4c-a6c4-63b006cbc5e0"
>EURORADIO.Messages.PositionReport.PositionReportEventsTracker.Level &lt;- Kernel.LevelTransition.LevelTransitionOrder.CurrentLevel.Value</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure></Procedures>
<Variables>
<Variable
 Type="LevelTransition.LevelTransitionOrderStruct"
 DefaultValue="EMPTY"
 VariableMode="Internal"
 X="20"
 Y="100"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="LevelTransitionOrder"
 Guid="1090a9f6-edf2-4b09-8c7a-3bd882af71eb"
>
<ReqRef
 Id="7e7c641f-fe52-42ac-9aa8-12e5c7dfd6b2"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="37a8549c-70e7-40db-81f0-196e5f56600a"
>
</ReqRef><ReqRef
 Id="6b26f38c-d98d-4eee-a314-ae6b48256d36"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="c27ec864-3c14-4011-b217-ea54c96e8b00"
>
</ReqRef><ReqRef
 Id="51ddbc44-360a-4339-9b7c-fc91347a5da2"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="c2abeb43-c104-4ec4-9329-c03b18b69ce6"
>
</ReqRef><ReqRef
 Id="f1e6e692-0410-42c3-8425-da3a74657106"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="4db0959a-eb36-4bb3-af9a-5ee13b63d244"
>
</ReqRef><ReqRef
 Id="3c872475-fbad-4a03-b13a-a6fa51c6a722"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="d1f18645-b4ca-45e8-9012-a6f01b79ccc4"
>
</ReqRef><ReqRef
 Id="377cc4cc-52bc-4bc6-8489-759a13078b63"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="597a0e81-3a0d-4063-8b12-7e1b8fdf6ad9"
>
</ReqRef><ReqRef
 Id="67c0ab2b-17af-47e9-b8f6-322caf6c7bdf"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="1be8859f-3cae-4bc2-8fe3-bc1b996a24e7"
>
</ReqRef><ReqRef
 Id="2756e35e-8821-4ea1-b357-f59f62a8ff5d"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="4efd7bee-479d-4ff1-88fa-1d675f1b1621"
>
</ReqRef><ReqRef
 Id="421b1ec9-4fb4-4b14-9e6d-498fccd32eee"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="122913ca-e101-452f-b193-2593b725af89"
>
</ReqRef><ReqRef
 Id="7287a160-b4b5-453b-af0e-c36f019a289e"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="1868087e-159d-4865-9f38-4c5862622ede"
>
</ReqRef><Comment>Level transition order  received from the track side.</Comment>
</Variable><Variable
 Type="LevelTransition.LevelTransitionStruct"
 DefaultValue="EMPTY"
 VariableMode="Internal"
 X="450"
 Y="100"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 Name="LevelTransitionToProcess"
 Guid="c4da5415-191f-483c-880e-1c2e86e52dea"
>
<ReqRef
 Id="a7b92d29-b0ce-4de8-8642-497eddf906d4"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="3d81a9fc-56e0-4b4b-87a3-1cd11c8bfa42"
>
</ReqRef><Comment>The (target-)level (and -distance) that the train should perform a transition to (i.e. the output of the computations).</Comment>
</Variable></Variables>
<Rules>
<Rule
 Priority="Processing"
 X="20"
 Y="440"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 Name="Execute level transition order"
 Guid="2d1413d6-1677-4d3a-9fd6-3e25c3ab814f"
>
<ReqRef
 Id="d20e6c3b-b738-4e4a-9046-a9bc93ed6bf1"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="5479e312-51ed-4bcd-84c0-79c01422495c"
>
</ReqRef><ReqRef
 Id="569b9466-f366-4f5e-b29a-47dbd42081e2"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="d9242104-b92f-4824-9f1e-e35e3bb21582"
>
</ReqRef><ReqRef
 Id="6807b992-e129-4a24-8342-bd0ebe2913da"
 SpecId="7976a642-eab5-431b-a656-44fc19d26d62"
 Guid="c19ada3c-a3fc-4b71-a336-39b5afae1c97"
>
</ReqRef><ReqRef
 Id="07f0d51c-ecb9-4d52-8f3c-9cbd443a65bb"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="24e31559-1a9e-4ea9-ad2b-e9f95ffda621"
>
</ReqRef><ReqRef
 Id="2f665d04-952a-40f9-917d-bfc51f72a606"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="a7fb407f-8879-48af-ac10-4229a16fc7b6"
>
</ReqRef><ReqRef
 Id="36561078-7540-4d92-a515-c67b84dd7db1"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="31b3ff16-984f-4aa7-940d-91f6962522b9"
>
</ReqRef><ReqRef
 Id="7a351f5a-91a2-4288-82a2-e7c44f65baf4"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="2ec9b29e-fce3-4a61-9c2b-1a689e2d757a"
>
</ReqRef><ReqRef
 Id="814a7049-1a26-4fdf-be41-8bdeea3004c8"
 SpecId="c238ead1-8ba7-4613-ae49-4288833ea80d"
 Guid="e36c0b17-fbe2-4f9f-83a5-f746c0726ab9"
>
</ReqRef><Comment>If the train has reached the level transition order location, the on-board equipment executed is.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Execute level transition order"
 Guid="ac07ff8b-fc42-4327-a7ab-f1d27cc45a2b"
>
<Comment>NTC-part not functional for now (Kernel.NationalSystemId). Requirement for this is missing. Is it needed? #morido, 13/10/14</Comment>
<PreConditions>
<PreCondition
 Guid="32291f91-c8f4-4551-9efb-1784c4b3c42b"
>Available(Kernel.LevelTransition.LevelTransitionOrder)
  AND  
Kernel.LevelTransition.LevelTransitionOrder.Location &lt;= Kernel.TrainPosition.FrontEndPosition(DistanceIntervalEnum.Nom)</PreCondition><PreCondition
 Guid="a793711a-f9af-4251-b86a-906d92f0b23f"
>Available(Kernel.LevelTransition.LevelTransitionToProcess)
  AND  
Kernel.Level.Value != Kernel.LevelTransition.LevelTransitionToProcess.TRLevel</PreCondition><PreCondition
 Guid="25250332-c8c8-4785-908c-5901c81268aa"
>Kernel.Mode not in [ModeEnum.SH, ModeEnum.PS, ModeEnum.RV]</PreCondition></PreConditions>
<Actions>
<Action
 Guid="0dca39ae-4aed-48b7-b4a6-6e165c4d7194"
>Kernel.LevelTransition.ExecuteLevelTransitionOrder()</Action><Action
 Guid="4394273d-b6c5-440d-b2db-9c96b1741a0f"
>DMI.MasterDMI().Out_LevelTransitionAnnouncement.OutputInformation.DoNotDisplay()</Action><Action
 Guid="74cc1341-8641-49f7-986d-148d334de2ca"
>LevelTransitionToProcess &lt;- EMPTY</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="130"
 Y="440"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Check acknowledgement"
 Guid="c31fe5c9-0f2d-4090-a87a-ef6c2b424b65"
>
<Comment>Handles the acknowledgement requests for level transition orders.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Acknowledgement has to be requested"
 Guid="f402987a-e9bc-4a6a-b1ef-9db9fac8b09b"
>
<ReqRef
 Id="8328bb5f-310c-462b-9f15-802a2fee99b9"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="5d58f1bd-18f1-4045-9cd2-874a54b2bb38"
>
</ReqRef><ReqRef
 Id="a9175422-b443-4cc7-95c0-c99e8be3f93b"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="7e9db350-4378-490f-b28a-8a197ac5fe03"
>
</ReqRef><ReqRef
 Id="9f0f683a-1fd7-4c49-a2e8-e9ed1c86ba09"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="2979102a-3404-4e51-9f61-6b77fb893ffb"
>
</ReqRef><ReqRef
 Id="2f665d04-952a-40f9-917d-bfc51f72a606"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="efe453cb-1bee-485e-8925-ed4b1d4fcf91"
>
</ReqRef><ReqRef
 Id="07f0d51c-ecb9-4d52-8f3c-9cbd443a65bb"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="542c7b52-17fc-4eb5-9c15-898dd9373470"
>
</ReqRef><Comment>When the max safe front end of the train has passed a trackside defined location in rear of the level transition border and if the mode is different from NL, the on-board asks the driver to acknowledge the level transition.</Comment>
<PreConditions>
<PreCondition
 Guid="119f3451-7abd-48fd-ae98-5d685a2d6454"
>Kernel.LevelTransition.LevelTransitionOrder != EMPTY</PreCondition><PreCondition
 Guid="ba1fa256-51bd-488d-80b9-bedccd862de9"
>Available(Kernel.LevelTransition.LevelTransitionToProcess)
  AND  
Kernel.LevelTransition.AcknowledgementRequiredForLT( anLTO =&gt; Kernel.LevelTransition.LevelTransitionToProcess )</PreCondition><PreCondition
 Guid="70792393-b2da-4f9c-b343-ffd26b6ede9b"
>Kernel.Mode not in [ModeEnum.NL, ModeEnum.SH, ModeEnum.PS]</PreCondition><PreCondition
 Guid="0f38d48a-8431-4fc2-8a57-2fed7286c19c"
>Kernel.TrainPosition.FrontEndPosition ( PointOfInterest=&gt;DistanceIntervalEnum.Max ) &gt; Kernel.LevelTransition.LevelTransitionOrder.Location - BaseTypes.LengthToDistance(Kernel.LevelTransition.LevelTransitionToProcess.AcknLength)</PreCondition></PreConditions>
<Actions>
<Action
 Guid="6cd45745-93fd-462e-a9a2-fba632fb6219"
>DMI.MasterDMI().In_AcknOfLevelTransition.InitiateRequest( aLevel =&gt; Kernel.LevelTransition.LevelTransitionToProcess.TRLevel )</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="240"
 Y="440"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="Level transition available at standstill"
 Guid="b33707d7-a979-442b-8878-13a70b47489a"
>
<ReqRef
 Id="4cfe03c5-9038-4784-ad96-4ccf981c6a5f"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="f4b6f183-0de7-4ed5-869d-641111c11858"
>
</ReqRef><ReqRef
 Id="cead20b2-bf19-49cf-809c-06c7f4d877d9"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="09a1b2a8-8f1c-42d4-bee3-b551cacb695c"
>
</ReqRef><Comment>Makes level selection available to driver at standstill. Doesn&apos;t interfere with Start of Mission.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Activate"
 Guid="035fc15c-c9b7-463a-8b87-4216acf1f913"
>
<PreConditions>
<PreCondition
 Guid="3f11e590-9249-4aef-b658-996de250ed28"
>Odometry.TrainIsAtStandstill()</PreCondition><PreCondition
 Guid="5499fbbf-d48d-4ff5-8e42-1e9b67ee7abc"
>ActiveFunctions.DetermineLevel()</PreCondition><PreCondition
 Guid="d73f573e-b828-4ff7-b16a-3088529dea6f"
>Kernel.HandleModeChange not in Kernel.HandleModeChangeSM.StartOfMission</PreCondition></PreConditions>
<Actions>
<Action
 Guid="98ca9aea-e08f-4e14-9d17-ef44012ba8d9"
>DMI.MasterDMI().In_ErtmsEtcsLevelEntryRequest.InitiateRequest()</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 Name="Disable"
 Guid="71842ea4-86bc-489f-90ab-47883ef7a2aa"
>
<PreConditions>
<PreCondition
 Guid="91663132-1bd6-43ce-b576-6a80cc56fdbc"
>NOT(Odometry.TrainIsAtStandstill())</PreCondition><PreCondition
 Guid="52ccb222-96dc-47fd-88aa-0a12944af07e"
>ActiveFunctions.DetermineLevel()</PreCondition><PreCondition
 Guid="2468a1b2-2283-495b-a38c-697e91fce926"
>Kernel.HandleModeChange not in Kernel.HandleModeChangeSM.StartOfMission</PreCondition></PreConditions>
<Actions>
<Action
 Guid="16290386-9246-4907-8046-5625b5e452fa"
>DMI.MasterDMI().In_ErtmsEtcsLevelEntryRequest.InputInformation.Disable()</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</NameSpace>
