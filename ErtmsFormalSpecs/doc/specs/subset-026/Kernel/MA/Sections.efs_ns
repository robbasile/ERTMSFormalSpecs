<NameSpace
 X="240"
 Y="10"
 Width="100"
 Height="50"
 Name="Sections"
 Guid="18464a3a-fb43-45e2-b1bc-1bb9c55e1bd8"
>
<NameSpaces>
</NameSpaces>
<Structures>
<Structure
 Default=""
 X="210"
 Y="20"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="SectionStruct"
 Guid="fffdbc4e-3bd3-4ff3-ba88-a499ce5b40d6"
>
<ReqRef
 Id="4b2c7641-4724-45e9-ac46-acb185e386b0"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="b1888cc3-7271-4b48-8cf3-c0ab4691b97c"
>
</ReqRef><ReqRef
 Id="588756eb-1786-4776-86ae-3aaa296881a9"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="0ee8d9ee-0bc0-46fb-b113-c217a901a62b"
>
</ReqRef><Comment>Represents a MA section.</Comment>
<StructureElement
 TypeName="BaseTypes.Length"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Verified="TRUE"
 Name="Length"
 Guid="17b8c47c-897c-4c86-bad5-6d9d3c50dd67"
>
<ReqRef
 Id="51578cd7-a50a-46d9-b7a5-11e24eee2f49"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="6737cb2a-9630-4310-92ba-f52c7707c53b"
>
</ReqRef><ReqRef
 Id="71df462f-9b71-4b35-add6-5ded11f964a3"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="a20c83c9-e060-4208-b74b-aee42677a287"
>
</ReqRef><Comment>Represents the length of the section.</Comment>
</StructureElement><StructureElement
 TypeName="MATimers.TimeOutStruct"
 Default="EMPTY"
 Mode="Internal"
 Implemented="TRUE"
 Verified="TRUE"
 Name="TimeOut"
 Guid="da427778-9690-4159-86b8-cdbd5be509f4"
>
<ReqRef
 Id="9e1096f7-cf79-4ff5-8dcf-ac3a8bc775e6"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="c605f2f6-86b5-44ec-a3c4-eb16909386b1"
>
</ReqRef><ReqRef
 Id="b4e8a739-839a-4e55-80ab-4cabb887e47b"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="a2fad3a3-4f2a-487c-8ef9-7c3481580796"
>
</ReqRef><ReqRef
 Id="3ea65cb2-f46e-4d0e-885e-8ae8c75b4a06"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="1e622c10-4067-4b8c-8fdb-bd1ae56d4333"
>
</ReqRef><ReqRef
 Id="e5896680-5ea9-4749-b01e-599ab85abe84"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="b53bfa83-8ecd-4edf-9de1-ff2c5b5a30b1"
>
</ReqRef><Comment>Represents the section time-out (if no time-out is available for this section, this field is EMPTY).</Comment>
</StructureElement></Structure></Structures>
<Collections>
<Collection
 TypeName="SectionStruct"
 MaxSize="6"
 Default="[]"
 X="40"
 Y="20"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="SectionsCol"
 Guid="03331e1a-0a7c-414b-bdf9-0041a6d8266a"
>
<ReqRef
 Id="173067d8-3484-4ec9-81e4-7275c3374764"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="1b0b3079-d9ec-4f0f-b72e-9eca770ecca6"
>
</ReqRef><ReqRef
 Id="cfc4df94-c1ee-4d42-b8ab-44f37ef4a6ba"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="c9a9ed6c-a891-4b6d-9319-51c519b13d14"
>
</ReqRef><ReqRef
 Id="d701e3bf-8b71-4b6f-84c0-9b64aa641498"
 SpecId="c238ead1-8ba7-4613-ae49-4288833ea80d"
 Guid="14420dcd-645e-4886-9f63-380fed6e3f3d"
>
</ReqRef><Comment>Represents MA sections.</Comment>
</Collection></Collections>
<Functions>
<Function
 Type="SectionStruct"
 Default=""
 X="400"
 Y="20"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 Name="ConsiderSectionForInfill"
 Guid="77c23221-fd4d-40bd-9d27-49cf6601b20f"
>
<ReqRef
 Id="4f9e6037-be46-477d-bbca-3122bd9ad940"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="2a3d6b87-9808-4d95-8b3d-079d161344e9"
>
</ReqRef><ReqRef
 Id="9c420bdc-a561-406b-a479-9d6cbde196a6"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="550c0f55-479d-4966-8f64-810ce421a3d8"
>
</ReqRef><Comment>This function decides if the current section shall be removed when an infill MA is received. There is three possible cases:
 - The section is situated before the infill location, in this case it is kept;
 - The section is situated after the infill location, in this case it is removed;
 - The infill location is situated on the section, in this case the section is cut at the infill location.</Comment>
<Parameters>
<Parameter
 Type="SectionStruct"
 Name="aSection"
 Guid="e46ae95a-41f4-40bf-80c2-08e5e7adde30"
>
</Parameter><Parameter
 Type="BaseTypes.Distance"
 Name="InfillDistance"
 Guid="69faeedf-b0c0-4785-b78e-2e58a659bdbe"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Section before infill distance"
 Guid="89ac38c6-ea08-42d4-870b-6bb755454e01"
>
<PreConditions>
<PreCondition
 Guid="446d8d87-a8ca-4443-a6b2-75786ca0a339"
>Kernel.MA.AbsoluteDistance ( aSection ) + BaseTypes.LengthToDistance ( aSection.Length ) &lt;= InfillDistance</PreCondition></PreConditions>
<Expression>aSection</Expression>
</Case><Case
 Name="Section on infill distance"
 Guid="5be63ab4-2fca-47ef-85d9-85cd1d3fd1f6"
>
<PreConditions>
<PreCondition
 Guid="2b237b9f-19a1-4300-b604-e5f799d23204"
>Kernel.MA.AbsoluteDistance ( aSection ) &lt; InfillDistance</PreCondition><PreCondition
 Guid="0b67ce90-36ac-48f6-a81a-77307bf2b355"
>InfillDistance &lt; Kernel.MA.AbsoluteDistance ( aSection ) + BaseTypes.LengthToDistance  ( aSection.Length )</PreCondition></PreConditions>
<Expression>SectionStruct
{
    Length =&gt; BaseTypes.LengthToDistance ( InfillDistance - AbsoluteDistance ( aSection ) ),
    TimeOut =&gt; aSection.TimeOut
}</Expression>
</Case><Case
 Name="Section after infill distance"
 Guid="293f2c22-0148-4f55-8ed2-5197a5afe514"
>
<Expression>EMPTY</Expression>
</Case></Cases>
</Function><Function
 Type="Sections.SectionStruct"
 Default=""
 X="400"
 Y="140"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="CreateEFSSection"
 Guid="299a27b9-4a71-4ca2-927d-54c7d5add5cb"
>
<ReqRef
 Id="3ea65cb2-f46e-4d0e-885e-8ae8c75b4a06"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="e45e8dfb-9ad8-409f-98e0-ea16f9988c29"
>
</ReqRef><ReqRef
 Id="b796c06e-efd9-4a35-abfc-9983a477fc35"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="e6ea834f-b78a-4b78-af3f-ca1a5b14c897"
>
</ReqRef><ReqRef
 Id="4b2c7641-4724-45e9-ac46-acb185e386b0"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="21b9673d-f4b0-4482-b6d3-c5dff9e92190"
>
</ReqRef><ReqRef
 Id="51578cd7-a50a-46d9-b7a5-11e24eee2f49"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="5094fa34-a6ce-437b-9aa9-f45c6cf4929c"
>
</ReqRef><ReqRef
 Id="b4e8a739-839a-4e55-80ab-4cabb887e47b"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="4465041e-c387-4430-b633-0c0e741b65ee"
>
</ReqRef><ReqRef
 Id="e5896680-5ea9-4749-b01e-599ab85abe84"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="5349344c-4d0b-4ca3-b3f0-ef2b7d3a431b"
>
</ReqRef><Comment>Creates an EFSSection from a section received from a balise of RBC (level 1).</Comment>
<Parameters>
<Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.LEVEL_1_MOVEMENT_AUTHORITY.SubStructure1"
 Name="ERTMSSection"
 Guid="41c9e67f-0142-4f8c-bbc7-8380bc60d9fd"
>
</Parameter><Parameter
 Type="Messages.Q_SCALE"
 Name="Scale"
 Guid="0b75831b-6fa2-4e98-80b8-0b78d1295f41"
>
</Parameter><Parameter
 Type="BaseTypes.Time"
 Name="SectionStartTimer"
 Guid="7c9adcc0-43e2-4367-9d2a-cb2ce7306602"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Value"
 Guid="361186d3-3c58-453f-be53-aea46fd7bbe8"
>
<Expression>Sections.SectionStruct
{
    Length =&gt; MessageTypes.QScaleLength ( length =&gt; ERTMSSection.L_SECTION, scale =&gt; Scale),
    TimeOut =&gt; CreateSectionTimer(
        ERTMSSection =&gt; ERTMSSection,
        SectionStartTimer =&gt; SectionStartTimer,
        Scale =&gt; Scale
    )
}</Expression>
</Case></Cases>
</Function><Function
 Type="MATimers.TimeOutStruct"
 Default=""
 X="510"
 Y="20"
 Width="100"
 Height="50"
 Name="CreateSectionTimer"
 Guid="81cfab67-e1fe-4b2b-91e3-4c599aa30401"
>
<Parameters>
<Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.LEVEL_1_MOVEMENT_AUTHORITY.SubStructure1"
 Name="ERTMSSection"
 Guid="bc1d8ded-ed4b-48b5-bd50-3163f572d1d6"
>
</Parameter><Parameter
 Type="BaseTypes.Time"
 Name="SectionStartTimer"
 Guid="7df26278-4191-4555-a2c7-e3c3ada72102"
>
</Parameter><Parameter
 Type="Messages.Q_SCALE"
 Name="Scale"
 Guid="e7dd4072-4c34-4a1c-b3f3-f2207b0e8006"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Time out available"
 Guid="808777f7-2046-49cd-b2ec-7e1d9cc033c8"
>
<PreConditions>
<PreCondition
 Guid="0a772204-e922-463b-8a9a-6a03d5ca620b"
>ERTMSSection.Q_SECTIONTIMER == Messages.Q_SECTIONTIMER.Section_Timer_information_to_follow</PreCondition></PreConditions>
<Expression>MATimers.TimeOutStruct{
    Distance =&gt; MessageTypes.QScaleDistance ( distance =&gt; ERTMSSection.D_SECTIONTIMERSTOPLOC, scale =&gt; Scale ),
    TimeOut =&gt; BaseTypes.Time ( ERTMSSection.T_SECTIONTIMER ),
    TimerStart =&gt; SectionStartTimer
}</Expression>
</Case><Case
 Name="No time out"
 Guid="4b352cc9-f274-4f38-92e1-fc7de00f6894"
>
<Expression>EMPTY</Expression>
</Case></Cases>
</Function><Function
 Type="BaseTypes.Length"
 Default=""
 X="400"
 Y="80"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="CurrentSectionLength"
 Guid="ec9777c9-b927-4f35-98c8-6a59a224aac8"
>
<Comment>Returns the length of the current section (used for distance relocation when a new LRBG is passed).</Comment>
<Cases>
<Case
 Name="SectionsAvailable"
 Guid="6a293889-6aa0-41bb-8efa-980636513f25"
>
<PreConditions>
<PreCondition
 Guid="fbfb8590-c1b3-499f-ac7e-0ee3010e3001"
>Available ( Kernel.MA.MA )</PreCondition><PreCondition
 Guid="86774d2d-b0d2-450c-b5b2-18a8e71de39b"
>Kernel.MA.MA.Sections != EMPTY</PreCondition></PreConditions>
<Expression>(FIRST X IN Kernel.MA.MA.Sections).Length</Expression>
</Case></Cases>
</Function><Function
 Type="Boolean"
 Default=""
 X="510"
 Y="200"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="IsAfterDistance"
 Guid="c845997e-9449-4208-a0c9-3063804c1993"
>
<Comment>Check that the end of the section is further than the distance</Comment>
<Parameters>
<Parameter
 Type="Sections.SectionStruct"
 Name="aSection"
 Guid="e9c0973e-2bda-49a4-bd8d-8b25469d6b1d"
>
</Parameter><Parameter
 Type="BaseTypes.Distance"
 Name="Distance"
 Guid="7c259d6c-ba86-4d39-a9fa-403e0cb0db97"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Value"
 Guid="2d9c3618-569f-4260-b93b-ecd826d333d9"
>
<Expression>SectionStartLocation(aSection) + BaseTypes.LengthToDistance(aSection.Length) &gt; Distance</Expression>
</Case></Cases>
</Function><Function
 Type="Sections.SectionStruct"
 Default=""
 X="400"
 Y="200"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="MakeRelocatedSection"
 Guid="cb565818-cd4f-4c44-a599-87c781003075"
>
<Comment>Adjusts the length of the section if needed.
This is used for when a new reference location is received and the MA is relocated to this nex reference location.</Comment>
<Parameters>
<Parameter
 Type="Sections.SectionStruct"
 Name="aSection"
 Guid="95813a59-766c-4336-830b-b3c083326ab7"
>
</Parameter><Parameter
 Type="BaseTypes.Distance"
 Name="Distance"
 Guid="0d77381d-892c-4be0-b256-adb4bcf4eaf7"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Is the new first section"
 Guid="b5a656f5-558b-4131-a8d6-a61ab01b1d42"
>
<PreConditions>
<PreCondition
 Guid="3377ed4c-7c63-4b30-a765-879d60dee192"
>SectionStartLocation(aSection) &lt; Distance</PreCondition><PreCondition
 Guid="ec823700-cb99-43ab-9553-ef7bd611d85a"
>Sections.IsAfterDistance(
    aSection=&gt;aSection,
    Distance=&gt;Distance
)</PreCondition></PreConditions>
<Expression>Sections.SectionStruct{
    Length =&gt; aSection.Length - BaseTypes.DistanceToLength ( Distance - SectionStartLocation(aSection) ),
    TimeOut =&gt; aSection.TimeOut
}</Expression>
</Case><Case
 Name="Is another section"
 Guid="f1575324-1ceb-4946-b4cf-227f99c0b679"
>
<Expression>aSection</Expression>
</Case></Cases>
</Function><Function
 Type="Sections.SectionsCol"
 Default=""
 X="510"
 Y="140"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="RelocatedSections"
 Guid="d95b4db7-7716-4b40-8a5d-2045455498dc"
>
<Comment>When the reference location changes (by a certain distance), the sections in the MA need to be recalculated</Comment>
<Parameters>
<Parameter
 Type="BaseTypes.Distance"
 Name="Distance"
 Guid="df02a9b9-bdac-465f-a47f-c5af4e50fbe3"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Value"
 Guid="8c82922c-9f10-4433-adf3-04bd582af2fc"
>
<Expression>MAP Kernel.MA.MA.Sections | Sections.IsAfterDistance(X, Distance)
  USING X IN Sections.MakeRelocatedSection(X, Distance)</Expression>
</Case></Cases>
</Function><Function
 Type="BaseTypes.Distance"
 Default=""
 X="510"
 Y="80"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="SectionStartLocation"
 Guid="ee87661a-2b01-46a0-9be2-7aac8b6724c0"
>
<ReqRef
 Id="8298df3a-f507-437d-a5de-ceceaeedbead"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="be688a17-08c2-45ac-860d-4946c45dceb8"
>
</ReqRef><Comment>Returns the start location of a section of the MA</Comment>
<Parameters>
<Parameter
 Type="Sections.SectionStruct"
 Name="aSection"
 Guid="c3fe6210-d819-4557-a8c0-2de313092a40"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Value"
 Guid="65bba70d-e974-4519-b326-f1d8b12a131e"
>
<Comment>Returns the distance if the section has a time-out</Comment>
<Expression>BaseTypes.LengthToDistance
(
    SUM Kernel.MA.MA.Sections | 
        Before(
            ExpectedFirst=&gt;X,
            ExpectedSecond=&gt;aSection,
            Collection=&gt;Kernel.MA.MA.Sections
        )
    USING X IN X.Length
)</Expression>
</Case></Cases>
</Function><Function
 Type="SectionStruct"
 Default=""
 X="510"
 Y="260"
 Width="100"
 Height="50"
 Name="EFSSection"
 Guid="774f3f46-f022-4b5d-8c16-0b0ad7d57757"
>
<Parameters>
<Parameter
 Type="BaseTypes.Length"
 Name="aLength"
 Guid="2b8aa79c-1573-40fc-a07c-434e421f444a"
>
</Parameter><Parameter
 Type="MATimers.TimeOutStruct"
 Name="aTimer"
 Guid="85d4ecd7-8977-4d06-9da7-34d976bb8e63"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Value"
 Guid="deab5b00-64ca-4eb2-b85f-2a3918adc7f5"
>
<Expression>Sections.SectionStruct{
    Length =&gt; aLength,
    TimeOut =&gt; aTimer
}</Expression>
</Case></Cases>
</Function><Function
 Type="BaseTypes.Distance"
 Default=""
 X="400"
 Y="260"
 Width="100"
 Height="50"
 Name="DistanceToPacketSectionEnd"
 Guid="5e70763a-49cc-4878-ab84-39e4d32c208e"
>
<Parameters>
<Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.LEVEL_1_MOVEMENT_AUTHORITY.Collection1"
 Name="aSections"
 Guid="74c9adf3-7344-4d34-8249-c49b220bd72c"
>
</Parameter><Parameter
 Type="Messages.Q_SCALE"
 Name="aScale"
 Guid="c311eedf-7d54-46b3-a046-f814c940f062"
>
</Parameter><Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.LEVEL_1_MOVEMENT_AUTHORITY.SubStructure1"
 Name="aSection"
 Guid="ba32a7c4-5cd5-46f4-a7ab-506b9ec6a662"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="No sections"
 Guid="f5276ad9-e174-40d7-81a1-e1418b99b448"
>
<PreConditions>
<PreCondition
 Guid="ecd03978-33af-4255-aab3-2f36b6ea47ee"
>FORALL X IN aSections | X != aSection</PreCondition></PreConditions>
<Expression>BaseTypes.Distance.Unknown</Expression>
</Case><Case
 Name="Value"
 Guid="6735c3b6-98fd-498c-a2ba-8cc63c8a86db"
>
<Expression>BaseTypes.LengthToDistance(
  (SUM aSections | Before(
    ExpectedFirst =&gt; X,
    ExpectedSecond =&gt; aSection,
    Collection =&gt; aSections)
   USING X IN MessageTypes.QScaleLength(
    length =&gt; X.L_SECTION,
    scale =&gt; aScale )
  )
  +
  MessageTypes.QScaleLength(
    length =&gt; aSection.L_SECTION,
    scale =&gt; aScale )
)</Expression>
</Case></Cases>
</Function><Function
 Type="BaseTypes.Length"
 Default=""
 X="400"
 Y="320"
 Width="100"
 Height="50"
 Name="TrimmedPacketSection"
 Guid="bde4d327-0908-43d9-91ff-64c543f33d0e"
>
<Parameters>
<Parameter
 Type="BaseTypes.Length"
 Name="aSectionStartLength"
 Guid="37b04814-5257-41ba-9ee6-0a5c270b4c7c"
>
</Parameter><Parameter
 Type="BaseTypes.Length"
 Name="aSectionLength"
 Guid="1ca80251-1a2d-430b-9023-74ff415e29d7"
>
</Parameter><Parameter
 Type="BaseTypes.Distance"
 Name="aDistanceFromRef"
 Guid="1aa1b89a-1d2a-48f9-a7ab-59d904b1ccff"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="First section beyond the ref location"
 Guid="5ef7f9d8-befb-4be5-ace8-6f21674af30e"
>
<PreConditions>
<PreCondition
 Guid="150cdce8-c1a4-4e28-ad61-4d796c33038f"
>aDistanceFromRef &gt; 0.0</PreCondition><PreCondition
 Guid="41253eb6-7f95-4c02-b098-ded5347cd420"
>aSectionStartLength == 0.0</PreCondition></PreConditions>
<Expression>aSectionLength + BaseTypes.DistanceToLength( aDistanceFromRef )</Expression>
</Case><Case
 Name="Section start beyond ref location"
 Guid="b52176fa-75e8-41ae-9b97-b9a8fe2f1381"
>
<PreConditions>
<PreCondition
 Guid="628e0d33-7824-4ac5-b3c4-48f3a81bbe59"
>BaseTypes.LengthToDistance(aSectionStartLength) + aDistanceFromRef &gt; 0.0</PreCondition></PreConditions>
<Expression>aSectionLength</Expression>
</Case><Case
 Name="Section start before ref location"
 Guid="4efe61df-65ad-4f27-8681-c899e722e12b"
>
<Expression>BaseTypes.DistanceToLength(
  BaseTypes.LengthToDistance(aSectionStartLength + aSectionLength) + aDistanceFromRef
)</Expression>
</Case></Cases>
</Function><Function
 Type="BaseTypes.Length"
 Default=""
 X="0"
 Y="0"
 Width="100"
 Height="50"
 Name="EndSectionLengthFromPacket"
 Guid="9c2e3541-53d5-484d-9b82-29a9905a8c26"
>
<Parameters>
<Parameter
 Type="BaseTypes.Length"
 Name="aEndSectionLength"
 Guid="3649824c-2ec0-4b2b-b593-df6c00ad8511"
>
</Parameter><Parameter
 Type="BaseTypes.Distance"
 Name="aDistanceFromRef"
 Guid="a5572508-3ee5-4cd8-bd4f-7678dfd39eb4"
>
</Parameter><Parameter
 Type="BaseTypes.Length"
 Name="aPacketSectionsLength"
 Guid="5abdbb7a-ea65-4cb3-9a1c-c2450ae41c55"
>
</Parameter><Parameter
 Type="BaseTypes.Length"
 Name="aMASectionsLength"
 Guid="136de2f6-ae3a-4518-94f9-a06459eaf3ba"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="End section needs to be trimmed"
 Guid="0771abb2-b906-447e-a2b8-c83a9e709bac"
>
<PreConditions>
<PreCondition
 Guid="d3e0240d-977b-49ef-8a18-298c4624f1be"
>aDistanceFromRef + BaseTypes.LengthToDistance(aPacketSectionsLength) &lt; 0.0</PreCondition></PreConditions>
<Expression>BaseTypes.DistanceToLength(
  BaseTypes.LengthToDistance( aEndSectionLength + aPacketSectionsLength ) + aDistanceFromRef
)</Expression>
</Case><Case
 Name="End section needs to be extended"
 Guid="8a98c427-13f1-41ab-a7e1-7680f4a48088"
>
<PreConditions>
<PreCondition
 Guid="08ab58cd-467c-4e6e-bfa7-f4e98a257632"
>aPacketSectionsLength == 0.0</PreCondition><PreCondition
 Guid="591eaba3-61f6-4aab-bc49-0688164bff9b"
>aDistanceFromRef &gt; BaseTypes.LengthToDistance(aMASectionsLength)</PreCondition></PreConditions>
<Expression>aEndSectionLength + aDistanceFromRef</Expression>
</Case><Case
 Name="Otherwise"
 Guid="cda5fd53-d7d9-4201-be0c-9d01f9d77b42"
>
<Expression>aEndSectionLength</Expression>
</Case></Cases>
</Function></Functions>
<Procedures>
<Procedure
 X="150"
 Y="140"
 Width="100"
 Height="50"
 Name="BuildSections"
 Guid="61564c7a-c255-4f7f-afee-b1727d10c7d3"
>
<Parameters>
<Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.LEVEL_1_MOVEMENT_AUTHORITY.Message"
 Name="Packet"
 Guid="ff5172d9-4248-46ae-8ac3-eb9d2e9476e8"
>
</Parameter><Parameter
 Type="BaseTypes.Distance"
 Name="aDistanceFromRef"
 Guid="3caf5071-f2f9-4a07-9104-52d25de0f99d"
>
</Parameter><Parameter
 Type="BaseTypes.Time"
 Name="SectionStartTimer"
 Guid="7e2afbac-74d8-4b7a-ab08-b9154adbe6d5"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 X="0"
 Y="0"
 Name="Build the sections"
 Guid="d790284d-740c-4d6a-bfce-b1dd425d4389"
>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Name="Build the sections"
 Guid="21f2432e-29a7-4af0-b05d-54181995d2e9"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="236a46ed-b0c9-465c-86d8-e7ec131fc1ab"
>Kernel.MA.MA.Sections &lt;- 
MAP Packet.Sequence1 | (DistanceToPacketSectionEnd(aSections =&gt; Packet.Sequence1, aSection =&gt; section, aScale =&gt; Packet.Q_SCALE) + aDistanceFromRef &gt; 0.0 )
  USING section IN EFSSection(
    aLength =&gt; TrimmedPacketSection(
        aSectionStartLength =&gt; MessageTypes.QScaleLength(
            length =&gt; 
              SUM Packet.Sequence1 | Before(
                ExpectedFirst =&gt; X,
                ExpectedSecond =&gt; section,
                Collection =&gt; Packet.Sequence1 )
              USING X IN X.L_SECTION,
            scale =&gt; Packet.Q_SCALE ),
        aSectionLength =&gt; MessageTypes.QScaleLength( length =&gt; section.L_SECTION, scale =&gt; Packet.Q_SCALE),
        aDistanceFromRef =&gt; aDistanceFromRef ),
    aTimer =&gt; CreateSectionTimer(
        ERTMSSection =&gt; section,
        SectionStartTimer =&gt; SectionStartTimer,
        Scale =&gt; Packet.Q_SCALE
    )
)</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="150"
 Y="200"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="CutSections"
 Guid="0a4927bf-a427-4379-9250-1f0fbfc7dcb1"
>
<ReqRef
 Id="9c420bdc-a561-406b-a479-9d6cbde196a6"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="e9002275-a0b0-4033-a673-00ab84e51d81"
>
</ReqRef><ReqRef
 Id="bd3f7106-e2c1-465f-be7e-f47543c5f94b"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="3df92029-0f59-4084-80d9-8130c25fb96a"
>
</ReqRef><Comment>Merges the end section with the list of the other sections and removes the end section. Then the information beyond the location provided as parameter is removed. Used when the MA has to be &quot;cut&quot;.</Comment>
<Parameters>
<Parameter
 Type="BaseTypes.Distance"
 Name="aLocation"
 Guid="a7ec0330-6af2-49f4-bfed-ed0c514bfbbc"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Remove sections after infill location"
 Guid="4429c072-6f72-4d1d-887d-5af30552b900"
>
<Comment>The sections after the infill location are removed (will be replaced by the information from the infill MA).</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Remove sections after infill location"
 Guid="c6fa7ae4-6313-4793-9c4f-af7d118498a4"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="49f9d3f5-f1b1-4fee-978d-f4804215903f"
>Kernel.MA.MA.Sections &lt;- MAP Kernel.MA.MA.Sections USING X IN Sections.ConsiderSectionForInfill ( aSection =&gt; X, InfillDistance =&gt; aLocation )</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="40"
 Y="140"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="ExtendSections"
 Guid="29055212-109d-4980-9bb9-baf42f12e148"
>
<ReqRef
 Id="4b2c7641-4724-45e9-ac46-acb185e386b0"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="84cd2f51-3416-4f6e-9ff1-37130af463d1"
>
</ReqRef><Comment>Adds a MA section from the received movement authority to MA.Sections.</Comment>
<Parameters>
<Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.LEVEL_1_MOVEMENT_AUTHORITY.SubStructure1"
 Name="aSection"
 Guid="36246957-5ff9-4d24-b41b-7e1cdcca5e0c"
>
</Parameter><Parameter
 Type="Messages.Q_SCALE"
 Name="Scale"
 Guid="d9585381-876e-43a5-83aa-7091db273836"
>
</Parameter><Parameter
 Type="BaseTypes.Time"
 Name="SectionStartTimer"
 Guid="38e11100-e282-4d18-b010-621073c43a6a"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Add new section"
 Guid="ec3aa99d-2f55-4432-8995-772a4330e915"
>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Add new section"
 Guid="6d83e799-2e61-46a1-a8d2-2c9bf71c213c"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="ce0beff9-e9af-4007-a828-33f30bece57b"
>INSERT
  Sections.CreateEFSSection
  (
    ERTMSSection =&gt; aSection,
    Scale =&gt; Scale,
    SectionStartTimer =&gt; SectionStartTimer
   )
IN
  Kernel.MA.MA.Sections</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="40"
 Y="200"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="UpdateSectionsForInfill"
 Guid="25c8f1ca-83e1-4f0d-a2db-7fff0e0f0bb3"
>
<ReqRef
 Id="9c420bdc-a561-406b-a479-9d6cbde196a6"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="7644767a-490e-426e-ac8a-c902d9572d14"
>
</ReqRef><ReqRef
 Id="d9235eb8-4b37-4376-98fc-a488932db020"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="ce66dd99-871f-4658-938e-e02a64d3c4b9"
>
</ReqRef><ReqRef
 Id="aab59034-edf0-405a-be36-77d7bb4b775a"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="f73af415-0314-4a46-8ef8-0d11bfd214ed"
>
</ReqRef><ReqRef
 Id="bd3f7106-e2c1-465f-be7e-f47543c5f94b"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="4c1f06a2-de73-4dd2-83ae-8f00affe359e"
>
</ReqRef><Comment>This function updates the MA&apos;s sections when an infill MA is received. The following steps are executed:
 - The end section of the previous MA is inserted to the list of the sections;
 - All sections situated after the infill locations are removed (if the infill location is situated in the middle of one of sections, the section is cut at that point);
 - The sections of the infill MA are insterted after the sections of the previous MA.</Comment>
<Parameters>
<Parameter
 Type="BaseTypes.Distance"
 Name="InfillDistance"
 Guid="ecde444b-9c8f-441f-b151-190bf4fc52c5"
>
</Parameter><Parameter
 Type="Messages.PACKET.TRACK_TO_TRAIN.LEVEL_1_MOVEMENT_AUTHORITY.Message"
 Name="Packet"
 Guid="eb63bd74-8ab7-4816-a6c2-7f9d9679f8fd"
>
</Parameter><Parameter
 Type="BaseTypes.Time"
 Name="SectionStartTimer"
 Guid="de8e380d-d4cf-4e28-b3f5-b58648426ca6"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 Name="Remove information beyond the infill location"
 Guid="01a20fc7-41d9-4841-b6ab-a349a1d6e470"
>
<Comment>Merges the end section to the list of the sections and removes the information beyond the infill location.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Remove information beyond the infill location"
 Guid="3e9280b5-b803-49f0-8c49-f9ef0cd56c1f"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="74a98c79-486c-4f1d-91bc-bcb8e1c6a53e"
>Sections.CutSections( aLocation =&gt; InfillDistance )</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Insert new sections"
 Guid="cc275007-a24c-4052-b8a4-9889e1de0b08"
>
<Comment>Adds the infill sections to the list of sections.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Insert new sections"
 Guid="ea3fb038-4a0b-46a0-932d-633093c19c71"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="1b412fd4-760c-48a0-b2de-253d03b01b87"
>APPLY Sections.ExtendSections
(
    aSection =&gt; X,
    Scale =&gt; Packet.Q_SCALE,
    SectionStartTimer =&gt; SectionStartTimer
)
  ON
Packet.Sequence1</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure></Procedures>
</NameSpace>
