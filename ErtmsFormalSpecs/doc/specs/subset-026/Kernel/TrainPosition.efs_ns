<NameSpace
 X="560"
 Y="130"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Name="TrainPosition"
 Guid="9768eb28-0355-4891-b84a-b57bb9df171e"
>
<NameSpaces>
<NameSpaceRef
 Name="ConfidenceInterval"
 Guid="03bf3bcd-53a3-4113-99e7-ace3214c50bd"
>
</NameSpaceRef><NameSpaceRef
 Name="Orientation"
 Guid="b49583a4-2a83-4f4e-8c95-23cf937c4f37"
>
</NameSpaceRef></NameSpaces>
<Structures>
<Structure
 Default=""
 X="560"
 Y="10"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="TrainPositionStruct"
 Guid="607a75d0-3d30-4e13-9431-91746926f303"
>
<ReqRef
 Id="3dbd1b48-23b6-40f9-a38e-77df9cc1ed68"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="bbad44e6-cae5-486c-93ee-01107b2048f6"
>
</ReqRef><ReqRef
 Id="4147b6c6-84d8-452d-b38e-8479cb6dc795"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="985ce938-6835-4de1-b8e0-66e0560eecc6"
>
<Comment>Even if the requirement is related to the train position, it seems more consistent to place the previous LRBGs in the BTM namespace</Comment>
</ReqRef><Comment>Represents the current position of the train, as described in 3.6.1.3.
The estimated train front end can be computed using Kernel.FrontEndPosition function.
The confidence interval can be computed using Kernel.ConfidenceInterval.ConfidenceInterval function.</Comment>
<StructureElement
 TypeName="DirectionalTrainPositionInformationStruct"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="DirectionalPositionInformation"
 Guid="b9058b7a-0709-4d30-876a-5380b1a0522b"
>
<ReqRef
 Id="4f6dd5a0-a24c-40f0-8757-8c0c86cc2c43"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="1a655beb-2656-49bd-aadc-d95e8780d4ef"
>
</ReqRef><Comment>The directional position information of the train (the train front end position, the train orientation and the train running direction).</Comment>
</StructureElement><StructureElement
 TypeName="DataStateEnum"
 Default="DataStateEnum.Unknown"
 Mode="Internal"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="DataState"
 Guid="409e308a-f2cb-4c85-a883-c9664e17b68c"
>
<ReqRef
 Id="8f27e8d5-aaaf-4ec3-986d-36345986e5f2"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="7395a9af-76df-4d75-8516-d88ec7c2f838"
>
</ReqRef><Comment>The data state of the train position.</Comment>
</StructureElement><Interfaces>
<StructureRef
 Name="DataStateInterface"
 Guid="ab10bcce-e0d4-4a01-b4e0-b40a858b28d0"
>
</StructureRef></Interfaces>
</Structure><Structure
 Default=""
 X="560"
 Y="100"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="DirectionalTrainPositionInformationStruct"
 Guid="ed65a176-3ac0-42bf-94aa-77bfa166d800"
>
<ReqRef
 Id="4f6dd5a0-a24c-40f0-8757-8c0c86cc2c43"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="72a61b32-dcc3-456c-8c9c-1a0042c662b3"
>
</ReqRef><Comment>This structure represents the directional train position information, in reference to the balise group orientation.</Comment>
<StructureElement
 TypeName="OrientationEnum"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Name="TrainFrontEndPosition"
 Guid="84a2ded8-23f3-4c41-86b3-a2326f96da1f"
>
<ReqRef
 Id="18585bb5-dc2f-4e24-bb2e-10c77305d565"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="afb9f1b8-fbbb-413c-a1c4-d28befe4b689"
>
</ReqRef><Comment>Position of the train front end, corresponds to Q_DLRBG.</Comment>
</StructureElement><StructureElement
 TypeName="OrientationEnum"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Name="TrainOrientation"
 Guid="e61fa84b-7a43-4a6e-acb7-b9406467ce85"
>
<ReqRef
 Id="2a8febe6-f85b-423c-bc63-60828f11aa62"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="c2419d9e-4efc-4691-99d9-f26fd9ea716c"
>
</ReqRef><Comment>Train orientation, corresponds to Q_DIRLRBG.</Comment>
</StructureElement><StructureElement
 TypeName="OrientationEnum"
 Default=""
 Mode="Internal"
 Implemented="TRUE"
 Name="TrainRunningDirection"
 Guid="933b46d3-8929-4b43-b211-bfef5b571fee"
>
<ReqRef
 Id="1ca933ce-9114-4bbd-b4fa-25bea496671c"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="2a8e6e96-d30b-44fc-8745-59fa0d6b3760"
>
</ReqRef><Comment>Train running direction, corresponds to Q_DIRTRAIN.</Comment>
</StructureElement></Structure></Structures>
<Functions>
<Function
 Type="BaseTypes.Distance"
 Default=""
 X="160"
 Y="10"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="FrontEndPosition"
 Guid="0398d7f6-6b64-407d-9e5b-dca2fbc88cd4"
>
<ReqRef
 Id="6e85df81-278a-4eb5-8ce0-b773e472f711"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="d7c69c5b-a4f9-4000-b1b0-28275b647a06"
>
</ReqRef><ReqRef
 Id="dfd8a050-ad00-42a4-969a-1da448625473"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="6297e289-f36a-4369-9672-21ddb7fba4ff"
>
</ReqRef><ReqRef
 Id="137a2d02-81cd-4bb2-a7fa-6fcf738cf589"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="658e5d6f-cd8d-495b-be31-57e0f14e7371"
>
</ReqRef><ReqRef
 Id="71325bb5-51a0-4724-bf1c-658efb3ce4dc"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="f3cefead-eb9d-45d9-b4ef-a11b02621893"
>
</ReqRef><ReqRef
 Id="78901f0f-a70f-415d-8d57-e5156f7206d0"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="0dcfb5ee-3ced-45d5-8050-314193f3213d"
>
</ReqRef><ReqRef
 Id="bcb653a9-abe2-44a8-ac09-0df33ec9af30"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="098582e9-4e11-4dd5-9d60-575eca8304ed"
>
</ReqRef><ReqRef
 Id="2ecb1ec4-fc6b-4879-a45a-e1b1c55b41fe"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="cf338170-db35-4cf3-abd3-d22b1fccf5a5"
>
</ReqRef><ReqRef
 Id="4a9c97b2-dfca-4175-b297-9da9fc3d16fc"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="9f8e3ae9-fcd9-4f40-a602-83542577093c"
>
</ReqRef><Comment>This function is used to compute the estimated front end position, the max and min safe front end position of the train. The parameter specifies which of the values must be returned.</Comment>
<Parameters>
<Parameter
 Type="DistanceIntervalEnum"
 Name="PointOfInterest"
 Guid="7af4ee52-9fbb-44c4-9f46-527d61a913b0"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Position not determined"
 Guid="5d7f2191-a648-4b75-9c90-464357706664"
>
<PreConditions>
<PreCondition
 Guid="7ac6b80c-17dc-4f43-8b49-b875002e5f28"
>NOT Kernel.ActiveFunctions.DeterminePositionFromLRBG()</PreCondition></PreConditions>
<Expression>BaseTypes.Distance.Unknown</Expression>
</Case><Case
 Name="Train position unknown"
 Guid="fdff3051-a684-4dbb-be2b-50187f6898e8"
>
<PreConditions>
<PreCondition
 Guid="cf061e0e-d4c3-4801-88b0-96d5c524d68f"
>TrainPosition.Position.DataState != DataStateEnum.Valid</PreCondition><PreCondition
 Guid="0ca7d233-bdf6-43af-a526-44ca5aca513a"
>NOT Available( BTM.LRBG.UnlinkedBGPosition )</PreCondition></PreConditions>
<Expression>BaseTypes.Distance.Unknown</Expression>
</Case><Case
 Name="Nominal"
 Guid="0a17f132-8e7f-4b1c-9e04-e43432c59031"
>
<PreConditions>
<PreCondition
 Guid="c61aea8d-3319-4f16-b8a6-d87e9c290890"
>PointOfInterest == DistanceIntervalEnum.Nom</PreCondition></PreConditions>
<Expression>NominalDistanceFromReference( aReference =&gt; ReferenceLocation() )</Expression>
</Case><Case
 Name="Maximum"
 Guid="812d52ca-441b-4da6-a0d8-ce13ec19f117"
>
<PreConditions>
<PreCondition
 Guid="470ac07d-62b5-42c4-a517-866a90c3bfee"
>PointOfInterest == DistanceIntervalEnum.Max</PreCondition></PreConditions>
<Expression>NominalDistanceFromReference( aReference =&gt; ReferenceLocation() ) + BaseTypes.LengthToDistance(TrainPosition.ConfidenceInterval.ConfidenceInterval(ConfidenceIntervalEnum.L_DOUBTUNDER))</Expression>
</Case><Case
 Name="Minimum"
 Guid="33a2da89-eff5-4355-8fa9-2974bb4f2c14"
>
<PreConditions>
<PreCondition
 Guid="acddaf27-c5fb-493f-8b2c-ebdc1bb73993"
>PointOfInterest == DistanceIntervalEnum.Min</PreCondition></PreConditions>
<Expression>NominalDistanceFromReference( aReference =&gt; ReferenceLocation() ) - BaseTypes.LengthToDistance(TrainPosition.ConfidenceInterval.ConfidenceInterval(ConfidenceIntervalEnum.L_DOUBTOVER))</Expression>
</Case></Cases>
</Function><Function
 Type="BaseTypes.Distance"
 Default=""
 X="270"
 Y="10"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="RearEndPosition"
 Guid="4a6bae4e-f993-4dba-a059-0760076ece8a"
>
<ReqRef
 Id="d61ea269-686c-486d-9852-1fd7e6f88c24"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="d39884e0-a5bb-433b-80fa-0ed1ed02c038"
>
</ReqRef><ReqRef
 Id="137a2d02-81cd-4bb2-a7fa-6fcf738cf589"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="89d635a3-80b1-4b4b-a8a5-628b159b8faa"
>
</ReqRef><ReqRef
 Id="71325bb5-51a0-4724-bf1c-658efb3ce4dc"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="1d0f9c48-fe3e-4539-8e7f-bc4e71e678c5"
>
</ReqRef><ReqRef
 Id="78901f0f-a70f-415d-8d57-e5156f7206d0"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="3ced0f59-85f9-4825-97a0-e6fc8a8f613c"
>
</ReqRef><Comment>This function is used to compute the estimated rear end position, the max and min safe rear end position of the train. The parameter specifies which of the values must be returned. These values are computed iff the train integrity status is valid (confirmed by driver or by integrity monitoring device).</Comment>
<Parameters>
<Parameter
 Type="DistanceIntervalEnum"
 Name="PointOfInterest"
 Guid="649fb3a6-63d6-4a5e-94a2-a5430c53f384"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Position not determined"
 Guid="432cfe00-3605-43a1-8d81-cd7440cb03d2"
>
<PreConditions>
<PreCondition
 Guid="c2ce85a0-7d1d-4d2b-b123-8da80708e062"
>NOT Kernel.ActiveFunctions.DeterminePositionFromLRBG()</PreCondition></PreConditions>
<Expression>BaseTypes.Distance.Unknown</Expression>
</Case><Case
 Name="No valid position on-board"
 Guid="c23e833e-473b-4784-a10a-806485ebdfe1"
>
<PreConditions>
<PreCondition
 Guid="9b31b852-4b9f-4141-956b-1cad986e9b1b"
>TrainPosition.Position.DataState != DataStateEnum.Valid</PreCondition></PreConditions>
<Expression>BaseTypes.Distance.Unknown</Expression>
</Case><Case
 Name="Nominal"
 Guid="12d68e3e-9a7b-433c-85bb-e8d2bf2e40cc"
>
<PreConditions>
<PreCondition
 Guid="af6354bc-53f0-4317-a7c6-bd6f449d83af"
>PointOfInterest == DistanceIntervalEnum.Nom</PreCondition></PreConditions>
<Expression>NominalDistanceFromReference( aReference =&gt; ReferenceLocation() ) - BaseTypes.LengthToDistance(TrainPosition.TrainLength())</Expression>
</Case><Case
 Name="Maximum"
 Guid="b426890d-eef3-43d5-a1b8-fa3270e36c15"
>
<PreConditions>
<PreCondition
 Guid="39cfca21-49df-4f1e-8025-c2388dba9c80"
>PointOfInterest == DistanceIntervalEnum.Max</PreCondition></PreConditions>
<Expression>NominalDistanceFromReference( aReference =&gt; ReferenceLocation() ) - BaseTypes.LengthToDistance(TrainPosition.TrainLength()) + BaseTypes.LengthToDistance(TrainPosition.ConfidenceInterval.ConfidenceInterval(ConfidenceIntervalEnum.L_DOUBTUNDER))</Expression>
</Case><Case
 Name="Minimum"
 Guid="9c92d5c6-f86d-4cb4-b67d-50e0b531635d"
>
<PreConditions>
<PreCondition
 Guid="add9c23c-ed04-4a06-be98-4afc341bfbd8"
>PointOfInterest == DistanceIntervalEnum.Min</PreCondition></PreConditions>
<Expression>NominalDistanceFromReference( aReference =&gt; ReferenceLocation() ) - BaseTypes.LengthToDistance(TrainPosition.TrainLength()) - BaseTypes.LengthToDistance(TrainPosition.ConfidenceInterval.ConfidenceInterval(ConfidenceIntervalEnum.L_DOUBTOVER))</Expression>
</Case></Cases>
</Function><Function
 Type="BaseTypes.Distance"
 Cacheable="TRUE"
 Default=""
 X="160"
 Y="150"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="DistanceRunInSR"
 Guid="773d6d2d-8050-4fef-92e6-539ea0b9728d"
>
<ReqRef
 Id="80c7f3b7-09d1-4a40-ab28-0aafd6ac3530"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="c04e98fc-fc2c-4a33-b9c9-69a2cf7ed5f5"
>
</ReqRef><ReqRef
 Id="03cde0ce-fb7a-4c71-83d9-e32bb757174f"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="ceaf5691-5da1-4b54-91a1-b7091c3376ce"
>
</ReqRef><ReqRef
 Id="d1fd4df1-3d3f-4520-b838-9000fd3ebb82"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="700ef92b-c288-4dfc-b9e7-9cda5499b177"
>
</ReqRef><Comment>Provides the distance the train has run in SR mode, for comparison wit hthe maxmum distance allowed to run in SR.</Comment>
<Parameters>
<Parameter
 Type="DistanceIntervalEnum"
 Name="PointOfInterest"
 Guid="9039d245-ee58-4fd1-845e-23a0e2693a98"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Nominal"
 Guid="2cd35a10-37d1-401f-b71c-605833fe0011"
>
<PreConditions>
<PreCondition
 Guid="a04a9fe3-ccfe-41e7-9db0-4e4c173b87c7"
>PointOfInterest == DistanceIntervalEnum.Nom</PreCondition></PreConditions>
<Expression>Odometry.NominalDistance - TrainPosition.SRStartDistance</Expression>
</Case><Case
 Name="Maximum"
 Guid="eea4e50b-8a7e-4d8d-9385-5e5c8f746d64"
>
<PreConditions>
<PreCondition
 Guid="e791ab41-f4e1-47ec-9211-23e80d1283e7"
>PointOfInterest == DistanceIntervalEnum.Max</PreCondition></PreConditions>
<Expression>Odometry.NominalDistance + BaseTypes.LengthToDistance(TrainPosition.ConfidenceInterval.ConfidenceInterval(ConfidenceIntervalEnum.L_DOUBTUNDER)) - TrainPosition.SRStartDistance</Expression>
</Case><Case
 Name="Minimum"
 Guid="8daa68a5-19d7-4426-9706-3dcec08d2d2b"
>
<PreConditions>
<PreCondition
 Guid="4d659489-1337-46f0-b444-4c9721144492"
>PointOfInterest == DistanceIntervalEnum.Min</PreCondition></PreConditions>
<Expression>Odometry.NominalDistance - BaseTypes.LengthToDistance(TrainPosition.ConfidenceInterval.ConfidenceInterval(ConfidenceIntervalEnum.L_DOUBTOVER)) - TrainPosition.SRStartDistance</Expression>
</Case></Cases>
</Function><Function
 Type="BaseTypes.Length"
 Default=""
 X="160"
 Y="80"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="TrainLength"
 Guid="f2c6361e-b0a6-4453-8039-fae14928bd1d"
>
<ReqRef
 Id="a3be6193-1d98-4009-8e1d-df9cd86ee857"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="e59a1220-f70f-4356-a0ec-cf032e1b595c"
>
</ReqRef><ReqRef
 Id="e1d78a17-1bcd-4870-a539-278a995cac92"
 SpecId="c238ead1-8ba7-4613-ae49-4288833ea80d"
 Guid="6494a7a5-38f9-45d5-9701-29b57a14420a"
>
</ReqRef><ReqRef
 Id="71325bb5-51a0-4724-bf1c-658efb3ce4dc"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="ddb27ed5-b86c-40a0-86d4-69e228b5dca8"
>
</ReqRef><ReqRef
 Id="99b2ce8e-827d-48c7-89b4-3d1b09021dd1"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="a91834c4-4e9a-433c-b545-3e650524cf59"
>
</ReqRef><Comment>Provides the train length for the train position supervision.
In SL mode, the front and rear ends of the train are considered to be the front and rear of the engine.</Comment>
<Cases>
<Case
 Name="SL/NL Mode"
 Guid="9b767de0-3468-4f36-af82-70cfb7eb5281"
>
<PreConditions>
<PreCondition
 Guid="7f5f21f8-4aef-4736-b345-d96f9e3f3499"
>Kernel.Mode in [ModeEnum.SL, ModeEnum.NL, ModeEnum.PS]</PreCondition></PreConditions>
<Expression>TrainData.TrainData.Value.EngineLength</Expression>
</Case><Case
 Name="Otherwise"
 Guid="978c2759-2734-4aea-b702-6440e1f67f06"
>
<Expression>TrainData.TrainData.Value.TrainLength</Expression>
</Case></Cases>
</Function><Function
 Type="BaseTypes.Distance"
 Default=""
 X="270"
 Y="150"
 Width="100"
 Height="50"
 Name="DistanceReversed"
 Guid="8bb6bfb4-a95e-4f50-96d2-d416f2ece38a"
>
<ReqRef
 Id="72e8fefb-6f1b-4b89-973e-be9bf554e996"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="20d900e5-bfc4-47bf-aa39-9a04d533249d"
>
</ReqRef><ReqRef
 Id="8532ef0e-00e7-4d13-832b-f44401f8d74a"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="fd81e40d-0d9f-4dc6-b9a3-712a6e767657"
>
</ReqRef><ReqRef
 Id="c37afeb1-2b13-4b84-9827-12fd7e37b1aa"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="8af41e16-820d-44a4-952d-dcb7d5823768"
>
</ReqRef><Comment>Provides the distance the train has reversed from the reversing start.</Comment>
<Cases>
<Case
 Name="Value"
 Guid="81c909a2-6d9e-4d66-8979-5948f199c884"
>
<Expression>TrainPosition.ReversingStartDistance - Odometry.NominalDistance</Expression>
</Case></Cases>
</Function><Function
 Type="BaseTypes.Distance"
 Default=""
 X="270"
 Y="80"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="NominalDistanceFromReference"
 Guid="0145f195-80a7-4f3e-8b05-cee53d357c70"
>
<ReqRef
 Id="7498df92-a3c7-4b25-922e-9add31ac8f26"
 SpecId="c238ead1-8ba7-4613-ae49-4288833ea80d"
 Guid="b7d004ec-30a4-4bdf-8cbf-91e85acd7e81"
>
</ReqRef><ReqRef
 Id="fd2b65f4-fdab-4cbe-8299-77e2f93055e0"
 SpecId="c238ead1-8ba7-4613-ae49-4288833ea80d"
 Guid="f5d680ed-dd7f-441f-bfbe-c08f2473bddf"
>
</ReqRef><ReqRef
 Id="e4ba9e39-0596-45cb-a3b4-e7e37c3b50b2"
 SpecId="c238ead1-8ba7-4613-ae49-4288833ea80d"
 Guid="42ed6723-a6e7-49eb-872c-1a95a9450d67"
>
</ReqRef><ReqRef
 Id="df7b5f6a-299e-410d-ac09-c0baf1903753"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="aa132512-c48a-4994-bbd5-8bdbd791cc5c"
>
</ReqRef><ReqRef
 Id="2e3eda46-b060-4164-9dc4-05e853b23a11"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="9e864a55-f6a3-4724-b48b-4c9795adbbd4"
>
</ReqRef><ReqRef
 Id="2716843f-aeab-4fa3-8b17-006bff38ba9a"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="a17de72f-f33e-4b26-8e32-8813c28a9615"
>
</ReqRef><Parameters>
<Parameter
 Type="BaseTypes.Distance"
 Name="aReference"
 Guid="baeb1c39-95f8-4610-b96f-f183655cff6d"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Nominal orientation"
 Guid="ea70a003-e3e8-4840-82e4-abb88a84b9a9"
>
<PreConditions>
<PreCondition
 Guid="9a58e213-d807-4005-bf73-28b225ecfb88"
>Orientation.TrainOrientation() == OrientationEnum.Nominal</PreCondition></PreConditions>
<Expression>Odometry.NominalDistance - aReference</Expression>
</Case><Case
 Name="Reverse orientation"
 Guid="9571f433-c23d-403d-b8b0-c45b06c0c36e"
>
<PreConditions>
<PreCondition
 Guid="2bf9e30f-8168-463c-8c85-3fd0357488d7"
>Orientation.TrainOrientation() == OrientationEnum.Reverse</PreCondition></PreConditions>
<Expression>aReference - (Odometry.NominalDistance - TrainLength())</Expression>
</Case><Case
 Name="Unknown orientation"
 Guid="5e4dfdbb-c82a-48b2-a332-58bfb6c6337b"
>
<Expression>BaseTypes.Distance.Unknown</Expression>
</Case></Cases>
</Function></Functions>
<Procedures>
<Procedure
 X="10"
 Y="240"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="RelocateTracksideInformation"
 Guid="aa5dfd10-c287-4cfb-a43b-008184e216c1"
>
<ReqRef
 Id="afb44275-4d8c-4d1d-9caf-212e30e4ec9b"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="7ebc46be-6ccf-4705-aa6d-ff0cca052cc5"
>
</ReqRef><ReqRef
 Id="ee60d01b-a74d-40b9-88b2-c24f3198e572"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="36c75e3c-9d29-4ed8-b3ba-83110a388c53"
>
</ReqRef><ReqRef
 Id="762a9a50-d079-460f-80fd-c72d91c43331"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="ace5c934-b78d-44fb-b673-a670084f4aeb"
>
</ReqRef><ReqRef
 Id="d68a643a-2faa-429a-a1d6-2724d7c3ccbc"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="3543a5d3-936c-438b-866e-8ae1809fbeab"
>
</ReqRef><Comment>Displaces all stored trackside-related information by the distance provided.</Comment>
<Parameters>
<Parameter
 Type="BaseTypes.Distance"
 Name="aDistance"
 Guid="81aaa148-1460-4b03-ad8f-14ce0f7bca9a"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 Name="Update Emergency Stops"
 Guid="90e8fa4c-3bf9-4d41-8f3c-49a12c49c220"
>
<Comment>Change the distances in the stored Emergency Stops to be measured from the new LRBG</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Update Emergency Stops"
 Guid="af10bbbb-d841-4245-a21b-fc3250b3e532"
>
<PreConditions>
<PreCondition
 Guid="2d7660db-7e10-4467-b71a-c7944f926f7b"
>Kernel.BrakeCommands.EmergencyStops != []</PreCondition></PreConditions>
<Actions>
<Action
 Guid="64a5b203-43ab-41ec-b698-757a66aa1143"
>Kernel.BrakeCommands.EmergencyStops &lt;- MAP Kernel.BrakeCommands.EmergencyStops USING X IN Kernel.BrakeCommands.EmergencyStopStruct
{
    IsConditional =&gt; X.IsConditional,
    Id =&gt; X.Id,
    StopLocation =&gt; BaseTypes.OffsetDistance
    (
        aDistance =&gt; X.StopLocation
        aOffset =&gt; aDistance
    ),
    Reason =&gt; X.Reason,
    StartTime =&gt; X.StartTime
}</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 Name="Update Level Transition Order"
 Guid="2d7003a0-cb6f-468e-a417-912506442457"
>
<Comment>Change the distances in the stored Level Transition Order to be measured from the new LRBG</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Update Level Transition Order"
 Guid="ebcb0b12-130b-4dee-87c0-ada7622ac891"
>
<PreConditions>
<PreCondition
 Guid="4c9c049a-53ca-42d0-a56d-1436780c837b"
>Available (Kernel.LevelTransition.LevelTransitionOrder)</PreCondition></PreConditions>
<Actions>
<Action
 Guid="2d236efe-6978-4ec0-880b-fa0d4befa336"
>Kernel.LevelTransition.LevelTransitionOrder.Location &lt;- BaseTypes.OffsetDistance(
    aDistance =&gt; Kernel.LevelTransition.LevelTransitionOrder.Location,
    aOffset =&gt; aDistance
)</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 Name="Update Supervised Level Crossings"
 Guid="289a329e-dd2d-494d-9874-0a0f6afd15a5"
>
<Comment>Change the distances in the supervised Level Crossings to be measured from the new LRBG.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Update Level Crossings"
 Guid="09d19112-dc11-4041-a25f-96533bf073a9"
>
<PreConditions>
<PreCondition
 Guid="45bd8711-149c-4bbd-a43b-1659bf13a9d7"
>Kernel.LX.SupervisedLevelCrossings != []</PreCondition></PreConditions>
<Actions>
<Action
 Guid="50ba0696-fc68-4e62-bbec-364e5d782455"
>Kernel.LX.SupervisedLevelCrossings &lt;- MAP Kernel.LX.SupervisedLevelCrossings USING X IN Kernel.LX.LevelCrossingStruct
{
    Id =&gt; X.Id,
    Location =&gt; BaseTypes.OffsetDistance(
        aDistance =&gt; X.Location,
        aOffset =&gt; aDistance
    ),
    Length =&gt; X.Length,
    IsProtected =&gt; X.IsProtected,
    Speed =&gt; X.Speed,
    StoppingRequired =&gt; X.StoppingRequired,
    StoppingAreaLength =&gt; X.StoppingAreaLength
}</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 Name="Update Level Crossings for MRSP"
 Guid="c9b63bb1-5136-491f-b4ea-529ef88b2d99"
>
<Comment>Change the distances in the Level Crossings for MRSP to be measured from the new LRBG.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Update Level Crossings"
 Guid="5f75d9ad-9162-42ca-83f6-73b4c6935fb1"
>
<PreConditions>
<PreCondition
 Guid="e08c006e-0492-46ff-b5ac-2f3f993e12ba"
>Kernel.LX.MRSPLevelCrossings != []</PreCondition></PreConditions>
<Actions>
<Action
 Guid="3edc6100-c7fa-4477-887e-0c92550cda00"
>Kernel.LX.MRSPLevelCrossings &lt;- MAP Kernel.LX.MRSPLevelCrossings USING X IN Kernel.LX.LevelCrossingStruct
{
    Id =&gt; X.Id,
    Location =&gt; BaseTypes.OffsetDistance(
        aDistance =&gt; X.Location,
        aOffset =&gt; aDistance
    ),
    Length =&gt; X.Length,
    IsProtected =&gt; X.IsProtected,
    Speed =&gt; X.Speed,
    StoppingRequired =&gt; X.StoppingRequired,
    StoppingAreaLength =&gt; X.StoppingAreaLength
}</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 Name="Update Mode Profile"
 Guid="ec02eab3-53e2-4ff9-8ae8-0e416e45f9e1"
>
<Comment>Change the distances in the stored Mode Profile to be measured from the new LRBG</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Update Mode Profile"
 Guid="0ce29d2d-f443-4dae-8828-0887df89bbb4"
>
<PreConditions>
<PreCondition
 Guid="a6ff2a03-930f-4f27-bfc8-b2bcac100179"
>Kernel.MA.ModeProfile.Profile != []</PreCondition></PreConditions>
<Actions>
<Action
 Guid="15547961-832e-4dd5-84bb-b39085614a1e"
>Kernel.MA.ModeProfile.Profile &lt;- MAP Kernel.MA.ModeProfile.Profile USING X IN Kernel.MA.ModeProfile.ModeProfileStruct{
    Location =&gt; BaseTypes.OffsetDistance(
        aDistance =&gt; X.Location,
        aOffset =&gt; aDistance
    ),
    Mode =&gt; X.Mode,
    Speed =&gt; X.Speed,
    Length =&gt; X.Length,
    AcknLength =&gt; X.AcknLength,
    SupervisionQualifier =&gt; X.SupervisionQualifier
}</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 Name="Update Adhesion Factors"
 Guid="fe95f853-8149-4972-879a-6b9bd5be4766"
>
<Comment>Change the distances in the stored Adhesion Factors to be measured from the new LRBG</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Update Adhesion Factors"
 Guid="17b32be8-2947-4325-8612-8e2e6ed254c1"
>
<PreConditions>
<PreCondition
 Guid="41425123-2b7a-4a35-955f-bbc92e8e7c77"
>Kernel.TrackDescription.AdhesionFactors.AdhFactors != []</PreCondition></PreConditions>
<Actions>
<Action
 Guid="0db1043e-a8ac-4926-bc7b-8c94101570dc"
>Kernel.TrackDescription.AdhesionFactors.AdhFactors &lt;- MAP Kernel.TrackDescription.AdhesionFactors.AdhFactors USING X IN Kernel.TrackDescription.AdhesionFactors.AdhesionFactorStruct
{
    Location =&gt; BaseTypes.OffsetDistance(
        aDistance =&gt; X.Location,
        aOffset =&gt; aDistance
    ),
    Length =&gt; X.Length,
    Value =&gt; X.Value
}</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 Name="Update Axle Load Profile"
 Guid="f8d308ef-5265-4686-ad4d-5294a4566e3b"
>
<Comment>Change the distances in the stored Axle Load Profile to be measured from the new LRBG</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Update Axle Load Profile"
 Guid="00430644-e90d-4db9-9e01-41fb826fc190"
>
<PreConditions>
<PreCondition
 Guid="2f7fe40b-0801-4095-9dd0-cb0e00b3bdf3"
>Available(Kernel.TrackDescription.AxleLoad.ASP)
  AND  
Kernel.TrackDescription.AxleLoad.ASP.ALs != []</PreCondition></PreConditions>
<Actions>
<Action
 Guid="dbdbc531-b34a-4bb5-a79b-4fa70867c086"
>Kernel.TrackDescription.AxleLoad.ASP.ALs &lt;- MAP Kernel.TrackDescription.AxleLoad.ASP.ALs USING X IN Kernel.TrackDescription.AxleLoad.AxleLoadStruct
{
    Length =&gt; X.Length,
    Location =&gt; BaseTypes.OffsetDistance(
        aDistance =&gt; X.Location,
        aOffset =&gt; aDistance
    ),
    Values =&gt; X.Values
}</Action><Action
 Guid="a4823d58-e3d0-44d3-a8cb-d3da749c766f"
>Kernel.TrackDescription.AxleLoad.ASP.EmptyProfileDistance &lt;- Kernel.TrackDescription.AxleLoad.ASP.EmptyProfileDistance - aDistance</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 Name="Update Gradients"
 Guid="f7f414c2-591e-4528-a588-0cc21c39ead8"
>
<Comment>Change the distances in the stored Gradient Profile to be measured from the new LRBG</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Update Gradients"
 Guid="cbbb196a-7ea3-4458-bc02-f1da27944a69"
>
<PreConditions>
<PreCondition
 Guid="e4097af4-c04d-423c-927c-7319de7a8656"
>Kernel.TrackDescription.Gradient.Gradients != []</PreCondition></PreConditions>
<Actions>
<Action
 Guid="8b54a180-6453-4856-bc6e-1d0e953f63a0"
>Kernel.TrackDescription.Gradient.Gradients &lt;- MAP Kernel.TrackDescription.Gradient.Gradients USING X IN Kernel.TrackDescription.Gradient.GradientStruct
{
    Location =&gt; BaseTypes.OffsetDistance(
        aDistance =&gt; X.Location,
        aOffset =&gt; aDistance
    ),
    Gradient =&gt; X.Gradient
}</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 Name="Update Speed Restrictions related to Permitted Braking Distance"
 Guid="e7c1a09f-a872-4e77-86cd-d2b491bf2de0"
>
<Comment>Change the distances in the stored Permitted Braking Distance Speed Restrictions to be measured from the new LRBG</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Update Speed Restrictions related to Permitted Braking Distance"
 Guid="33c81bf0-8af0-4505-ab27-66a226f39992"
>
<PreConditions>
<PreCondition
 Guid="9a1fd2e9-f993-486b-8b1f-498af59e3337"
>Available(Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile)
  AND  
Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions != []</PreCondition></PreConditions>
<Actions>
<Action
 Guid="c600d873-49dc-44dd-8a1a-0bbd72c7bab8"
>Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.EmptyProfileDistance &lt;- BaseTypes.OffsetDistance(
    aDistance =&gt; Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.EmptyProfileDistance,
    aOffset =&gt; aDistance
)</Action><Action
 Guid="bb71241b-e532-4f32-913e-0e64a7e53c01"
>Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions &lt;- MAP Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile.SpeedRestrictions USING X IN Kernel.TrackDescription.PermittedBrakingDistance.SRPBDStruct{
    Location =&gt; BaseTypes.OffsetDistance(
        aDistance =&gt; X.Location,
        aOffset =&gt; aDistance
    ),
    Length =&gt; X.Length,
    Speed =&gt; X.Speed,
    Gradient =&gt; X.Gradient,
    BrakeType =&gt; X.BrakeType,
    BrakingDistance =&gt; X.BrakingDistance
}</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 Name="Update Reversing Area"
 Guid="40f6dbf9-6100-4db6-beff-bd7529c2fc66"
>
<Comment>Change the distances in the stored Reversing Area to be measured from the new LRBG</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Update Reversing Area"
 Guid="3892aad8-b058-44b5-a0c5-14570e2859ba"
>
<PreConditions>
<PreCondition
 Guid="41c693e8-3a1f-44fe-9e7d-2ba5e5ff9cc7"
>Available(Kernel.TrackDescription.ReversingArea.ReversingAreaProfile)</PreCondition></PreConditions>
<Actions>
<Action
 Guid="a3d612c5-11b4-4469-9b37-1d7eb6af342f"
>Kernel.TrackDescription.ReversingArea.ReversingAreaProfile.Location &lt;- BaseTypes.OffsetDistance(
    aDistance =&gt; Kernel.TrackDescription.ReversingArea.ReversingAreaProfile.Location,
    aOffset =&gt; aDistance
)</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 Name="Update Route Suitability"
 Guid="0b020469-27eb-4625-b877-4adae11f6957"
>
<Comment>Change the distances in the stored Route Suitability Profile to be measured from the new LRBG</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Update Route Suitability"
 Guid="a5be2b3f-1457-427a-90f2-79f2abbabf07"
>
<PreConditions>
<PreCondition
 Guid="813e5a1f-ee48-4adb-b25a-ec57b8ff7b73"
>Available(Kernel.TrackDescription.RouteSuitability.RouteSuitabilityProfile)
  AND  
Kernel.TrackDescription.RouteSuitability.RouteSuitabilityProfile.Items != []</PreCondition></PreConditions>
<Actions>
<Action
 Guid="d6659a82-85cc-4d35-960a-16813e7c869c"
>Kernel.TrackDescription.RouteSuitability.RouteSuitabilityProfile.EmptyProfileDistance &lt;- BaseTypes.OffsetDistance(
    aDistance =&gt; Kernel.TrackDescription.RouteSuitability.RouteSuitabilityProfile.EmptyProfileDistance,
    aOffset =&gt; aDistance
)</Action><Action
 Guid="2c519ddc-d31a-4a25-a641-3e51f3099427"
>Kernel.TrackDescription.RouteSuitability.RouteSuitabilityProfile.Items &lt;- MAP Kernel.TrackDescription.RouteSuitability.RouteSuitabilityProfile.Items USING X IN Kernel.TrackDescription.RouteSuitability.RouteSuitabilityItemStruct
{
    Type =&gt; X.Type,
    Location =&gt; X.Location - aDistance,
    LineGauge =&gt; X.LineGauge,
    MaxAxleLoad =&gt; X.MaxAxleLoad,
    TractionSystem =&gt; X.TractionSystem,
    NidCTraction =&gt; X.NidCTraction
}</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 Name="Update Static Speed Profile"
 Guid="159dcb11-7560-463b-9cb3-5f73613e9ebc"
>
<Comment>Change the distances in the stored Static Speed Profile to be measured from the new LRBG</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Update Static Speed Profile"
 Guid="871d0f9f-7751-4b29-8db5-56a927cf04e3"
>
<PreConditions>
<PreCondition
 Guid="e247a056-3579-487e-b4b1-2b6785beddbe"
>Kernel.TrackDescription.StaticSpeedProfile.SSP != []</PreCondition></PreConditions>
<Actions>
<Action
 Guid="8bb2f7b7-e5ec-4f3b-8166-f68ba0fd7f42"
>Kernel.TrackDescription.StaticSpeedProfile.SSP &lt;- MAP Kernel.TrackDescription.StaticSpeedProfile.SSP USING X IN Kernel.TrackDescription.StaticSpeedProfile.StaticSpeedRestrictionStruct
{
    Location =&gt; BaseTypes.OffsetDistance(
        aDistance =&gt; X.Location,
        aOffset =&gt; aDistance
    ),
    BasicSpeed =&gt; X.BasicSpeed,
    TrainLengthDelay =&gt; X.TrainLengthDelay,
    Categories =&gt; X.Categories
}</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 Name="Update Applicable National Values"
 Guid="2a660229-50de-4b68-92f6-f70369884777"
>
<Comment>Change the distances in the stored Applicable National Values to be measured from the new LRBG</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Update Applicable National Values"
 Guid="27b09058-e67a-4b1e-89ac-253403802463"
>
<PreConditions>
<PreCondition
 Guid="64e59923-1c88-40d5-afc4-e3f85142f563"
>Available(Kernel.NationalValues.ApplicableNationalValues)</PreCondition></PreConditions>
<Actions>
<Action
 Guid="266b0e21-033c-4f94-9e7e-7d0ac5fc523a"
>Kernel.NationalValues.ApplicableNationalValues.ApplicableStartLocation &lt;- 
BaseTypes.MaxDistance(
    X1 =&gt; BaseTypes.OffsetDistance(
    aDistance =&gt; Kernel.NationalValues.ApplicableNationalValues.ApplicableStartLocation,
    aOffset =&gt; aDistance
),
    X2 =&gt; 0.0
)</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 Name="Update Not Applicable National Values"
 Guid="d0df7f00-ee99-4021-aa9c-6bfd54a481fc"
>
<Comment>Change the distances in the stored Not Yet Applicable National Values to be measured from the new LRBG</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Update Not Applicable National Values"
 Guid="955bacb3-d3aa-4c13-a998-48a2fafa9fa1"
>
<PreConditions>
<PreCondition
 Guid="0bf1ef85-b63e-416e-b98c-e4d827fb057f"
>Available(Kernel.NationalValues.NotApplicableNationalValues)</PreCondition></PreConditions>
<Actions>
<Action
 Guid="c7f41cd1-a886-4f3c-989f-baaee038bcae"
>Kernel.NationalValues.NotApplicableNationalValues.ApplicableStartLocation &lt;- Kernel.NationalValues.NotApplicableNationalValues.ApplicableStartLocation - aDistance</Action><Action
 Guid="53460ea3-4ef7-4882-8815-e852edc91722"
>Kernel.NationalValues.NotApplicableNationalValues.ApplicableStopLocation &lt;- Kernel.NationalValues.NotApplicableNationalValues.ApplicableStopLocation - aDistance</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 Name="Update General Track Conditions"
 Guid="74748e63-f2b2-4d43-9d6f-5fdcdf4a5699"
>
<Comment>Change the distances in the stored General Track Conditions to be measured from the new LRBG</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Update General Track Conditions"
 Guid="99412497-4af5-43b3-94cb-113c14171d73"
>
<PreConditions>
<PreCondition
 Guid="14074785-1a5d-418d-9041-9c7593105abe"
>Kernel.TrackDescription.TrackConditions.General.TCProfile != []</PreCondition></PreConditions>
<Actions>
<Action
 Guid="56b280f3-d732-44db-bec8-8860b3143772"
>Kernel.TrackDescription.TrackConditions.General.TCProfile &lt;- MAP Kernel.TrackDescription.TrackConditions.General.TCProfile USING X IN Kernel.TrackDescription.TrackConditions.General.TrackConditionInformationStruct
{
    Location =&gt; BaseTypes.OffsetDistance(
        aDistance =&gt; X.Location,
        aOffset =&gt; aDistance
    ),
    Value =&gt; X.Value
}</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 Name="Update TC Announcements"
 Guid="8061f8db-05a5-46ac-9d17-29343b248247"
>
<Comment>Change the distances in the stored Track Condition Announcements to be measured from the new LRBG</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Update TC Announcements"
 Guid="8bd7601d-8dcf-43b4-96c6-0f0ea98d0ab5"
>
<PreConditions>
<PreCondition
 Guid="ebba61da-3562-456e-88a1-6206c6260185"
>Kernel.TrackDescription.TrackConditions.Display.ActiveConditions != []</PreCondition></PreConditions>
<Actions>
<Action
 Guid="bd58a81a-7bbc-4de8-89de-d6b278982120"
>Kernel.TrackDescription.TrackConditions.Display.ActiveConditions &lt;- MAP Kernel.TrackDescription.TrackConditions.Display.ActiveConditions USING X IN Kernel.TrackDescription.TrackConditions.Display.ActiveConditionStruct{
    Type =&gt; X.Type,
    Location =&gt; BaseTypes.OffsetDistance(
        aDistance =&gt; X.Location,
        aOffset =&gt; aDistance
    ),
    Length =&gt; X.Length,
    Time =&gt; X.Time,
    Automatic =&gt; X.Automatic
}</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 Name="Update Big Metal Masses TC"
 Guid="be414430-2f9e-44b2-b1ce-5826957d25c7"
>
<Comment>Change the distances in the stored Big Metal Masses Track Conditions to be measured from the new LRBG</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Update Big Metal Masses TC"
 Guid="e5fb4843-b5ed-4e32-8761-1dbe159bb14b"
>
<PreConditions>
<PreCondition
 Guid="b9b6a50e-d1e1-4e3a-92b6-08f05ff2a3ea"
>Kernel.TrackDescription.TrackConditions.BigMetalMasses.TCBigMetalMasses != []</PreCondition></PreConditions>
<Actions>
<Action
 Guid="9d9fef57-643a-4b84-b837-ad28e39b6281"
>Kernel.TrackDescription.TrackConditions.BigMetalMasses.TCBigMetalMasses &lt;- MAP Kernel.TrackDescription.TrackConditions.BigMetalMasses.TCBigMetalMasses USING X IN Kernel.TrackDescription.TrackConditions.BigMetalMasses.BigMetalMassesInformationStruct
{
    Location =&gt; BaseTypes.OffsetDistance(
        aDistance =&gt; X.Location,
        aOffset =&gt; aDistance
    ),
    Value =&gt; X.Value
}</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 Name="Update Traction Systems TC"
 Guid="896650ab-4ed1-4aa1-867a-7d82c0e82861"
>
<Comment>Change the distances in the stored Traction Systems Track Conditions to be measured from the new LRBG</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Update Traction Systems TC"
 Guid="56ddb3aa-ed8b-408b-a373-e1b372ebd16f"
>
<PreConditions>
<PreCondition
 Guid="36e03490-2ba0-4871-b56f-189cb6d23be2"
>Kernel.TrackDescription.TrackConditions.TractionSystems.TCTractionSystems != []</PreCondition></PreConditions>
<Actions>
<Action
 Guid="258441de-c699-470f-9917-e55505621d5b"
>Kernel.TrackDescription.TrackConditions.TractionSystems.TCTractionSystems &lt;- MAP Kernel.TrackDescription.TrackConditions.TractionSystems.TCTractionSystems USING X IN Kernel.TrackDescription.TrackConditions.TractionSystems.TractionSystemInformationStruct
{
    Value =&gt; X.Value,
    Location =&gt; BaseTypes.OffsetDistance(
        aDistance =&gt; X.Location,
        aOffset =&gt; aDistance
    )
}</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 Name="Update Current Consumption TC"
 Guid="8606bf00-03d8-496d-85ec-6b5db8da9fb3"
>
<Comment>Change the distances in the stored Current Consumption Track Conditions to be measured from the new LRBG</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Update Current Consumption TC"
 Guid="1758b124-b2d4-42c1-92b8-55048196ca72"
>
<PreConditions>
<PreCondition
 Guid="e83ae76a-58b0-4c70-99e8-4350402eea0b"
>Kernel.TrackDescription.TrackConditions.CurrentConsumption.TCCurrentConsumption != []</PreCondition></PreConditions>
<Actions>
<Action
 Guid="da1176e3-6902-43c5-b859-107b862032f8"
>Kernel.TrackDescription.TrackConditions.CurrentConsumption.TCCurrentConsumption &lt;- MAP  Kernel.TrackDescription.TrackConditions.CurrentConsumption.TCCurrentConsumption USING X IN Kernel.TrackDescription.TrackConditions.CurrentConsumption.CurrentConsumptionInformationStruct
{
    Value =&gt; X.Value,
    Location =&gt; BaseTypes.OffsetDistance(
        aDistance =&gt; X.Location,
        aOffset =&gt; aDistance
    )
}</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 Name="Update Station Platforms TC"
 Guid="8cb19b29-72d4-4ccf-be2c-11912354856f"
>
<Comment>Change the distances in the stored Station Platforms Track Conditions to be measured from the new LRBG</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Update Station Platforms TC"
 Guid="53553fb3-60ad-490b-8652-3647cef4974d"
>
<PreConditions>
<PreCondition
 Guid="206bc261-19cb-42b8-8ad1-7fc5913f2a9b"
>Kernel.TrackDescription.TrackConditions.StationPlatform.TCStationPlatforms != []</PreCondition></PreConditions>
<Actions>
<Action
 Guid="0f8acd4b-a756-4258-8ade-9df77a5f3e38"
>Kernel.TrackDescription.TrackConditions.StationPlatform.TCStationPlatforms &lt;- MAP Kernel.TrackDescription.TrackConditions.StationPlatform.TCStationPlatforms USING X IN Kernel.TrackDescription.TrackConditions.StationPlatform.StationPlatformInformationStruct
{
    Location =&gt; BaseTypes.OffsetDistance(
        aDistance =&gt; X.Location,
        aOffset =&gt; aDistance
    ),
    Value =&gt; X.Value
}</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 Name="Update Temporary Speed Restrictions"
 Guid="e69bd495-d46b-4c68-914b-e787e3a651fe"
>
<Comment>Change the distances in the stored TSRs to be measured from the new LRBG</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Update Temporary Speed Restrictions"
 Guid="e492bde1-52d6-4277-b88d-b606c2d36115"
>
<PreConditions>
<PreCondition
 Guid="4b2a4a49-edfd-4b4b-ae0b-76d6df8079fe"
>Kernel.TSR.TSRs != []</PreCondition></PreConditions>
<Actions>
<Action
 Guid="2f3fc0ef-d564-4b97-b378-0177fc65da81"
>Kernel.TSR.TSRs &lt;- MAP Kernel.TSR.TSRs USING X IN Kernel.TSR.TemporarySpeedRestriction{
    Location =&gt; BaseTypes.OffsetDistance(
        aDistance =&gt; X.Location,
        aOffset =&gt; aDistance
    ),
    Length =&gt; X.Length,
    Speed =&gt; X.Speed,
    Id =&gt; X.Id
}</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 Name="Update SupervisedTargets"
 Guid="61e43490-4472-4e12-83e6-aa18238410bb"
>
<Comment>Update the list of supervised targets calculated at the last cycle.
This variable is used to chaeck if the list of targets has been updated (and therefore if the speed and distance monitoring type and status need to re-evaluated).
The list is updated in case two LRBGs provide the same MRSP, this should count as the list of supervised targets being updated.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Update SupervisedTargets"
 Guid="2e9ad671-d70f-4899-89f1-42f7f9bc6430"
>
<PreConditions>
<PreCondition
 Guid="c84d8a44-5988-4408-b72a-3fa217e5cdbc"
>Kernel.SpeedAndDistanceMonitoring.SupervisedTargets != []</PreCondition></PreConditions>
<Actions>
<Action
 Guid="48f28414-15b8-407c-9ccc-7b7bbb265b2f"
>Kernel.SpeedAndDistanceMonitoring.SupervisedTargets &lt;- MAP Kernel.SpeedAndDistanceMonitoring.SupervisedTargets USING X IN TargetStruct{
    Location =&gt; BaseTypes.OffsetDistance(
        aDistance =&gt; X.Location,
        aOffset =&gt; aDistance
    ),
    Speed =&gt; X.Speed,
    Length =&gt; X.Length,
    Type =&gt; X.Type
}</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 Name="Update MA"
 Guid="a85e6bda-11f6-4977-97e6-70bd3b3538c4"
>
<Comment>Change the lengths in the MA</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Update MA"
 Guid="0aa9b271-0ff4-434d-afd2-abf96c4bdbfb"
>
<PreConditions>
<PreCondition
 Guid="9f7ce8dd-40cf-4439-b67e-a01b25e77e7d"
>Available(Kernel.MA.MA)</PreCondition></PreConditions>
<Actions>
</Actions>
<SubRules>
<Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 Name="Check for sections"
 Guid="9c4103b1-b279-450a-83cb-7c03b9cae1b8"
>
<Comment>Depending on where the train is, with reference to the MA, and on the specific structure of the MA, the relocation must be handled differently</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="No sections in the MA"
 Guid="74808d55-fe3e-49c0-9639-08778e4cff88"
>
<Comment>If there are no sections in the MA, the length of the end section must be reduced</Comment>
<PreConditions>
<PreCondition
 Guid="5657558a-1a05-418b-a764-acf8a7450bcc"
>Kernel.MA.MA.Sections == []</PreCondition></PreConditions>
<Actions>
<Action
 Guid="1a79f6be-8cd7-40c6-9975-e855cdded2c5"
>Kernel.MA.MA.EndSection.Length &lt;- Kernel.MA.MA.EndSection.Length - BaseTypes.DistanceToLength(aDistance)</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 Name="There are sections - train is in the end section"
 Guid="d06b3a80-263d-4bb9-b9c8-543ed912a38d"
>
<Comment>If the train has passed all the sections and is in the end section, the sections must be removed and the length of the end section updated</Comment>
<PreConditions>
<PreCondition
 Guid="d424a96a-5c7d-4c07-b419-e3cf71806b66"
>BTM.BGLocationReference.Position.Position - BTM.LRBG.LRBG().Position.Position &gt;= Kernel.MA.EndSectionStart()</PreCondition></PreConditions>
<Actions>
<Action
 Guid="b9ea2e9d-59d1-4ef8-88df-d51843437f9e"
>Kernel.MA.RelocateMAinEndSection(aDistance)</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 Name="Train is in one of the sections"
 Guid="e5c30d3b-cb6a-41bd-b0ef-98cafdcd885a"
>
<Comment>If the train is in a section that is not the end section, previous sections are removed and the current one is updated</Comment>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="ed0099d6-3ed8-4657-b337-6d58e3914acb"
>Kernel.MA.MA.Sections &lt;- MA.Sections.RelocatedSections(aDistance)</Action></Actions>
</RuleCondition></Conditions>
</Rule></SubRules>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 Name="Update Linking distance"
 Guid="10b8b0b3-3617-4619-8230-72f85d64b33b"
>
<Comment>Reduces the distance to the first linking by the provided amount.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Update Linking distance"
 Guid="c93296cd-e02f-4a0d-bebc-b8c6555e866d"
>
<PreConditions>
<PreCondition
 Guid="a11fd75a-8d3f-4356-8de1-7d9a679c2355"
>BTM.Linking.LinkingApplicable()</PreCondition></PreConditions>
<Actions>
<Action
 Guid="82720ada-f9c7-4f80-b0e4-af09d32c991f"
>BTM.Linking.CurrentLinking().Distance &lt;- BaseTypes.OffsetDistance(
    aDistance =&gt; BTM.Linking.CurrentLinking().Distance,
    aOffset =&gt; aDistance
)</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure></Procedures>
<Variables>
<Variable
 Type="TrainPositionStruct"
 DefaultValue="TrainPosition.TrainPositionStruct{}"
 VariableMode="Internal"
 X="420"
 Y="10"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="Position"
 Guid="ae945ace-8720-498a-a351-dcc74280808f"
>
<ReqRef
 Id="3dbd1b48-23b6-40f9-a38e-77df9cc1ed68"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="2cc1cad1-03f9-4a5b-b27d-425fd83c99fe"
>
</ReqRef><ReqRef
 Id="8f27e8d5-aaaf-4ec3-986d-36345986e5f2"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="bbfa7a99-0ee1-4ecc-859d-b11eb3c977fc"
>
</ReqRef><ReqRef
 Id="1918ec5c-54a5-4240-8cd2-5f860383b37c"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="f2b88ea2-1a89-437f-be7c-2600186bdec6"
>
</ReqRef><ReqRef
 Id="78901f0f-a70f-415d-8d57-e5156f7206d0"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="47e4dbdb-9366-442f-b81f-295dc836c1e7"
>
</ReqRef></Variable><Variable
 Type="BaseTypes.Distance"
 DefaultValue="0.0"
 VariableMode="Internal"
 X="160"
 Y="210"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="SRStartDistance"
 Guid="e7248a60-09d7-4a0a-bf38-7234b34911e1"
>
<ReqRef
 Id="77289e9b-8c64-4406-8d33-fcf9d018e94c"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="3200b6eb-181a-40b6-8541-de165d8a5014"
>
</ReqRef><ReqRef
 Id="80c7f3b7-09d1-4a40-ab28-0aafd6ac3530"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="379e00c5-f7ff-46ba-bf22-1c929bfbdaf8"
>
</ReqRef><ReqRef
 Id="d1fd4df1-3d3f-4520-b838-9000fd3ebb82"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="148c87bb-4d08-4e03-b801-85c2f06273ae"
>
</ReqRef><ReqRef
 Id="03cde0ce-fb7a-4c71-83d9-e32bb757174f"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="2c4b7653-be63-472f-8913-236ef25e975c"
>
</ReqRef><Comment>The odometry distance when SR mode is entered.</Comment>
</Variable><Variable
 Type="Boolean"
 DefaultValue="False"
 VariableMode="Internal"
 X="420"
 Y="210"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="ColdMovementDetected"
 Guid="e23d84c4-f294-4a26-b034-6df33be1cb1c"
>
<ReqRef
 Id="2998ba86-2e9d-4b02-8aa1-8368fcf74a87"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="d66ec9f6-e815-4486-89cd-bfabe017b558"
>
</ReqRef><ReqRef
 Id="96c497d9-1029-481d-9775-eaf075881899"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="de367dbd-8110-4dd5-94a2-d28dc4a4402c"
>
</ReqRef><ReqRef
 Id="fcee3944-2911-422c-babf-349b36eaa478"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="28b9db3f-5130-4c53-9b78-a27a84d72ac0"
>
</ReqRef><Comment>Determines whether the train has been moved while in NP mode.</Comment>
</Variable><Variable
 Type="BaseTypes.Distance"
 VariableMode="Internal"
 X="270"
 Y="210"
 Width="100"
 Height="50"
 Name="ReversingStartDistance"
 Guid="ac6bfd88-e551-4b2b-873a-52c1f6270774"
>
<ReqRef
 Id="72e8fefb-6f1b-4b89-973e-be9bf554e996"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="b36689c9-c387-4bbf-b14a-1341da21e28f"
>
</ReqRef><ReqRef
 Id="8532ef0e-00e7-4d13-832b-f44401f8d74a"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="bfb48850-9ad4-4b38-9345-a79955190b0e"
>
</ReqRef><ReqRef
 Id="c37afeb1-2b13-4b84-9827-12fd7e37b1aa"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="d59c1e3d-064c-4950-bd80-3309133b1492"
>
</ReqRef><Comment>The odometry distance when reversing was initiated.</Comment>
</Variable></Variables>
</NameSpace>
