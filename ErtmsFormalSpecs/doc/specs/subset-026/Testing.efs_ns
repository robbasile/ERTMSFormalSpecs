<NameSpace
 X="230"
 Y="10"
 Width="100"
 Height="50"
 Image="4"
 Name="Testing"
 Guid="8512c7c4-384c-4f40-9183-c048e1549caf"
>
<Comment>This namespace is used to help writing tests for the model</Comment>
<NameSpaces>
<NameSpaceRef
 Name="Display"
 Guid="ca162c39-085e-48b3-bc8d-3cad43f08aa7"
>
</NameSpaceRef></NameSpaces>
<Functions>
<Function
 Type="MessageTypes.Time"
 Default=""
 X="570"
 Y="360"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="T_TRAINFromCurrentTime"
 Guid="6e313f61-b664-4d68-a46c-cb1471e0eda3"
>
<Comment>Used for EURORADIO messages in the testing environment. Allow to use currenttime for the field T_TRAIN.</Comment>
<Parameters>
<Parameter
 Type="BaseTypes.Time"
 Name="aTime"
 Guid="e6f2449f-f2e6-414f-b718-64af39798906"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Value"
 Guid="74ad2d76-4651-46e6-a451-6ab6c34e29bb"
>
<Expression>MessageTypes.Time(aTime * 100.0)</Expression>
</Case></Cases>
</Function></Functions>
<Procedures>
<Procedure
 X="130"
 Y="60"
 Width="100"
 Height="50"
 Pinned="TRUE"
 NeedsRequirement="FALSE"
 Name="InitializeTestEnvironment"
 Guid="7cde642d-80d9-4a06-9f70-c9a305706ab2"
>
<Comment>Sets variables to standard values for testing.</Comment>
<Parameters>
<Parameter
 Type="BaseTypes.Distance"
 Name="aTrainPosition"
 Guid="b894618b-26aa-4a32-847f-200c7b0a7005"
>
</Parameter><Parameter
 Type="ModeEnum"
 Name="aMode"
 Guid="698b7b4f-d838-4027-9165-b71b5c9e7098"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 X="0"
 Y="0"
 NeedsRequirement="FALSE"
 Name="DMI"
 Guid="cbc776e4-b71e-47fd-9dd9-8530d55725a0"
>
<Comment>DMI1 will be the master and will be connected to the first desk of the CabA.
DMI2 will be the slave and will be connected to the first desk of the CabB.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 NeedsRequirement="FALSE"
 Name="DMI"
 Guid="ba51faed-8c84-4ab5-ba53-a295afb44b14"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="4f5f2a6c-b39d-4982-9c51-4a8a10ec4de5"
>InitializeDMICabs(
    aDMIConfiguration =&gt; DMI.DMIConfigurationEnum.TwoCabs,
    aDMI1IsMaster =&gt; True
)</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 NeedsRequirement="FALSE"
 Name="Train position"
 Guid="f56351d1-ad26-469d-a848-02640e64e865"
>
<Comment>Initialization of the LRBG, of the train position, of the train orientation and the odometer accuracy.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 NeedsRequirement="FALSE"
 Name="Train position"
 Guid="c14ed61e-ab9c-400b-83ee-54c852292cc0"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="948430d8-d5d7-4d6e-968a-5c8458525168"
>BTM.LRBG.PreviousBaliseGroups &lt;- [BTM.LRBG.PreviousBaliseGroupStruct{
BaliseGroup =&gt; BTM.LRBG.BaliseGroupStruct{
    Position =&gt; BTM.PositionStruct{
        Position =&gt; 0.0,
        UnderReadingAmountOdo =&gt; 2.0,
        OverReadingAmountOdo =&gt; 1.0
    },
    NID_BG =&gt; 1986,
    Orientation =&gt; OrientationEnum.Nominal,
    Timestamp =&gt; Kernel.DateAndTime.StartDate,
    LocationAccuracy =&gt; 12.0,
    NID_C =&gt; 0
},
IsLRBG =&gt; Boolean.True,
IsSingle =&gt; Boolean.False
}
]</Action><Action
 Guid="278b2665-4f56-474f-a4b7-b6cbc08f01a6"
>Kernel.TrainPosition.Position &lt;- Kernel.TrainPosition.TrainPositionStruct
{
    DirectionalPositionInformation =&gt; Kernel.TrainPosition.DirectionalTrainPositionInformationStruct
    {
        TrainFrontEndPosition =&gt; OrientationEnum.Nominal,
        TrainOrientation =&gt; OrientationEnum.Nominal,
        TrainRunningDirection =&gt; OrientationEnum.Nominal
    },
    DataState =&gt; DataStateEnum.Valid
}</Action><Action
 Guid="b179176e-e37d-4e0e-9d73-12f61aeb9d8c"
>Odometry.NominalDistance &lt;- aTrainPosition</Action><Action
 Guid="98e08c63-83b7-41b2-ab3c-cd186f5db212"
>Odometry.Accuracy &lt;- Odometry.OdometerAccuracyStruct
{
    D_ura =&gt; 0.0,
    D_ora =&gt; 0.0,
    V_ora =&gt; 0.0,
    V_ura =&gt; 0.0
}</Action><Action
 Guid="35f34f07-d5ae-493e-8f02-ef3b67c0d497"
>Kernel.TrainPosition.Position.DirectionalPositionInformation.TrainOrientation &lt;- OrientationEnum.Nominal</Action><Action
 Guid="1291a54b-c79c-48e9-bcc8-72ceb3a1f21f"
>SetUndesiredMovementReferences(aTrainPosition)</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 NeedsRequirement="FALSE"
 Name="Train data"
 Guid="5e656b5e-7ed2-486d-996f-eaadfee75e20"
>
<Comment>Initialization of the train data.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 NeedsRequirement="FALSE"
 Name="Train data"
 Guid="d7b78f5d-ebe0-4cdc-a1b7-859024629a52"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="9df8c9b3-bd08-4a3b-a4cb-9e123bb2c01a"
>InitializeTrainData()</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 NeedsRequirement="FALSE"
 Name="Level"
 Guid="23241729-77da-4af7-95bc-a581e75caa00"
>
<Comment>Set NP mode and level 0.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 NeedsRequirement="FALSE"
 Name="Level and Mode"
 Guid="2832e592-a77a-420d-b930-d88d251d8e13"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="d06920a7-6f22-4431-934e-43981011947e"
>Kernel.Level.Value.Value &lt;- LevelEnum.L0</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Name="EURORADIO"
 Guid="90ef9ed1-f104-4be5-9897-0e2df53e4fca"
>
<Comment>Both terminals will be available but not registered yet. Terminal1 will be the first/main terminal.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Name="EURORADIO"
 Guid="39222441-2143-4945-9966-856779555c4e"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="77843b03-a18d-4c07-9f64-6f4922a6a91f"
>InitializeDefaultTerminals()</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 NeedsRequirement="FALSE"
 Name="Speed and distance monitoring"
 Guid="6392bf44-c658-446b-91a9-ba9b25a136e9"
>
<Comment>Initialization of the data needed for computation of braking curves.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 NeedsRequirement="FALSE"
 Name="Speed and distance monitoring"
 Guid="3620e326-821d-4c09-bf9c-a8ffb2146b71"
>
<PreConditions>
</PreConditions>
<Actions>
</Actions>
<SubRules>
<Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="National values"
 Guid="4d1d13f7-1f0f-4137-bca5-e73b0d016644"
>
<Comment>Initialization of the national values for computation of deceleration curves.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="National values"
 Guid="90f809a4-ad63-443e-89dc-4d1a34ca7eed"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="f4ebe780-f667-464d-a49f-061edbb13d79"
>Kernel.NationalValues.Initialize()</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Fixed values"
 Guid="b384ca9b-7a57-409f-80f7-c928b7bf38ce"
>
<Comment>Initialization of fixed values for computation of the braking curves.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Fixed values"
 Guid="b3f1dfe0-1bd8-47b2-836a-5de04db07ca6"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="54fb3108-01eb-4c24-85be-eb7066379de5"
>Testing.InitializeFixedValues()</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ReleaseSpeed"
 Guid="fe586122-e5ef-4a7c-9a94-d6a4b2d512eb"
>
<Comment>Initialization of the release speed.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ReleaseSpeed"
 Guid="7effa754-2fad-4bf6-a6af-a52ef46f9ee8"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="0c072176-e823-4329-a6f7-99664157752b"
>Kernel.SpeedAndDistanceMonitoring.ReleaseSpeedMonitoring.UpdateReleaseSpeed()</Action></Actions>
</RuleCondition></Conditions>
</Rule></SubRules>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 NeedsRequirement="FALSE"
 Name="Current time"
 Guid="e4e31af2-df86-4cb9-a9ff-56610527c5fd"
>
<Comment>Set the CurrentTime to 0.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 NeedsRequirement="FALSE"
 Name="Current time"
 Guid="829af87a-cae0-4ae8-add5-a7aabaa30622"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="d23792e6-e5e1-4eb5-90ea-66a30f0be03d"
>Kernel.DateAndTime.CurrentTime &lt;- 0.0</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 NeedsRequirement="FALSE"
 Name="Train integrity"
 Guid="4f1244da-71cc-4d18-8bcf-52621d1eff4b"
>
<Comment>Set the train integrity to confirmed.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 NeedsRequirement="FALSE"
 Name="Train integrity"
 Guid="eb65a0f7-3e57-4ca8-aaa3-778605f6b193"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="f4b53bdc-821b-40c5-9833-b1d9bf484700"
>Kernel.TrainIntegrity.TrainIntegrity.Status &lt;- Messages.Q_LENGTH.Train_integrity_confirmed_by_driver</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 NeedsRequirement="FALSE"
 Name="Power on"
 Guid="47ba31e2-ec3f-4faf-92d8-aea5dca9da87"
>
<Comment>Sets power on.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 NeedsRequirement="FALSE"
 Name="Power on"
 Guid="5bf5a5f8-183f-49cd-98f0-267e30b9664d"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="e2e35dfb-2542-4a77-afc3-0648bf2da90b"
>Kernel.PowerOn &lt;- True</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Mode"
 Guid="b5fc1b04-c3b0-4194-b2b0-d463cd1b1e0d"
>
<Comment>Sets the mode.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="FS"
 Guid="1b1e003f-f6ba-435e-9137-c194e470083f"
>
<Comment>Set FS mode.</Comment>
<PreConditions>
<PreCondition
 Guid="43156928-3fe3-43a7-81ab-9a3360e77140"
>aMode == ModeEnum.FS</PreCondition></PreConditions>
<Actions>
<Action
 Guid="ed8d4e04-8a59-49b7-b718-f124b25db271"
>SetFSMode( HandleModeChange =&gt; False )</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="OS"
 Guid="197d78da-a93f-444f-b67d-204a99815663"
>
<Comment>Set OS mode.</Comment>
<PreConditions>
<PreCondition
 Guid="2cad04f6-eb08-4810-9516-1c261cce9dae"
>aMode == ModeEnum.OS</PreCondition></PreConditions>
<Actions>
<Action
 Guid="9f489a7e-0982-45cf-a405-268e8f2cae14"
>SetOSMode( HandleModeChange =&gt; False )</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="SR"
 Guid="1e87bf02-2bf4-4871-866e-22dd7eec2c98"
>
<Comment>Set SR mode.</Comment>
<PreConditions>
<PreCondition
 Guid="61394d06-50bc-4a4f-9052-abf15470e2d6"
>aMode == ModeEnum.SR</PreCondition></PreConditions>
<Actions>
<Action
 Guid="61e199aa-cc68-4bb5-959d-a5f3714e2ece"
>SetSRMode( HandleModeChange =&gt; False )</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="SH"
 Guid="19fdc28c-dd4b-47b2-9a62-6d3b0ef2a48b"
>
<Comment>Set SH mode.</Comment>
<PreConditions>
<PreCondition
 Guid="ca93b8cb-2ef4-46e2-adc4-7fa63a5b7da4"
>aMode == ModeEnum.SH</PreCondition></PreConditions>
<Actions>
<Action
 Guid="5a2a8771-b42a-4567-8f66-2a0ba59e290c"
>SetSHMode( HandleModeChange =&gt; False )</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="UN"
 Guid="95fcd741-069e-484b-878d-a590608eab4b"
>
<Comment>Set UN mode.</Comment>
<PreConditions>
<PreCondition
 Guid="fd65976b-e05e-4f14-8625-5f2594920d4f"
>aMode == ModeEnum.UN</PreCondition></PreConditions>
<Actions>
<Action
 Guid="aeec47fd-c8cb-4fad-a849-ffbd93d5b1c2"
>SetUNMode( HandleModeChange =&gt; False )</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="SL"
 Guid="94393051-dfbc-456e-b19b-dff1b3f06c63"
>
<Comment>Set SL mode.</Comment>
<PreConditions>
<PreCondition
 Guid="a64d80ac-a31e-499e-8802-7a710c862847"
>aMode == ModeEnum.SL</PreCondition></PreConditions>
<Actions>
<Action
 Guid="ac7b9dca-1435-419d-886c-bf5af37ed00c"
>SetSLMode( HandleModeChange =&gt; False )</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="SB"
 Guid="6402cd86-9d5d-4730-8642-42cf66500d6f"
>
<Comment>Set SB mode.</Comment>
<PreConditions>
<PreCondition
 Guid="9ac9d4a0-c24b-4808-94e0-78419ab237da"
>aMode == ModeEnum.SB</PreCondition></PreConditions>
<Actions>
<Action
 Guid="4998ae6f-e241-4aca-8a56-71e3a10f157e"
>SetSBMode( HandleModeChange =&gt; False )</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="TR"
 Guid="231950d7-6ea7-40f4-8adb-ec5dbab723ba"
>
<Comment>Set TR mode.</Comment>
<PreConditions>
<PreCondition
 Guid="5abdd723-d8b1-45f2-aef2-aef09e97cb02"
>aMode == ModeEnum.TR</PreCondition></PreConditions>
<Actions>
<Action
 Guid="9c1d202c-c890-4cad-aece-26251a5e2a93"
>SetTRMode( HandleModeChange =&gt; False )</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="PT"
 Guid="3607783f-b5b1-40bc-b900-e7a9240fb789"
>
<Comment>Set PT mode.</Comment>
<PreConditions>
<PreCondition
 Guid="7f649530-4510-4570-a7a1-a9063b140537"
>aMode == ModeEnum.PT</PreCondition></PreConditions>
<Actions>
<Action
 Guid="73d353ee-8bc5-4552-9215-f8c2b5e18f1d"
>SetPTMode( HandleModeChange =&gt; False )</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="SF"
 Guid="5d31f760-23bd-45f3-b7c8-c02421b0f6a8"
>
<Comment>Set SF mode.</Comment>
<PreConditions>
<PreCondition
 Guid="e5e75f3f-d49d-42bb-ae24-2f1dfde9069f"
>aMode == ModeEnum.SF</PreCondition></PreConditions>
<Actions>
<Action
 Guid="31946884-729b-4e54-b0fe-4a180bd1d86e"
>SetSFMode( HandleModeChange =&gt; False )</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="IS"
 Guid="14ab08b4-709b-41c8-a084-78586aaf010c"
>
<Comment>Set IS mode.</Comment>
<PreConditions>
<PreCondition
 Guid="ce38cf09-933f-4060-98a7-56eef9cb745a"
>aMode == ModeEnum.IS</PreCondition></PreConditions>
<Actions>
<Action
 Guid="c8e1c892-d480-44e1-9408-153d11b5602a"
>SetISMode( HandleModeChange =&gt; False )</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="NL"
 Guid="653b8f1c-9448-4570-8f97-bb6bb499e1a5"
>
<Comment>Set NL mode.</Comment>
<PreConditions>
<PreCondition
 Guid="f779ed79-6e64-486a-8434-c489c50ae8a3"
>aMode == ModeEnum.NL</PreCondition></PreConditions>
<Actions>
<Action
 Guid="f5d72707-90d1-4e78-ba6b-9f82244b8d1d"
>SetNLMode( HandleModeChange =&gt; False )</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="LS"
 Guid="28fdb77b-5da9-4d83-93dd-1b9d402bd20c"
>
<Comment>Set LS mode.</Comment>
<PreConditions>
<PreCondition
 Guid="3623c46a-5596-49c2-b017-45b4b424f971"
>aMode == ModeEnum.LS</PreCondition></PreConditions>
<Actions>
<Action
 Guid="7d225996-16cb-446a-92dc-86acd327795d"
>SetLSMode( HandleModeChange =&gt; False )</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="SN"
 Guid="1fd2e649-fd47-4642-9a61-6493427cba9e"
>
<Comment>Set SN mode.</Comment>
<PreConditions>
<PreCondition
 Guid="7ce04348-e7e2-4fbc-8a0e-a152bd068906"
>aMode == ModeEnum.SN</PreCondition></PreConditions>
<Actions>
<Action
 Guid="f18d97ac-1edc-47f6-ab4f-4ef018d9fcc1"
>SetSNMode( HandleModeChange =&gt; False )</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="RV"
 Guid="0daf58e4-52f1-4358-8f94-4b7a98baebdb"
>
<Comment>Set RV mode.</Comment>
<PreConditions>
<PreCondition
 Guid="b092c0f6-450f-4e99-8844-0aebac63f10d"
>aMode == ModeEnum.RV</PreCondition></PreConditions>
<Actions>
<Action
 Guid="36772f99-eddf-4ae8-92c8-83a3cd37a14c"
>SetRVMode( HandleModeChange =&gt; False )</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="PS"
 Guid="15bc7b20-773a-4fdd-8c50-ffac95cbb45a"
>
<Comment>Set PS mode.</Comment>
<PreConditions>
<PreCondition
 Guid="c3928f57-daa5-46a0-8760-4b3593374a63"
>aMode == ModeEnum.PS</PreCondition></PreConditions>
<Actions>
<Action
 Guid="5d6e336d-0e51-4476-abba-5e7994dbf3b4"
>SetPSMode( HandleModeChange =&gt; False )</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="NP"
 Guid="f89bddba-9cbc-4011-8938-0f9a53961ed4"
>
<Comment>Set NP mode.</Comment>
<PreConditions>
<PreCondition
 Guid="11ced72e-cad7-42a7-8f96-c4b5bb3d94a2"
>aMode == ModeEnum.NP</PreCondition></PreConditions>
<Actions>
<Action
 Guid="45b6ff90-aecc-4204-847b-3e1c519c1dc4"
>SetNPMode( HandleModeChange =&gt; False )</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="20"
 Y="60"
 Width="100"
 Height="50"
 NeedsRequirement="FALSE"
 Name="InitializeElementsForMA"
 Guid="308f7a88-e9cd-4e48-bbc1-66b9b6ccc0a1"
>
<Comment>Sets default values for tests involving the Movement Authority.</Comment>
<Rules>
<Rule
 Priority="Processing"
 X="0"
 Y="0"
 NeedsRequirement="FALSE"
 Name="Initialize SSP + Gradients"
 Guid="1e2c9bd5-c3d2-4d13-aada-2bd07896904a"
>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 NeedsRequirement="FALSE"
 Name="Initialize SSP + Gradients"
 Guid="d7839432-4eec-4ec7-971d-4648f059b30c"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="3615ce68-522a-4f37-9745-49d04c0543b3"
>Kernel.TrackDescription.Gradient.Gradients &lt;-
[
    Kernel.TrackDescription.Gradient.GradientStruct
    {
        Location =&gt; 0.0,
        Gradient =&gt; 0.7
    },
    Kernel.TrackDescription.Gradient.GradientStruct
    {
        Location =&gt; 4800.0,
        Gradient =&gt; 0.94
    }
]</Action><Action
 Guid="1613d496-73f3-4873-ac23-ca4bc8624aa1"
>Kernel.TrackDescription.StaticSpeedProfile.SSP &lt;-
[
    Kernel.TrackDescription.StaticSpeedProfile.StaticSpeedRestrictionStruct
    {
        Location =&gt; 0.0,
        BasicSpeed =&gt; 70.0,
        TrainLengthDelay =&gt; Messages.Q_FRONT.No_train_length_delay_on_validity_end_point_of_profile_element,
        Categories =&gt;
        [
            Kernel.TrackDescription.StaticSpeedProfile.SSPCategory
            {
                CantDeficiency =&gt; Messages.NC_CDTRAIN.Cant_Deficiency_130_mm,
                OtherSpecific =&gt; Kernel.TrainData.TrainCategoryEnum.FreightTrainInG,
                Qualifier =&gt; Messages.Q_DIFF.Cant_Deficiency_specific_category ,
                Speed =&gt; 70.0
            }
        ]
    }
]</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="20"
 Y="150"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="SetFSMode"
 Guid="5544ad42-1088-4018-a928-96fe3bddc890"
>
<Comment>Procedure that sets the mode to FS and sets all data so maintain this mode.</Comment>
<Parameters>
<Parameter
 Type="Boolean"
 Name="HandleModeChange"
 Guid="495db541-623c-49d7-9aed-85d8f97ac947"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set FS mode"
 Guid="371c612d-f47d-4ada-8516-5497c6e7b793"
>
<Comment>Set the mode and the previous mode (to protect from mode change activations) to FS.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set FS mode"
 Guid="6eb404d9-c163-43d0-8582-8c12e44b7d70"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="86929d9e-0c8c-4cea-9ddb-fcbac74fa271"
>Kernel.Mode &lt;- ModeEnum.FS</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode"
 Guid="ffbb0242-653e-4c52-ab07-b5f472cc6593"
>
<Comment>If the parameter HandleModeCahnge is set to false, the previous mode is also set to FS to block the mode change effects.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode to FS"
 Guid="b3c90fd8-cfe7-4c57-af5e-c74fcaa322b9"
>
<Comment>If we do not want to have mode change effects, set the previous mode to FS.</Comment>
<PreConditions>
<PreCondition
 Guid="093c64d1-2d06-4a17-b771-118414c49249"
>NOT HandleModeChange</PreCondition></PreConditions>
<Actions>
<Action
 Guid="ecacd905-81cb-43c3-8c0e-e2ca36cb0357"
>Kernel.Modes.ModeTransitions.PrevMode &lt;- ModeEnum.FS</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode to NP"
 Guid="a295d6e5-ce79-42fa-af7c-9313924d9898"
>
<Comment>If we do want to have mode change effects, set the previous mode to NP.</Comment>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="ee2a861c-85f3-4acb-928c-d01eaa0f2eaf"
>Kernel.Modes.ModeTransitions.PrevMode &lt;- ModeEnum.NP</Action><Action
 Guid="d0259358-ba18-45a6-ada8-f210b328a129"
>DMI.MasterDMI().PreviousMode &lt;- ModeEnum.NP</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set level (if required)"
 Guid="1fb5fcb7-4432-4efe-9fdc-396ff358a4f2"
>
<Comment>Set the level if the current level would cause a mode change.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Level is 0 or NTC"
 Guid="87a769a4-72eb-4416-b715-1d586fc6dd77"
>
<PreConditions>
<PreCondition
 Guid="5f9fa1b8-46b2-4648-8e29-eeccf792e51a"
>Kernel.Level.Value.Value in [LevelEnum.L0, LevelEnum.LNTC]</PreCondition></PreConditions>
<Actions>
<Action
 Guid="8fcea4c8-c27d-4f60-9427-0db970b3911b"
>Kernel.SetLevel(LevelDataStruct{
        NTC =&gt; NID_NTC.NOT_APPLICABLE,
        Value =&gt; LevelEnum.L1
    }
)</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set gradient and SSP"
 Guid="760f0db1-906b-4ed8-9864-d8a23f61c0ba"
>
<Comment>Set the gradient and SSP.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="No gradient or SSP"
 Guid="8c6fc49c-2185-4d06-912f-26c0a2314e69"
>
<PreConditions>
<PreCondition
 Guid="5ef111cd-1c69-427b-940d-38f128fbd20c"
>Kernel.TrackDescription.Gradient.Gradients == []
  OR  
Kernel.TrackDescription.StaticSpeedProfile.SSP == []</PreCondition></PreConditions>
<Actions>
<Action
 Guid="7de82623-f8c8-4c96-a338-2212f61232c3"
>Testing.InitializeElementsForMA()</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set MA"
 Guid="213ea090-b589-46c5-b55c-e2979c5f5cd1"
>
<Comment>Set the MA.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="No MA"
 Guid="47994e99-a7a6-49f9-afd3-efe13aa2f324"
>
<PreConditions>
<PreCondition
 Guid="c563d454-9695-44a6-81dd-2e8d7ce8177a"
>Kernel.MA.MA == EMPTY</PreCondition></PreConditions>
<Actions>
<Action
 Guid="27b80ae3-1415-4735-9109-7188d6cf5435"
>Kernel.MA.MA &lt;- Kernel.MA.MAStruct{
    TargetSpeed =&gt; 0.0,
    Sections =&gt; [],
    EndSection =&gt; Kernel.MA.EndSectionStruct{
        Length =&gt; 4500.0
    }
}</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Validate the train position"
 Guid="1fcb69c4-7dd2-420c-a625-b43c4ab32fbf"
>
<Comment>Validates the train position</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Validate the train position"
 Guid="00e98022-1570-4a8d-801e-aa9163148534"
>
<Comment>Validates the train position</Comment>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="5a884d1b-f29e-4c94-9ff7-84538c30bac2"
>ValidateInformation(Kernel.TrainPosition.Position)</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Validate the train data"
 Guid="c433f36b-bbd9-419f-8686-cfb871e28736"
>
<Comment>Validate the train data.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Validate the train data"
 Guid="84b5d3e1-547a-4179-9aac-0b9e716b41a7"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="73160bca-64a9-4ece-a01a-42b03a11fa6a"
>ValidateInformation(Kernel.TrainData.TrainData)</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="DMI cab open"
 Guid="f5d70e94-38cf-4f7f-a0e0-e30819faf258"
>
<Comment>Open the DMI cab.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="DMI cab open"
 Guid="41eae1ed-741e-488a-9e47-88eb74b74dc8"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="f4d43283-1e6b-4aba-b5af-9947887e3f1b"
>TIU.CabA.Desk1IsActive &lt;- True</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="No Mode Profile"
 Guid="c082e94c-47bf-4d95-898c-6e0749272cc6"
>
<Comment>Delete any mode profiles.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="No Mode Profile"
 Guid="5b82daa9-9aec-4968-aab8-d57682e5f381"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="c39eb533-d302-4b9e-937b-a28026c72ea0"
>Kernel.MA.ModeProfile.Profile &lt;- []</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="No Sleeping signal"
 Guid="7f60ff5b-8ef8-4298-ac62-61a448df140e"
>
<Comment>Remove the sleeping signal.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="No Sleeping signal"
 Guid="00a3211a-7b8d-4b88-858d-534308bd0086"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="7695ad30-ee8a-4fa2-b789-c0b1dde8699c"
>TIU.SleepingRequested &lt;- False</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Power on"
 Guid="ff94fbaa-a0f1-4b53-80d2-59506427b0b3"
>
<Comment>Switch power on.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Power on"
 Guid="fff6b40a-b81d-4a21-9aae-bc14a08e02c0"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="26d9ed87-d969-402d-abf2-e68fc445fe1f"
>Kernel.PowerOn &lt;- True</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ETCS not isolated"
 Guid="a92ca44e-b3de-4c5f-bb5d-bae23bc1ee0b"
>
<Comment>Un-isolate the ETCS from the train.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ETCS not isolated"
 Guid="b3f0406a-362a-4e50-bd35-1002a6c7511a"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="69f0266a-d797-46bb-b85f-ba5cce295984"
>TIU.ETCSIsolated &lt;- False</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set procedure"
 Guid="17b181b9-a7b2-4a42-923c-ff756a39fb0d"
>
<Comment>Set HandleModeChange to NoProcedure.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set procedure"
 Guid="e6933c58-f27f-45bb-a3c5-0cee30c40b43"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="e62e1332-9a14-4db2-845c-e94993227670"
>Kernel.HandleModeChange &lt;- Kernel.HandleModeChangeSM.NoProcedure</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="240"
 Y="150"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="SetLSMode"
 Guid="843f9b0d-e290-43ff-b1cd-4998914a6436"
>
<Comment>Procedure that sets the mode to LS and sets all data so maintain this mode.</Comment>
<Parameters>
<Parameter
 Type="Boolean"
 Name="HandleModeChange"
 Guid="e28d8842-e6ed-41cf-be8e-1ca2f80766eb"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set LS mode"
 Guid="675162e4-02d3-472f-8960-71ab1500ee0c"
>
<Comment>Set the mode and the previous mode (to protect from mode change activations) to LS.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set LS mode"
 Guid="772e227e-93a3-4a31-8401-f343b2798987"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="c3f3f425-ec4d-4ee2-9646-a5dda9669323"
>Kernel.Mode &lt;- ModeEnum.LS</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode"
 Guid="1e4f6b9c-b3f4-45ac-adc6-5e28476145b7"
>
<Comment>If the parameter HandleModeCahnge is set to false, the previous mode is also set to LS to block the mode change effects.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode to LS"
 Guid="c30b814f-8e00-4e82-998a-2d354ec4d1e6"
>
<Comment>If we do not want to have mode change effects, set the previous mode to LS.</Comment>
<PreConditions>
<PreCondition
 Guid="5b512b96-d570-4845-a002-3f0b24a0c943"
>NOT HandleModeChange</PreCondition></PreConditions>
<Actions>
<Action
 Guid="b58de7db-c2a4-4ef0-90fb-e41fe6ba5af8"
>Kernel.Modes.ModeTransitions.PrevMode &lt;- ModeEnum.LS</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode to NP"
 Guid="5862e246-3217-45e0-85b0-3a9a21303d29"
>
<Comment>If we do want to have mode change effects, set the previous mode to NP.</Comment>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="abbc7c2c-ca09-4cbc-b536-36ba58a8d608"
>Kernel.Modes.ModeTransitions.PrevMode &lt;- ModeEnum.NP</Action><Action
 Guid="16c8a888-3245-4b20-9705-722e3c66abe9"
>DMI.MasterDMI().PreviousMode &lt;- ModeEnum.NP</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set level (if required)"
 Guid="03787445-aafb-4da2-9944-f87e05e0cf94"
>
<Comment>Set the level if the current level would cause the mode ot change.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Level is 0 or NTC"
 Guid="b2f6292f-1382-4352-bcb5-b7def687e60d"
>
<PreConditions>
<PreCondition
 Guid="2460b6e7-9d68-433a-9594-fd98160bcfa3"
>Kernel.Level.Value.Value in [LevelEnum.L0, LevelEnum.LNTC]</PreCondition></PreConditions>
<Actions>
<Action
 Guid="446c01f7-8dd4-4df3-99a4-e2df71f6a00a"
>Kernel.SetLevel(LevelDataStruct{
        NTC =&gt; NID_NTC.NOT_APPLICABLE,
        Value =&gt; LevelEnum.L1
    }
)</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set gradient and SSP"
 Guid="59cbd8bb-f239-4b67-a591-ee1b1db25aed"
>
<Comment>Set the SSP and gradient.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="No gradient or SSP"
 Guid="96a8b6a3-d53f-49a4-b842-a77c4b5fa6e6"
>
<PreConditions>
<PreCondition
 Guid="6393f002-643e-4185-9aa3-164b269097d9"
>Kernel.TrackDescription.Gradient.Gradients == []
  OR  
Kernel.TrackDescription.StaticSpeedProfile.SSP == []</PreCondition></PreConditions>
<Actions>
<Action
 Guid="79df0afc-6e6d-4c17-bdfc-57f58b7cbfe0"
>Testing.InitializeElementsForMA()</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set MA"
 Guid="46054fd8-dd97-4c90-b6c3-94f63075e04e"
>
<Comment>Set the MA.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="No MA"
 Guid="6167554b-b2df-49e7-bd5b-a41b69724d68"
>
<PreConditions>
<PreCondition
 Guid="fa520447-9f40-4fdd-b7f8-942b00d3b71b"
>Kernel.MA.MA == EMPTY</PreCondition></PreConditions>
<Actions>
<Action
 Guid="3e84671b-e591-401f-acc8-a48b81913343"
>Kernel.MA.MA &lt;- Kernel.MA.MAStruct{
    TargetSpeed =&gt; 0.0,
    Sections =&gt; [],
    EndSection =&gt; Kernel.MA.EndSectionStruct{
        Length =&gt; 4500.0
    }
}</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Validate the train position"
 Guid="3e7308d5-169f-4e92-bcf7-4507633bf40e"
>
<Comment>Validates the train position</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Validate the train position"
 Guid="7ca232d2-284b-4554-a1b5-641a336cf769"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="edcbc375-fd7a-4563-aa4e-4bb64bac988f"
>ValidateInformation(Kernel.TrainPosition.Position)</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Validate the train data"
 Guid="30bb9bf2-b567-4b08-b870-26927fbd8e34"
>
<Comment>Validate the train data.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Validate the train data"
 Guid="11969806-17ff-472b-91ce-5a711d8435d6"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="1a1d1299-639e-4a7b-a561-79227bce369d"
>Kernel.TrainData.TrainData.DataState &lt;- Default.DataStateEnum.Valid</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="DMI cab open"
 Guid="39eac867-dcd3-461d-b36d-f9530c651f4f"
>
<Comment>Open the DMI cab.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="DMI cab open"
 Guid="ddbc25a5-159f-42c3-8c65-752e8141e45c"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="b9b32fc6-ac98-43ce-a949-d02eb7fc3e2c"
>TIU.CabA.Desk1IsActive &lt;- True</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set LS mode profile"
 Guid="9bf9f375-c3a0-4994-a177-fa1629b59ffb"
>
<Comment>Set a LS mode profile applicable at the train&apos;s position.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set LS mode profile"
 Guid="bee4a01e-c52b-4272-9c2c-46d136690011"
>
<PreConditions>
<PreCondition
 Guid="96cae18b-d8a6-4658-9bbb-4d7200549257"
>NOT THERE_IS modeProfile IN Kernel.MA.ModeProfile.Profile | modeProfile.Mode == ModeEnum.ModeProfile.LS AND Kernel.MA.ModeProfile.DistanceIsWithinAModeProfile(modeProfile)</PreCondition></PreConditions>
<Actions>
<Action
 Guid="d4b4461f-f590-4be9-abca-0fe04cbc2a24"
>Kernel.MA.ModeProfile.Profile &lt;- 
[
Kernel.MA.ModeProfile.ModeProfileStruct{
    Location =&gt; 0.0,
    Mode =&gt; ModeEnum.ModeProfile.LS,
    Speed =&gt; BaseTypes.Speed.UseNV,
    Length =&gt; 4500.0,
    AcknLength =&gt; 0.0,
    SupervisionQualifier =&gt; Messages.Q_MAMODE.as_the_EOA__keeping_the_SvL_given_by_the_MA
}
]</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="No Sleeping signal"
 Guid="b98f0cbb-866c-4549-adb2-e319f27ea4be"
>
<Comment>Remove the sleeping signal.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="No Sleeping signal"
 Guid="243836cd-fd76-4d0e-9843-da3032c725b2"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="e8a5b9da-53b7-4835-a062-2c86024dd6b3"
>TIU.SleepingRequested &lt;- False</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Power on"
 Guid="e9ff175d-ee3d-4c12-b290-86dd7139ca1b"
>
<Comment>Switch the power on.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Power on"
 Guid="290770fb-d79b-428e-a960-1a3eabfaa4c3"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="7b730924-1fb8-43c6-bbca-81df50b5ff6e"
>Kernel.PowerOn &lt;- True</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ETCS not isolated"
 Guid="b0fd5b1f-8599-43b3-8a95-9d29c938ca7b"
>
<Comment>Un-isolate the ETCS from the train.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ETCS not isolated"
 Guid="4d9fcf63-299b-47e5-a182-76e38743a6c2"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="bec6a6bc-9eba-456f-a2d4-e4f4b3df289a"
>TIU.ETCSIsolated &lt;- False</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set procedure"
 Guid="dcdb2fee-90ee-47ad-b819-2d1a8472b371"
>
<Comment>Set HandleModeChange to NoProcedure.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set procedure"
 Guid="bdd35f2f-a491-4c76-aac0-eb8a6148c378"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="46a911f2-2dbb-4c58-a532-8ff9bb6626e3"
>Kernel.HandleModeChange &lt;- Kernel.HandleModeChangeSM.NoProcedure</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="20"
 Y="270"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="SetSRMode"
 Guid="85e02aac-468a-4ad5-a199-7ed7a4201f73"
>
<Comment>Procedure that sets the mode to SR and sets all data so maintain this mode.</Comment>
<Parameters>
<Parameter
 Type="Boolean"
 Name="HandleModeChange"
 Guid="ae7015ee-9b0f-4c16-8fb1-6748a41793f8"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set SR mode"
 Guid="df9b0350-3626-4781-8c03-3b3457920b1f"
>
<Comment>Set the mode and the previous mode (to protect from mode change activations) to SR.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set SR mode"
 Guid="e1ad8f4a-82ab-4a90-bfb7-efc319198d1b"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="b501904c-c6c8-45fa-9042-2f1415bd8ba1"
>Kernel.Mode &lt;- ModeEnum.SR</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode"
 Guid="b64f0d31-b0f4-4bb1-8299-a9b966667d3c"
>
<Comment>If the parameter HandleModeChange is set to false, the previous mode is also set to SR to block the mode change effects.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode to SR"
 Guid="a0142416-382d-44b4-a6f5-5da7c532d4f5"
>
<Comment>If we do not want to have mode change effects, set the previous mode to SR.</Comment>
<PreConditions>
<PreCondition
 Guid="82743dbd-4efd-46d1-8031-5ea49b2b86c4"
>NOT HandleModeChange</PreCondition></PreConditions>
<Actions>
<Action
 Guid="09eacb09-807e-4a02-81a0-07b6842328d0"
>Kernel.Modes.ModeTransitions.PrevMode &lt;- ModeEnum.SR</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode to NP"
 Guid="1543d2be-3c32-49fe-ba7f-b94bdabbde9c"
>
<Comment>If we do want to have mode change effects, set the previous mode to NP.</Comment>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="17513104-5b1a-479b-83a3-c0bc6957411b"
>Kernel.Modes.ModeTransitions.PrevMode &lt;- ModeEnum.NP</Action><Action
 Guid="870ad849-62ab-47f2-9b99-532de089e1ca"
>DMI.MasterDMI().PreviousMode &lt;- ModeEnum.NP</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set level (if required)"
 Guid="1e67dc91-cbf0-4e7b-8a09-d2957471e2fe"
>
<Comment>Set hte level if the current level would cause the mode to change.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Level is 0 or NTC"
 Guid="d1472685-a3ed-412d-bd76-2f35b2125972"
>
<PreConditions>
<PreCondition
 Guid="87975c30-4872-4018-a95a-1e815b12b6c4"
>Kernel.Level.Value.Value in [LevelEnum.L0, LevelEnum.LNTC]</PreCondition></PreConditions>
<Actions>
<Action
 Guid="da425322-69a6-4027-8ca8-31a3e9c3feaf"
>Kernel.SetLevel(LevelDataStruct{
        NTC =&gt; NID_NTC.NOT_APPLICABLE,
        Value =&gt; LevelEnum.L1
    }
)</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Delete the MA"
 Guid="258f00dd-ebc4-47c8-b82f-4df206ef6e06"
>
<Comment>Delete the MA.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Delete the MA"
 Guid="2df7e86c-3162-4bbc-b91e-f83e97b1794d"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="ddc4c703-c2bc-47f1-a8fa-5ff2684cec24"
>Kernel.MA.MA &lt;- EMPTY</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Validate the train position"
 Guid="c20eba3b-6147-43c9-b8c6-88414e75c32c"
>
<Comment>Validates the train position</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Validate the train position"
 Guid="039b1556-c1ba-4cd8-a116-92d3594da0f0"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="9e97cc8c-c574-4549-913d-7790d9de8d1a"
>ValidateInformation(Kernel.TrainPosition.Position)</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Validate the train data"
 Guid="1d0d35a5-b743-4a0e-8427-befcbcc9cc23"
>
<Comment>Validate the train data.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Validate the train data"
 Guid="ecd0aa7d-6856-4248-9368-6e9082b7e68e"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="c12b4cb8-076e-480d-b6da-39a8e9a153cc"
>Kernel.TrainData.TrainData.DataState &lt;- Default.DataStateEnum.Valid</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Empty the mode profile"
 Guid="0b688d7f-db41-48cc-8f9d-725a46a5689b"
>
<Comment>Delete the mode profile.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Empty the mode profile"
 Guid="bcbe415d-cad2-4143-a3e1-8e3435e6809a"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="4f962ed9-3d1a-41d2-95a4-8b038aae6445"
>Kernel.MA.ModeProfile.Profile &lt;- []</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="DMI cab open"
 Guid="978d18ac-efee-4677-816c-809d1e3350ed"
>
<Comment>Open the DMI cab.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="DMI cab open"
 Guid="c825538b-009d-4def-9d6b-8f6305916d33"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="27aea12f-886c-4047-8246-fe7e03f8fa21"
>TIU.CabA.Desk1IsActive &lt;- True</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set the SR information"
 Guid="0abde4d6-83e1-40e6-8836-e66a2df5f0cb"
>
<Comment>Set the SR authorisation information (distance to run in SR and list of expected balises in SR mode).</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set the SR information"
 Guid="c0eb75d7-e692-4313-8df8-bc3d0f2ab670"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="01e42c58-bc2e-46cb-ac4b-78155e509058"
>Kernel.Modes.StaffResponsible.SRAuthorisation &lt;- Kernel.Modes.StaffResponsible.SRStruct{
    BGs =&gt; [],
    BGListReceived =&gt; False,
    Location =&gt; BaseTypes.Distance.Infinity
}</Action><Action
 Guid="4597d7e8-771e-4f88-a32a-b7ac0cc7a208"
>Kernel.TrainPosition.SRStartDistance &lt;- Odometry.NominalDistance</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="No Sleeping signal"
 Guid="51129b99-3d9b-462f-9af4-0d13a498cddd"
>
<Comment>Remove the sleeping signal.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="No Sleeping signal"
 Guid="5f161253-8fc9-4efd-a8aa-51086df6e488"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="394abec1-1461-4aed-8467-944b7cecbf4d"
>TIU.SleepingRequested &lt;- False</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Power on"
 Guid="1d9928c1-0e2e-4b96-8351-8d0a947242dd"
>
<Comment>Turn the power on.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Power on"
 Guid="6d177c1a-ed55-433e-963f-2930cb50bf24"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="3c2209c1-ede5-4f71-840d-873765305ad4"
>Kernel.PowerOn &lt;- True</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ETCS not isolated"
 Guid="bcb6620d-6c56-4760-9225-2198cde2bb3a"
>
<Comment>Un-isolate the ETCS from the train.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ETCS not isolated"
 Guid="c8525df8-102f-4f30-95f6-336032c77fbe"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="c8d7a9f7-f34e-4a3e-ba6f-b3f132afd2db"
>TIU.ETCSIsolated &lt;- False</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set procedure"
 Guid="61c57154-7058-4a4f-95cd-1dd00e751cde"
>
<Comment>Set HandleModeChange to NoProcedure.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set procedure"
 Guid="5e3ef205-b340-4fb0-8644-c0d16c5faf5b"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="0c4b720c-6f27-4f73-9f6e-922ea53702e3"
>Kernel.HandleModeChange &lt;- Kernel.HandleModeChangeSM.NoProcedure</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="570"
 Y="150"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="SetOSMode"
 Guid="70057ba0-9886-4073-9e8d-8543bb873665"
>
<Comment>Procedure that sets the mode to OS and sets all data so maintain this mode.</Comment>
<Parameters>
<Parameter
 Type="Boolean"
 Name="HandleModeChange"
 Guid="02163610-f24b-4e14-9f6b-0734108b855b"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set OS mode"
 Guid="399d52b3-5029-4a01-b432-7f71f0b3030f"
>
<Comment>Set the mode and the previous mode (to protect from mode change activations) to OS.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set OS mode"
 Guid="4c754b26-623c-479a-9949-eb0a77eae594"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="04ec064e-082f-4ebb-8ef3-d325b13b36ac"
>Kernel.Mode &lt;- ModeEnum.OS</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode"
 Guid="165723af-e8a3-4798-a733-596ac4215f5b"
>
<Comment>If the parameter HandleModeCahnge is set to false, the previous mode is also set to OS to block the mode change effects.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode to OS"
 Guid="635f39bd-6246-4e1c-9436-7dbffad456a0"
>
<Comment>If we do not want to have mode change effects, set the previous mode to OS.</Comment>
<PreConditions>
<PreCondition
 Guid="74cf8f57-5e03-41aa-9cfe-f9c18b5dbde4"
>NOT HandleModeChange</PreCondition></PreConditions>
<Actions>
<Action
 Guid="0740d2d7-2419-4454-ae73-d0347f3f2e64"
>Kernel.Modes.ModeTransitions.PrevMode &lt;- ModeEnum.OS</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode to NP"
 Guid="75b8096e-7542-481b-9631-3411bbcad155"
>
<Comment>If we do want to have mode change effects, set the previous mode to NP.</Comment>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="0233f8fa-bbfb-4508-a97d-0f3612c6d3c5"
>Kernel.Modes.ModeTransitions.PrevMode &lt;- ModeEnum.NP</Action><Action
 Guid="018a0a4d-901c-44f6-a852-09c45e1d2515"
>DMI.MasterDMI().PreviousMode &lt;- ModeEnum.NP</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set level (if required)"
 Guid="4805dbc8-42ee-422f-95bb-27ca928b9ac0"
>
<Comment>Set the level if the current level would cause the mode to change.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Level is 0 or NTC"
 Guid="518d706c-d6ed-4793-9221-c8354b500300"
>
<PreConditions>
<PreCondition
 Guid="8bc69586-f270-4153-8797-9a68eb9ae4f4"
>Kernel.Level.Value.Value in [LevelEnum.L0, LevelEnum.LNTC]</PreCondition></PreConditions>
<Actions>
<Action
 Guid="878f7216-f2de-4656-864d-450091487cfd"
>Kernel.SetLevel(LevelDataStruct{
        NTC =&gt; NID_NTC.NOT_APPLICABLE,
        Value =&gt; LevelEnum.L1
    }
)</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set gradient and SSP"
 Guid="9b0b7b26-3dae-4240-833e-32520ada053d"
>
<Comment>Set the SSP and Gradient.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="No gradient or SSP"
 Guid="38019a22-8337-4071-9196-8e0a9072a8df"
>
<PreConditions>
<PreCondition
 Guid="3c66a98e-75b2-4e89-87ce-3b90b2a8e9d2"
>Kernel.TrackDescription.Gradient.Gradients == []
  OR  
Kernel.TrackDescription.StaticSpeedProfile.SSP == []</PreCondition></PreConditions>
<Actions>
<Action
 Guid="9abe323c-463d-4d1c-a111-0bd7ec21071b"
>Testing.InitializeElementsForMA()</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set MA"
 Guid="07869aeb-5b0c-48e5-a0be-0534c2e86f6f"
>
<Comment>Set the MA.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="No MA"
 Guid="04f5cc49-902b-4b52-9192-510661156271"
>
<PreConditions>
<PreCondition
 Guid="97d81a49-1f86-4878-8db2-a6981e8993f0"
>Kernel.MA.MA == EMPTY</PreCondition></PreConditions>
<Actions>
<Action
 Guid="970b24d5-0e0c-4afa-a1fc-cd764e3a8107"
>Kernel.MA.MA &lt;- Kernel.MA.MAStruct{
    TargetSpeed =&gt; 0.0,
    Sections =&gt; [],
    EndSection =&gt; Kernel.MA.EndSectionStruct{
        Length =&gt; 4500.0
    }
}</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Validate the train position"
 Guid="67c82d6b-628a-482b-b3a1-ac9f226f949e"
>
<Comment>Validates the train position</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Validate the train position"
 Guid="8a69b279-b254-46ef-88b6-11f54833d2b3"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="2fb8417a-5110-4198-8e34-c9ea17b22f99"
>ValidateInformation(Kernel.TrainPosition.Position)</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Validate the train data"
 Guid="7d2a8425-f8bf-40da-bf70-0dbf43478c05"
>
<Comment>Validate the train data.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Validate the train data"
 Guid="b7a06df2-6338-4ad8-bc67-67119e696253"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="5e0d6baf-2609-41e6-a131-23a0db655eea"
>Kernel.TrainData.TrainData.DataState &lt;- Default.DataStateEnum.Valid</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="DMI cab open"
 Guid="a541f900-ad59-4dcd-9f65-8c1b4d53524c"
>
<Comment>Open the DMI cab.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="DMI cab open"
 Guid="9e0ceecc-0225-4be3-81ba-95d41cbe94b9"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="592f8c50-b817-4ec3-b4b8-745a2b3e6d94"
>TIU.CabA.Desk1IsActive &lt;- True</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set OS mode profile"
 Guid="ab2d4931-04d0-44d3-9937-b60a16c8e81e"
>
<Comment>Set a OS mode profile applicable at the train&apos;s current position.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set LS mode profile"
 Guid="1dc3e362-4992-4fc9-bf45-eb0fa59f1182"
>
<PreConditions>
<PreCondition
 Guid="91df0e7e-4671-4d12-a652-78a421a92c46"
>NOT THERE_IS modeProfile IN Kernel.MA.ModeProfile.Profile | modeProfile.Mode == ModeEnum.ModeProfile.OS AND Kernel.MA.ModeProfile.DistanceIsWithinAModeProfile(modeProfile)</PreCondition></PreConditions>
<Actions>
<Action
 Guid="566f5349-a4a2-4967-bd62-56451428e117"
>Kernel.MA.ModeProfile.Profile &lt;- 
[
Kernel.MA.ModeProfile.ModeProfileStruct{
    Location =&gt; 0.0,
    Mode =&gt; ModeEnum.ModeProfile.OS,
    Speed =&gt; BaseTypes.Speed.UseNV,
    Length =&gt; 4500.0,
    AcknLength =&gt; 0.0,
    SupervisionQualifier =&gt; Messages.Q_MAMODE.as_the_EOA__keeping_the_SvL_given_by_the_MA
}
]</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="No Sleeping signal"
 Guid="911576d2-a077-4293-8388-1fdb9e926704"
>
<Comment>Turn off the sleeping signal.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="No Sleeping signal"
 Guid="b55e5f4b-df91-4164-a41e-13aa3176d5e4"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="1b5317d8-e17a-433b-89a9-e5b6c9dcf199"
>TIU.SleepingRequested &lt;- False</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Power on"
 Guid="af372fb1-c24c-4954-bf92-1c48ca0d0470"
>
<Comment>Turn the power on.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Power on"
 Guid="4ff617cd-192f-4a71-981f-0fc185916e10"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="2a9e769d-9513-4509-8ede-bc6c2a610d17"
>Kernel.PowerOn &lt;- True</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ETCS not isolated"
 Guid="c5f49cef-1b70-40e5-9482-3dff74b03600"
>
<Comment>Un-isolate the ETCS from the train.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ETCS not isolated"
 Guid="0eca2891-288a-4b49-aa07-9a5f49404637"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="781c4dbd-bfd7-41fd-bde5-0f680379eee7"
>TIU.ETCSIsolated &lt;- False</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set procedure"
 Guid="e1177734-3240-4d38-85bd-914dd790bf10"
>
<Comment>Set HandleModeChange to NoProcedure.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set procedure"
 Guid="d0959cbd-85aa-4827-a9ab-76f51ddfb3f4"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="acd7f5ae-95df-4833-9e69-c6d1bd0a64b5"
>Kernel.HandleModeChange &lt;- Kernel.HandleModeChangeSM.NoProcedure</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="460"
 Y="210"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="SetSHMode"
 Guid="4f5882fb-240f-446c-ac93-87449b4d3c5b"
>
<Comment>Procedure that sets the mode to SH and sets all data so maintain this mode.</Comment>
<Parameters>
<Parameter
 Type="Boolean"
 Name="HandleModeChange"
 Guid="83e172e0-e233-4650-a9fe-0c29e15ed0f9"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set SH mode"
 Guid="5c386fbf-08f4-40ae-a0d0-e31328127161"
>
<Comment>Set the mode and the previous mode (to protect from mode change activations) to SH.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set SH mode"
 Guid="f80df71d-b420-4a84-992e-cea4a288f8f0"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="a21fb837-38d3-4cff-bb4f-1ab8fb17fe0c"
>Kernel.Mode &lt;- ModeEnum.SH</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode"
 Guid="37eeed15-f83f-41f6-897f-112746d9dc8e"
>
<Comment>If the parameter HandleModeCahnge is set to false, the previous mode is also set to SH to block the mode change effects.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode to SH"
 Guid="4a634e15-2e68-4135-bc16-4fd761a35294"
>
<Comment>If we do not want to have mode change effects, set the previous mode to SH.</Comment>
<PreConditions>
<PreCondition
 Guid="64d5245f-aaef-4a99-93fa-2c4a76ab45da"
>NOT HandleModeChange</PreCondition></PreConditions>
<Actions>
<Action
 Guid="df1e25fb-5847-4a05-8618-d82242574b12"
>Kernel.Modes.ModeTransitions.PrevMode &lt;- ModeEnum.SH</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode to NP"
 Guid="b7ee81ec-fbc9-47c9-ab15-658885c9f7a9"
>
<Comment>If we do want to have mode change effects, set the previous mode to NP.</Comment>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="7b7f93fe-138a-4d91-8770-8065b29e4bab"
>Kernel.Modes.ModeTransitions.PrevMode &lt;- ModeEnum.NP</Action><Action
 Guid="c47aa15a-4e7f-4236-8897-7dc367a8662b"
>DMI.MasterDMI().PreviousMode &lt;- ModeEnum.NP</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set level (if required)"
 Guid="162e4874-bde5-4fae-94e3-1135f35eb5bc"
>
<Comment>Set the level if the current level would cause the mode to change.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Level is 0 or NTC"
 Guid="dd08f45a-c259-4510-99e0-13a0ab68ed9d"
>
<PreConditions>
<PreCondition
 Guid="d46fb86d-46d4-40d2-8ad1-b2cc9c63bb71"
>Kernel.Level.Value.Value in [LevelEnum.L0, LevelEnum.LNTC]</PreCondition></PreConditions>
<Actions>
<Action
 Guid="43230c0f-05d2-4aaf-9515-863807313f64"
>Kernel.SetLevel(LevelDataStruct{
        NTC =&gt; NID_NTC.NOT_APPLICABLE,
        Value =&gt; LevelEnum.L1
    }
)</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set gradient and SSP"
 Guid="58b50cbe-c63b-4b03-9aa5-ed235ad94882"
>
<Comment>Set the SSP and gradient.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="No gradient or SSP"
 Guid="ebf944db-3d31-4024-8a84-ccc2400bdea3"
>
<PreConditions>
<PreCondition
 Guid="f0bc5d08-acf9-4f97-9dc6-143eef29519f"
>Kernel.TrackDescription.Gradient.Gradients == []
  OR  
Kernel.TrackDescription.StaticSpeedProfile.SSP == []</PreCondition></PreConditions>
<Actions>
<Action
 Guid="17495370-721d-4147-a9d5-86e77aca98c3"
>Testing.InitializeElementsForMA()</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set MA"
 Guid="3c375211-2894-46b7-ac68-a3019c399954"
>
<Comment>Set the MA.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="No MA"
 Guid="099b959c-bace-4096-9d09-93d7344a6cdc"
>
<PreConditions>
<PreCondition
 Guid="c3932656-a311-48f6-8b25-2a72d0356aa8"
>Kernel.MA.MA == EMPTY</PreCondition></PreConditions>
<Actions>
<Action
 Guid="3ec3b8ad-a6c8-4cae-abbf-200584f3de10"
>Kernel.MA.MA &lt;- Kernel.MA.MAStruct{
    TargetSpeed =&gt; 0.0,
    Sections =&gt; [],
    EndSection =&gt; Kernel.MA.EndSectionStruct{
        Length =&gt; 4500.0
    }
}</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="DMI cab open"
 Guid="32b1dc25-1ebf-4ade-a173-244d69b001e2"
>
<Comment>Open the DMI cab.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="DMI cab open"
 Guid="05b6f3d2-7baa-497e-b7df-ff8e74a36910"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="608e9537-e900-4646-aa3a-f57e2719f064"
>TIU.CabA.Desk1IsActive &lt;- True</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Validate the train position"
 Guid="71e738a6-1416-41c1-9588-9915244de08c"
>
<Comment>Validates the train position</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Validate the train position"
 Guid="90c982df-6775-4ae5-83ee-86c6fb811993"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="6ca781c5-ea0b-404c-a279-f61fd54f2274"
>ValidateInformation(Kernel.TrainPosition.Position)</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set SH mode profile"
 Guid="355c7b3f-c821-45a0-bd67-f15551c7beed"
>
<Comment>Set a SH mode profile applicable at the train&apos;s current location.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set LS mode profile"
 Guid="329a488a-5014-4b7c-a965-a9782003c9f4"
>
<PreConditions>
<PreCondition
 Guid="91d89649-6d39-47dc-bce5-2baf049e6630"
>NOT THERE_IS modeProfile IN Kernel.MA.ModeProfile.Profile | modeProfile.Mode == ModeEnum.ModeProfile.SH AND Kernel.MA.ModeProfile.DistanceIsWithinAModeProfile(modeProfile)</PreCondition></PreConditions>
<Actions>
<Action
 Guid="5460d2df-2aba-44d4-be04-514bbcd16bca"
>Kernel.MA.ModeProfile.Profile &lt;- 
[
Kernel.MA.ModeProfile.ModeProfileStruct{
    Location =&gt; 0.0,
    Mode =&gt; ModeEnum.ModeProfile.SH,
    Speed =&gt; BaseTypes.Speed.UseNV,
    Length =&gt; 4500.0,
    AcknLength =&gt; 0.0,
    SupervisionQualifier =&gt; Messages.Q_MAMODE.as_the_EOA__keeping_the_SvL_given_by_the_MA
}
]</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="No Sleeping signal"
 Guid="5bd78158-18a1-4e1a-a6ca-ed611dffac34"
>
<Comment>Remove the sleeping signal.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="No Sleeping signal"
 Guid="4a79009d-e2c9-4ce2-b42f-03824ea1b97e"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="7171b080-3c92-4249-96c9-f919cccd0443"
>TIU.SleepingRequested &lt;- False</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Power on"
 Guid="42733203-65f3-4791-b79c-64d55462ee25"
>
<Comment>Turn the power on.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Power on"
 Guid="74d94239-16dc-4bdb-993c-3fb8a52ce094"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="5933167f-fd17-4544-aba7-f007af0b1239"
>Kernel.PowerOn &lt;- True</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ETCS not isolated"
 Guid="ff742c72-d609-490e-bbc3-7ee8b5d5802c"
>
<Comment>Un-isolate the ETCS from the train.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ETCS not isolated"
 Guid="4ba849d4-9fa0-4e33-a324-ce75f2ba3a30"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="2f5c980c-1fa7-4108-bbd2-5a5244f1bc4a"
>TIU.ETCSIsolated &lt;- False</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="240"
 Y="270"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="SetUNMode"
 Guid="3e31a580-3b8b-4c84-aa91-29fa5aae9eb8"
>
<Comment>Procedure that sets the mode to NL and sets all data so maintain this mode.</Comment>
<Parameters>
<Parameter
 Type="Boolean"
 Name="HandleModeChange"
 Guid="6926f0a7-d349-47a0-9b72-f4795fafaad2"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set UN mode"
 Guid="ae69ef75-6d35-4ed7-aff7-527729ae842f"
>
<Comment>Set the mode and the previous mode (to protect from mode change activations) to UN.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set UN mode"
 Guid="c0a1b8e5-a3e5-49f8-9cc2-a6c7ca3287ea"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="2c5594ea-dd4a-4970-b41d-f3604dc4ea12"
>Kernel.Mode &lt;- ModeEnum.UN</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode"
 Guid="dc70e11f-5012-467e-b13c-19ac94b71e1f"
>
<Comment>If the parameter HandleModeChange is set to false, the previous mode is also set to UN to block the mode change effects.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode to UN"
 Guid="e617dccb-3eec-44de-b24f-06e7e1aa3d3e"
>
<Comment>If we do not want to have mode change effects, set the previous mode to UN.</Comment>
<PreConditions>
<PreCondition
 Guid="29a659f6-b59b-4be7-9a4e-bcd6896b71a6"
>NOT HandleModeChange</PreCondition></PreConditions>
<Actions>
<Action
 Guid="adb7741c-1d5b-44a6-a818-0f7b3d19a667"
>Kernel.Modes.ModeTransitions.PrevMode &lt;- ModeEnum.UN</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode to NP"
 Guid="3703d978-9902-4ad1-a4ea-7bca73ea9eee"
>
<Comment>If we do want to have mode change effects, set the previous mode to NP.</Comment>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="6f62f466-2f7b-49bb-b2ac-05e72fa43bba"
>Kernel.Modes.ModeTransitions.PrevMode &lt;- ModeEnum.NP</Action><Action
 Guid="27ab3cd8-9956-4442-a6c9-eb4586a06da6"
>DMI.MasterDMI().PreviousMode &lt;- ModeEnum.NP</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set level (if required)"
 Guid="202a290e-08a2-46fd-b01c-42d5f53849b9"
>
<Comment>Set the level to 0 if it is not already 0.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Level is not 0"
 Guid="8adb7a46-8ec1-4ff5-9409-aeeda9770c64"
>
<PreConditions>
<PreCondition
 Guid="c0065bb4-75ca-414c-be4f-0c9fa527bd1c"
>Kernel.Level.Value.Value != LevelEnum.L0</PreCondition></PreConditions>
<Actions>
<Action
 Guid="769b79ad-da69-49bd-8eb7-41deb2ac1ead"
>Kernel.SetLevel(LevelDataStruct{
        NTC =&gt; NID_NTC.NOT_APPLICABLE,
        Value =&gt; LevelEnum.L0
    }
)</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="DMI cab open"
 Guid="34348e74-eb9f-4ba1-938f-738f58659dd2"
>
<Comment>Open the DMI cab.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="DMI cab open"
 Guid="81d73654-508b-4b2b-9eac-810947a28254"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="b189c4e8-03eb-4809-b9b3-e633a9cc13b1"
>TIU.CabA.Desk1IsActive &lt;- True</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Validate the train position"
 Guid="c146b524-2ac5-4fab-9888-a3ca1d2e9c08"
>
<Comment>Validates the train position</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Validate the train position"
 Guid="d3b02201-9d4d-4471-bfab-73438e6a7d01"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="2fcb0fd6-16e9-4af0-ba68-c1dd4e7571a7"
>ValidateInformation(Kernel.TrainPosition.Position)</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="No Sleeping signal"
 Guid="7fa11f0c-9db3-4573-8a2c-2d36e0c1707d"
>
<Comment>Remove the sleeping signal.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="No Sleeping signal"
 Guid="f7608d81-b3e6-4563-a661-96edd7ea4aab"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="5ea7b0e9-2e50-4404-8309-787d3c461d7b"
>TIU.SleepingRequested &lt;- False</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Power on"
 Guid="dd5c7941-ae17-4045-8f10-8a37bd0ef6ce"
>
<Comment>Turn the power on.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Power on"
 Guid="089d03f9-7f00-4e93-b401-946905c2804a"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="a5f388b0-60d4-4d99-8cd9-f26b3a197afa"
>Kernel.PowerOn &lt;- True</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ETCS not isolated"
 Guid="6a4a038c-7de6-4448-a240-b07aaed7a293"
>
<Comment>Un-isolate the ETCS from the train.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ETCS not isolated"
 Guid="107b6bb0-2b5e-495d-a7e3-5009ade4f50b"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="b8f56ab2-7f07-48c4-afa6-92fd31415887"
>TIU.ETCSIsolated &lt;- False</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="680"
 Y="150"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="SetPSMode"
 Guid="20096fc8-2c56-4bc7-8980-50314f71913e"
>
<Comment>Procedure that sets the mode to PS and sets all data so maintain this mode.</Comment>
<Parameters>
<Parameter
 Type="Boolean"
 Name="HandleModeChange"
 Guid="88a56bc5-b395-4a70-86d4-caccaaf45125"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set PS mode"
 Guid="26b32a67-025c-4081-bfb6-a08c9001ec5b"
>
<Comment>Set the mode and the previous mode (to protect from mode change activations) to PS.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set PS mode"
 Guid="fd27325e-8877-4158-ad8c-8a71263d4df5"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="821bbb10-7c7b-4e31-99c4-7c284a5664dd"
>Kernel.Mode &lt;- ModeEnum.PS</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode"
 Guid="c9329b69-58fc-47dd-84b1-bfb656b44c18"
>
<Comment>If the parameter HandleModeCahnge is set to false, the previous mode is also set to PS to block the mode change effects.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode to PS"
 Guid="ab09c9ed-cb38-4957-ae57-6696bec76f1e"
>
<Comment>If we do not want to have mode change effects, set the previous mode to PS.</Comment>
<PreConditions>
<PreCondition
 Guid="478312cd-cb5d-41a3-a3f5-c9ee6bd524e4"
>NOT HandleModeChange</PreCondition></PreConditions>
<Actions>
<Action
 Guid="f20d501c-9ef1-437f-990f-efbcfa5a049d"
>Kernel.Modes.ModeTransitions.PrevMode &lt;- ModeEnum.PS</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode to NP"
 Guid="5e1483fe-d90b-4f9a-aaf8-71b05d7b4eb6"
>
<Comment>If we do want to have mode change effects, set the previous mode to NP.</Comment>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="23011c44-e897-4467-9665-85e4ed3eecae"
>Kernel.Modes.ModeTransitions.PrevMode &lt;- ModeEnum.NP</Action><Action
 Guid="5a986105-a021-44c9-b438-2daeaa20c921"
>DMI.MasterDMI().PreviousMode &lt;- ModeEnum.NP</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set level (if required)"
 Guid="e496112f-21a3-43f3-a10a-4289280feacf"
>
<Comment>Set the level if the current level would cause the mode to change.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Level is 0 or NTC"
 Guid="2ba25b9e-5916-40a7-a01b-b7cc8aaf1506"
>
<PreConditions>
<PreCondition
 Guid="8b9ed795-c110-472e-8610-d362c6031a71"
>Kernel.Level.Value.Value in [LevelEnum.L0, LevelEnum.LNTC]</PreCondition></PreConditions>
<Actions>
<Action
 Guid="94685606-5d4a-4db4-8b38-3d5e64bd1781"
>Kernel.SetLevel(LevelDataStruct{
        NTC =&gt; NID_NTC.NOT_APPLICABLE,
        Value =&gt; LevelEnum.L1
    }
)</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set gradient and SSP"
 Guid="64b3778e-70fe-4c1e-94e2-14ff3ece3c43"
>
<Comment>Set the SSP and gradient.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="No gradient or SSP"
 Guid="c3c16254-9b2e-4862-8859-03773f80e532"
>
<PreConditions>
<PreCondition
 Guid="f50cda01-e887-48ca-b016-f7dadb4e9721"
>Kernel.TrackDescription.Gradient.Gradients == []
  OR  
Kernel.TrackDescription.StaticSpeedProfile.SSP == []</PreCondition></PreConditions>
<Actions>
<Action
 Guid="3df39165-b3c8-4bb9-ad4e-94755d34f101"
>Testing.InitializeElementsForMA()</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set MA"
 Guid="82190a90-ab2d-428a-94f6-719bb846db42"
>
<Comment>Set the MA.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="No MA"
 Guid="bb43f150-48c1-4a19-b018-5d1bffc0f950"
>
<PreConditions>
<PreCondition
 Guid="bf1fb960-c629-4591-8dad-b165c3f149b7"
>Kernel.MA.MA == EMPTY</PreCondition></PreConditions>
<Actions>
<Action
 Guid="9eb67a45-67bd-4d13-9d03-7f292498db33"
>Kernel.MA.MA &lt;- Kernel.MA.MAStruct{
    TargetSpeed =&gt; 0.0,
    Sections =&gt; [],
    EndSection =&gt; Kernel.MA.EndSectionStruct{
        Length =&gt; 4500.0
    }
}</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="DMI cab closed"
 Guid="c8b91a12-3ab4-4db2-acd9-d019217618f8"
>
<Comment>Close the DMI cab.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="DMI cab closed"
 Guid="6d5650db-ee4b-42d7-99b8-e044e98f78fe"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="020576d4-680a-4012-a1f4-5b95d0814125"
>TIU.CabA.Desk1IsActive &lt;- False</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set SH mode profile"
 Guid="93ae8f45-caa0-4bd0-8647-a0cf64bd8032"
>
<Comment>Set a SH moe profile applicable at the train&apos;s current position.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set LS mode profile"
 Guid="11b056d9-7a85-4d0b-b819-e144c28a0c14"
>
<PreConditions>
<PreCondition
 Guid="79630179-277a-4503-91bc-e82516a10081"
>NOT THERE_IS modeProfile IN Kernel.MA.ModeProfile.Profile | modeProfile.Mode == ModeEnum.ModeProfile.SH AND Kernel.MA.ModeProfile.DistanceIsWithinAModeProfile(modeProfile)</PreCondition></PreConditions>
<Actions>
<Action
 Guid="892675a1-53dc-490e-a920-247ba98ed066"
>Kernel.MA.ModeProfile.Profile &lt;- 
[
Kernel.MA.ModeProfile.ModeProfileStruct{
    Location =&gt; 0.0,
    Mode =&gt; ModeEnum.ModeProfile.SH,
    Speed =&gt; BaseTypes.Speed.UseNV,
    Length =&gt; 4500.0,
    AcknLength =&gt; 0.0,
    SupervisionQualifier =&gt; Messages.Q_MAMODE.as_the_EOA__keeping_the_SvL_given_by_the_MA
}
]</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="No Sleeping signal"
 Guid="fa9d1063-8f91-4bb5-89ee-00e92a9572f2"
>
<Comment>Turn off the sleeping signal.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="No Sleeping signal"
 Guid="e2493bdc-1416-4863-95de-188d3a1ac676"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="5f2f16cc-0c5b-4921-b17a-f51a6fa94e67"
>TIU.SleepingRequested &lt;- False</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Power on"
 Guid="87a6596c-b45f-4e7e-894f-8db194ea8f23"
>
<Comment>Turn the power on.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Power on"
 Guid="0f4c08a0-e198-4026-90d0-86bea28a84f3"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="cccd84ed-f16a-4d16-b1a5-8213f1dab690"
>Kernel.PowerOn &lt;- True</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ETCS not isolated"
 Guid="af2374d7-4e5a-426f-aa30-da43169ce32f"
>
<Comment>Un-isolate the ETCS from the train.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ETCS not isolated"
 Guid="216d3389-f88b-4ede-85f5-aca4858cb6d4"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="b5d40646-e86b-4f18-bf4e-9a9b101b77e5"
>TIU.ETCSIsolated &lt;- False</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="570"
 Y="210"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="SetSLMode"
 Guid="79fba746-5fc7-477b-b035-7e5199808c03"
>
<Comment>Procedure that sets the mode to SL and sets all data so maintain this mode.</Comment>
<Parameters>
<Parameter
 Type="Boolean"
 Name="HandleModeChange"
 Guid="eff2982c-61db-4f9b-b8cc-9d7d1ff82603"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set SL mode"
 Guid="1872a9af-8438-43f2-a21b-9ddafaea9249"
>
<Comment>Set the mode and the previous mode (to protect from mode change activations) to SL.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set SL mode"
 Guid="667855d4-d026-4f6e-b696-cfdd8e3d5985"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="260f15c2-dac7-42f8-9560-55ef35c9580a"
>Kernel.Mode &lt;- ModeEnum.SL</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode"
 Guid="47eadf56-0bed-4a36-9e92-b21eef7aa0d9"
>
<Comment>If the parameter HandleModeChange is set to false, the previous mode is also set to SL to block the mode change effects.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode to SL"
 Guid="9ac3aed2-c7f4-4125-a7c2-26b298c79465"
>
<Comment>If we do not want to have mode change effects, set the previous mode to SL.</Comment>
<PreConditions>
<PreCondition
 Guid="96810d90-fcd1-4494-9d06-d9483442c4db"
>NOT HandleModeChange</PreCondition></PreConditions>
<Actions>
<Action
 Guid="67c81480-60aa-4266-9bd6-456f122577a2"
>Kernel.Modes.ModeTransitions.PrevMode &lt;- ModeEnum.SL</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode to NP"
 Guid="98b33bc2-3e7f-4232-9e4f-1689bf0d8bd6"
>
<Comment>If we do want to have mode change effects, set the previous mode to NP.</Comment>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="b6ced074-3fcf-4063-b9c8-c7eb51f3841c"
>Kernel.Modes.ModeTransitions.PrevMode &lt;- ModeEnum.NP</Action><Action
 Guid="a2826968-af83-4bfc-831c-ece9fd4d9354"
>DMI.MasterDMI().PreviousMode &lt;- ModeEnum.NP</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Desks are closed"
 Guid="e671acc3-f350-4857-b550-9826f18f1dbc"
>
<Comment>Close the desks.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Desks are closed"
 Guid="a40c0f6d-b11e-40a6-b363-8cf78f9c04e7"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="dadf3201-fb98-4e92-95f1-1cceee88d894"
>DMI.CabOfDMI(DMI.MasterDMI()).Desk1IsActive &lt;- False</Action><Action
 Guid="81214136-398b-4598-861d-5e987523d8d1"
>DMI.CabOfDMI(DMI.MasterDMI()).Desk2IsActive &lt;- False</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Sleeping input is received"
 Guid="eb39ee34-cd41-4960-9d99-1468957a648b"
>
<Comment>Send a sleeping intput.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Sleeping input received"
 Guid="69c2eadf-032c-4adc-a9d7-56502a5f0a51"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="60a529ba-2faa-468e-8047-d80d5859838d"
>TIU.SleepingRequested &lt;- True</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Power on"
 Guid="24a938e6-99ef-4b90-b838-53cd43acaff6"
>
<Comment>Turn on the power.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Power on"
 Guid="9258583b-73ae-4a5b-ae4c-925fe2dde33b"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="059906af-4c81-4f68-a327-3c64fae78c71"
>Kernel.PowerOn &lt;- True</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ETCS not isolated"
 Guid="225ba83a-6a1a-4b4f-9c9d-d34a9232c3e1"
>
<Comment>Un-isolate the ETCS from the train.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ETCS not isolated"
 Guid="b83fec0d-7a65-4444-aae8-42062a5ea638"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="2dbc2496-b52a-44a8-8748-0abd3a6e44e3"
>TIU.ETCSIsolated &lt;- False</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="240"
 Y="210"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="SetSBMode"
 Guid="d58d68ec-85fa-47da-ae6a-d78365fffc5e"
>
<Comment>Procedure that sets the mode to SB and sets all data so maintain this mode.</Comment>
<Parameters>
<Parameter
 Type="Boolean"
 Name="HandleModeChange"
 Guid="73ef50ff-616d-46d0-aa5e-d586902e9fd0"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set SB mode"
 Guid="ce2e06f3-cc23-4810-9065-13bcaf90717a"
>
<Comment>Set the mode and the previous mode (to protect from mode change activations) to SB.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set mode"
 Guid="49adfced-6e3e-4410-bfb6-8352833f0a20"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="e5a6f115-262c-493b-84c3-e72f2f98c850"
>Kernel.Mode &lt;- ModeEnum.SB</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode"
 Guid="5879e6ad-e170-4708-87d2-4c536ec7e625"
>
<Comment>If the parameter HandleModeCahnge is set to false, the previous mode is also set to SB to block the mode change effects.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode to SB"
 Guid="ed5c4549-6b47-46c1-8051-a1d51d3cf87b"
>
<Comment>If we do not want to have mode change effects, set the previous mode to SB.</Comment>
<PreConditions>
<PreCondition
 Guid="2350c9ef-0eb2-4b82-a97b-286234844857"
>NOT HandleModeChange</PreCondition></PreConditions>
<Actions>
<Action
 Guid="2983528d-25f4-4600-bb1e-f5a208315f81"
>Kernel.Modes.ModeTransitions.PrevMode &lt;- ModeEnum.SB</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode to NP"
 Guid="43a86f05-bb05-46bb-a3c8-d3f7af46c033"
>
<Comment>If we do want to have mode change effects, set the previous mode to NP.</Comment>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="258716af-7a22-474c-b7bc-af317c9c8574"
>Kernel.Modes.ModeTransitions.PrevMode &lt;- ModeEnum.NP</Action><Action
 Guid="3e1f73e3-f4b7-4964-bb23-f364c079ab9b"
>DMI.MasterDMI().PreviousMode &lt;- ModeEnum.NP</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="No MA on-board"
 Guid="95e1ac18-0768-43df-9446-42ee00741fe1"
>
<Comment>Remove the MA.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="No MA on-board"
 Guid="89c68c60-f085-47ae-9bca-378da10c1b8d"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="30e93051-c20f-43b3-b3a8-1ec8f5e2de9a"
>Kernel.MA.MA &lt;- EMPTY</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="No Sleeping signal"
 Guid="fd80a8aa-e6c4-463f-9134-b36050cfa408"
>
<Comment>Remove the sleeping signal.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="No Sleeping signal"
 Guid="a60aecc2-317a-40b2-b9f3-bb1563e93e70"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="eb3c34bd-e182-4c6e-8601-5a699d77e5e0"
>TIU.SleepingRequested &lt;- False</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Power on"
 Guid="5f1353f6-fc3a-4254-aa7f-02c8627d8ee5"
>
<Comment>Trun the power on.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Power on"
 Guid="cdc09dbe-0f2d-440d-bb87-01a2396b2d7b"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="bb1e4ced-352e-4eef-a7be-4db1757c6a7d"
>Kernel.PowerOn &lt;- True</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ETCS not isolated"
 Guid="f20892cc-53e2-416e-8641-0cd0ea25fab7"
>
<Comment>Un-isolate the ETCS from the train.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ETCS not isolated"
 Guid="744fd965-ef06-4271-b384-6f09ebb930b2"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="4ac11c8c-7f56-46b4-8fd2-605d7a1fb520"
>TIU.ETCSIsolated &lt;- False</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="130"
 Y="270"
 Width="100"
 Height="50"
 Pinned="TRUE"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="SetTRMode"
 Guid="98d8396e-19e3-4ac3-a5cf-b48101b2f20e"
>
<Comment>Procedure that sets the mode to TR and sets all data so maintain this mode.</Comment>
<Parameters>
<Parameter
 Type="Boolean"
 Name="HandleModeChange"
 Guid="c960b28f-633c-4d80-8407-74df03e3d521"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set TR mode"
 Guid="235393ed-74c7-401c-8ddc-a131a88c708c"
>
<Comment>Set the mode and the previous mode (to protect from mode change activations) to TR.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set TR mode"
 Guid="865380de-796b-4ecd-9dc5-ed0148e59663"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="8219f63f-9d53-44c0-b1e2-a11a85aad0be"
>Kernel.Mode &lt;- ModeEnum.TR</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode"
 Guid="a1a9e74a-480c-4127-8400-3e7a9dbe646d"
>
<Comment>If the parameter HandleModeChange is set to false, the previous mode is also set to TR to block the mode change effects.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode to TR"
 Guid="36ab5c56-50de-495f-8597-85cd3bffcc73"
>
<Comment>If we do not want to have mode change effects, set the previous mode to TR.</Comment>
<PreConditions>
<PreCondition
 Guid="3264a469-44cc-4085-af55-108d60c0daf5"
>NOT HandleModeChange</PreCondition></PreConditions>
<Actions>
<Action
 Guid="91ff1545-6803-4a92-bebc-4c97cf782d5e"
>Kernel.Modes.ModeTransitions.PrevMode &lt;- ModeEnum.TR</Action><Action
 Guid="c8f05693-c9ce-4476-b78e-8bc2a42b4cf8"
>Kernel.BrakeCommands.CommandEmergencyBrake(Kernel.BrakeCommands.BrakeReasonEnum.PermanentCommandInCurrentMode)</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode to NP"
 Guid="98e4348b-09bd-4bd5-ade1-ea204ea9dcb3"
>
<Comment>If we do want to have mode change effects, set the previous mode to NP.</Comment>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="e4273a59-2feb-43c4-9429-4d292e7fc504"
>Kernel.Modes.ModeTransitions.PrevMode &lt;- ModeEnum.NP</Action><Action
 Guid="adf7f120-35c8-42c3-a4bf-c49b8c11b33a"
>DMI.MasterDMI().PreviousMode &lt;- ModeEnum.NP</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="DMI cab open"
 Guid="d5d3c088-8f74-4935-9c9b-b3815e067f29"
>
<Comment>Open the DMI cab.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="DMI cab open"
 Guid="620baa3f-ed95-475e-b23a-db98db78031c"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="69ea5596-b0be-4d1f-b5f2-459ba4f73df1"
>TIU.CabA.Desk1IsActive &lt;- True</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Power on"
 Guid="f7fd8c48-28f7-4c52-b221-49d0eb8eade8"
>
<Comment>Turn the power on.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Power on"
 Guid="3e46ff5a-caae-414f-a735-0173a3f4f8ad"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="f6b5ec3a-8649-4b95-9ae3-83fe9a98ff18"
>Kernel.PowerOn &lt;- True</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ETCS not isolated"
 Guid="c3807a22-425b-4b05-80d6-14efd3525a9b"
>
<Comment>Un-isolate the ETCS from the train.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ETCS not isolated"
 Guid="681c9687-5720-4efa-bda3-810a02ee8b6e"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="705b88ad-c034-4666-a97e-148f982239d7"
>TIU.ETCSIsolated &lt;- False</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="20"
 Y="210"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="SetPTMode"
 Guid="4481c338-729d-455c-a965-dc029343633d"
>
<Comment>Procedure that sets the mode to PT and sets all data so maintain this mode.</Comment>
<Parameters>
<Parameter
 Type="Boolean"
 Name="HandleModeChange"
 Guid="aae676db-37cb-4a38-9a3e-8a19886c51a3"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set PT mode"
 Guid="e16e88bd-0425-436f-9fa1-ee508a0dff8b"
>
<Comment>Set the mode and the previous mode (to protect from mode change activations) to PT.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set PT mode"
 Guid="eb97e01d-b3f6-4270-b527-717aaafcfc5b"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="1c08d3a6-3706-4b2f-888c-828ea9a1eeab"
>Kernel.Mode &lt;- ModeEnum.PT</Action><Action
 Guid="39ac192f-a997-4520-ad5a-bf8f47a03ca5"
>Kernel.HandleModeChange &lt;- Kernel.HandleModeChangeSM.TrainTrip</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode"
 Guid="7d154ef2-1bd4-4921-9a92-78f75ebcc299"
>
<Comment>If the parameter HandleModeCahnge is set to false, the previous mode is also set to PT to block the mode change effects.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode to PT"
 Guid="d210a191-7d12-42ca-885c-0d7525de8d26"
>
<Comment>If we do not want to have mode change effects, set the previous mode to PT.</Comment>
<PreConditions>
<PreCondition
 Guid="2a981bfd-3f51-470a-b91b-bd45bef58960"
>NOT HandleModeChange</PreCondition></PreConditions>
<Actions>
<Action
 Guid="a3eb066d-81d3-4471-9adc-93a0c989486c"
>Kernel.Modes.ModeTransitions.PrevMode &lt;- ModeEnum.PT</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode to NP"
 Guid="909cfb80-3ac4-400b-94fa-0ee7582e5edb"
>
<Comment>If we do want to have mode change effects, set the previous mode to NP.</Comment>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="a9eecbd7-6796-4ad9-a93d-679764f97a1a"
>Kernel.Modes.ModeTransitions.PrevMode &lt;- ModeEnum.NP</Action><Action
 Guid="d8c05094-12b3-4b22-bbd5-54b5e324b185"
>DMI.MasterDMI().PreviousMode &lt;- ModeEnum.NP</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="DMI cab open"
 Guid="5d97032f-c2d5-4884-bbac-a22fc3b508ac"
>
<Comment>Open the DMI cab.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="DMI cab open"
 Guid="9f60b841-6133-463a-9c1d-d1961863e2ab"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="945df486-63dc-4ac9-905f-3a7503bccc57"
>TIU.CabA.Desk1IsActive &lt;- True</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Power on"
 Guid="d73274be-f0be-42c1-b96f-ce7c746c9c7e"
>
<Comment>Turn the power on.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Power on"
 Guid="2f050ac4-b392-4133-a11e-b140a2588f3c"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="fe016112-9e6f-4735-8cfb-2b3ebd3bd222"
>Kernel.PowerOn &lt;- True</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ETCS not isolated"
 Guid="ff9bd6b2-bfb3-40ca-ab78-8c93d842b1fc"
>
<Comment>Un-isolate the ETCS from the train.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ETCS not isolated"
 Guid="cf701ce4-c2a9-435b-81e7-9da02ce72a8d"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="a72d831d-eced-42a2-915a-e5b728712e15"
>TIU.ETCSIsolated &lt;- False</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="350"
 Y="210"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="SetSFMode"
 Guid="d6c892e7-f049-4524-aeee-cf8201d9e93e"
>
<Comment>Procedure that sets the mode to SF and sets all data so maintain this mode.</Comment>
<Parameters>
<Parameter
 Type="Boolean"
 Name="HandleModeChange"
 Guid="3c25c8bb-87a6-4b58-beb1-42bb663feb47"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set SF mode"
 Guid="167fb6e8-2951-4a7b-a111-cfedb2ada1e6"
>
<Comment>Set the mode and the previous mode (to protect from mode change activations) to SF.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set SF mode"
 Guid="9d06cd04-5cbe-40a8-a7ed-3a418bbede26"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="f985d005-afc5-4b21-8c10-33f5fefa510b"
>Kernel.Mode &lt;- ModeEnum.SF</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode"
 Guid="727a5e04-2acf-4067-a2ee-b82eee156af4"
>
<Comment>If the parameter HandleModeCahnge is set to false, the previous mode is also set to SF to block the mode change effects.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode to SF"
 Guid="bd8f8300-909f-4f56-91d8-805db5310b4e"
>
<Comment>If we do not want to have mode change effects, set the previous mode to SF.</Comment>
<PreConditions>
<PreCondition
 Guid="ebfee60e-48ea-48cf-94f9-8f3658fab6a2"
>NOT HandleModeChange</PreCondition></PreConditions>
<Actions>
<Action
 Guid="016f5221-e734-47af-a33c-cacb902cef67"
>Kernel.Modes.ModeTransitions.PrevMode &lt;- ModeEnum.SF</Action><Action
 Guid="ba060028-274d-4108-878f-d6278d29cb96"
>Kernel.BrakeCommands.CommandEmergencyBrake(Kernel.BrakeCommands.BrakeReasonEnum.PermanentCommandInCurrentMode)</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode to NP"
 Guid="b0b7f132-40bb-4ccf-abe4-7207fae16f8c"
>
<Comment>If we do want to have mode change effects, set the previous mode to NP.</Comment>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="e80cfa70-d6a5-4435-a1b3-1f4693b6f9a7"
>Kernel.Modes.ModeTransitions.PrevMode &lt;- ModeEnum.NP</Action><Action
 Guid="a2dad492-661c-42ce-ac5b-8e7bf6f23719"
>DMI.MasterDMI().PreviousMode &lt;- ModeEnum.NP</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Power on"
 Guid="a5885d7a-32a7-4bf3-ac1a-ccd39312c113"
>
<Comment>Turn the power on.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Power on"
 Guid="99e37edb-b81f-4b0f-82ae-ae63a700cb80"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="fe87c0a9-9f24-456a-8a46-28a62d96530e"
>Kernel.PowerOn &lt;- True</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ETCS not isolated"
 Guid="ef31f9ce-73dd-442a-97a6-87dd712ba0b4"
>
<Comment>Un-isolate the ETCS from the train.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ETCS not isolated"
 Guid="e97920ad-2e66-4e0d-bd9c-2d60930c8b30"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="a24e14c7-55f9-4a79-9239-b8330b42de77"
>TIU.ETCSIsolated &lt;- False</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="130"
 Y="150"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="SetISMode"
 Guid="c4acf7e9-b54d-4df3-834a-a69a9f06488e"
>
<Comment>Procedure that sets the mode to IS and sets all data so maintain this mode.</Comment>
<Parameters>
<Parameter
 Type="Boolean"
 Name="HandleModeChange"
 Guid="7671290b-81d3-4716-a730-ab87156b92b5"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set IS mode"
 Guid="3a0f7682-7b7c-43f4-bdff-b307ea64e20a"
>
<Comment>Set the mode and the previous mode (to protect from mode change activations) to IS.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set IS mode"
 Guid="bad3aa92-6e11-431d-b384-8ae9092bbe8e"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="62865b39-ba0a-4ffa-94cc-34a168fc4402"
>Kernel.Mode &lt;- ModeEnum.IS</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode"
 Guid="ca624dee-0818-4750-ab41-f6aa09635a73"
>
<Comment>If the parameter HandleModeCahnge is set to false, the previous mode is also set to IS to block the mode change effects.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode to IS"
 Guid="9cfa7375-7cfa-416a-bd8b-3150c7eca298"
>
<Comment>If we do not want to have mode change effects, set the previous mode to IS.</Comment>
<PreConditions>
<PreCondition
 Guid="bb241c9e-0858-43ca-8f30-cddf969e0cfe"
>NOT HandleModeChange</PreCondition></PreConditions>
<Actions>
<Action
 Guid="6e9eb4c0-bf07-495b-a8e6-172ad074382b"
>Kernel.Modes.ModeTransitions.PrevMode &lt;- ModeEnum.IS</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode to NP"
 Guid="ab2884c9-f9b8-432a-908e-701974de36f4"
>
<Comment>If we do want to have mode change effects, set the previous mode to NP.</Comment>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="1a135845-2316-458b-a64f-f64a1965a521"
>Kernel.Modes.ModeTransitions.PrevMode &lt;- ModeEnum.NP</Action><Action
 Guid="4a5a6aa3-c350-4679-9e30-bc2930efcdfb"
>DMI.MasterDMI().PreviousMode &lt;- ModeEnum.NP</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Power on"
 Guid="bac641ac-680d-43f9-8563-560d6661ac5b"
>
<Comment>Switch the power on.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Power on"
 Guid="88f90654-0d8c-400d-946d-f11c93dc4691"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="e735051b-ee94-4cc0-8e21-936e3e8b71c1"
>Kernel.PowerOn &lt;- True</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ETCS isolated"
 Guid="897539cc-5dce-4f84-a0f1-a2073dea179d"
>
<Comment>Isolate the ETCS.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ETCS isolated"
 Guid="d98aafae-4b44-4ac2-aacf-66c136819b5b"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="0466c547-0b1c-45de-9636-560da9bbea04"
>TIU.ETCSIsolated &lt;- True</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set procedure"
 Guid="68d6d949-9d4d-4e8d-94b1-bbce6a1555ef"
>
<Comment>Set HandleModeChange to NoProcedure.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set procedure"
 Guid="6683e818-79c8-4e74-946e-809f059362f6"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="27bd4bdf-82e3-4e26-bbcc-358c992e0be4"
>Kernel.HandleModeChange &lt;- Kernel.HandleModeChangeSM.NoProcedure</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="680"
 Y="210"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="SetSNMode"
 Guid="9abbd0bc-2bf7-4a38-bcd2-f4d4372a8e57"
>
<Comment>Procedure that sets the mode to SN and sets all data so maintain this mode.</Comment>
<Parameters>
<Parameter
 Type="Boolean"
 Name="HandleModeChange"
 Guid="ad0f3516-59d1-4771-bbcf-b6b9edc5b1a1"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set SN mode"
 Guid="6eb7c5d0-93df-4d59-b400-1ca504d4f711"
>
<Comment>Set the mode and the previous mode (to protect from mode change activations) to SN.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set SN mode"
 Guid="c10a6746-105c-4e0a-94b3-0b6db6d91c05"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="9d34974f-3bb4-4617-a3a5-ef6e992b6167"
>Kernel.Mode &lt;- ModeEnum.SN</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode"
 Guid="140d30da-1f50-4eab-ae9b-8b4ea27926c8"
>
<Comment>If the parameter HandleModeChange is set to false, the previous mode is also set to SN to block the mode change effects.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode to SN"
 Guid="bdc3a519-00b7-41e6-8117-5c29e6cc1f09"
>
<Comment>If we do not want to have mode change effects, set the previous mode to SN.</Comment>
<PreConditions>
<PreCondition
 Guid="581a5a3e-cb21-4655-83d2-f770ce89287b"
>NOT HandleModeChange</PreCondition></PreConditions>
<Actions>
<Action
 Guid="e917c724-9f22-4469-b558-c003a65ecdc2"
>Kernel.Modes.ModeTransitions.PrevMode &lt;- ModeEnum.SN</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode to NP"
 Guid="61cecaeb-60ef-4317-a5da-a1bc19632239"
>
<Comment>If we do want to have mode change effects, set the previous mode to NP.</Comment>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="d1df9299-b33d-4c3c-8247-f7d49d6cd559"
>Kernel.Modes.ModeTransitions.PrevMode &lt;- ModeEnum.NP</Action><Action
 Guid="f46983da-d28e-4769-8c59-1da0c51fd242"
>DMI.MasterDMI().PreviousMode &lt;- ModeEnum.NP</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set level (if required)"
 Guid="1d5c5cde-d8bb-405f-bc7c-f71987d02335"
>
<Comment>Set the level to NTC, if it is not currently NTC.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Level is 0 or NTC"
 Guid="3424be75-bae6-4e5a-82f2-e3bf115853ad"
>
<PreConditions>
<PreCondition
 Guid="ee9c5df6-2bb6-42e1-8309-b07b6b288de6"
>Kernel.Level.Value.Value != LevelEnum.LNTC</PreCondition></PreConditions>
<Actions>
<Action
 Guid="ceee01fd-03ce-46ee-8d88-9cfe43ee6cc1"
>Kernel.SetLevel(LevelDataStruct{
        NTC =&gt; 1,
        Value =&gt; LevelEnum.LNTC
    }
)</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="DMI cab open"
 Guid="5e182b93-5345-4012-90e9-0890afeb5618"
>
<Comment>Open the DMI cab.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="DMI cab open"
 Guid="2378736c-a36f-45c8-bb18-4e4dbee9df89"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="19944189-3681-47d9-b64e-9edce792d719"
>TIU.CabA.Desk1IsActive &lt;- True</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Validate the train position"
 Guid="28b602cd-e4f8-465d-9dc4-aae98d968229"
>
<Comment>Validates the train position</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Validate the train position"
 Guid="988e6594-4247-45fd-912f-91e10070cf08"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="a88bdc60-59fb-4033-9ab8-60f19858c3fc"
>ValidateInformation(Kernel.TrainPosition.Position)</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="No Sleeping signal"
 Guid="d9283aec-be3d-4647-8c99-fd4b03bcb572"
>
<Comment>Remove the sleeping signal.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="No Sleeping signal"
 Guid="f5f4c376-c930-46e0-95b1-ba628e5e75b1"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="f970e7e5-b23e-43ff-b422-f863da275e38"
>TIU.SleepingRequested &lt;- False</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Power on"
 Guid="746034e4-f341-4725-bc4d-6b6c912490a8"
>
<Comment>Turn the power on.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Power on"
 Guid="7e3435de-4f53-481b-8ba5-fed76b3ff651"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="6d70c115-f92b-440f-92b2-79c4b552cae9"
>Kernel.PowerOn &lt;- True</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ETCS not isolated"
 Guid="c8de433f-cfa0-412d-be5a-e3069f698010"
>
<Comment>Un-isolate the ETCS from the train.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ETCS not isolated"
 Guid="f8e80048-9c47-47c9-a3c6-b6fb46fbf7b5"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="1884d7dc-d84b-44c5-9dfa-97b571e9a339"
>TIU.ETCSIsolated &lt;- False</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="460"
 Y="150"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="SetNPMode"
 Guid="4ddcaaab-20ca-4199-9a5f-07a1ca5d7e3b"
>
<Comment>Procedure that sets the mode to NP and sets all data so maintain this mode.</Comment>
<Parameters>
<Parameter
 Type="Boolean"
 Name="HandleModeChange"
 Guid="2df9c72f-1816-4beb-bc6c-87a070e1dadd"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set NP mode"
 Guid="e7e28a4e-3b6a-4add-9a8c-2e90c2e223b3"
>
<Comment>Set the mode and the previous mode (to protect from mode change activations) to NP.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set NP mode"
 Guid="4f58283d-433b-48a0-85a0-87053ff0ba14"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="ef9fc55f-d1cf-4975-b093-fb771f8614f2"
>Kernel.Mode &lt;- ModeEnum.NP</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode"
 Guid="0c5e6754-e048-4e42-85e4-67d8fd76c868"
>
<Comment>If the parameter HandleModeCahnge is set to false, the previous mode is also set to NP to block the mode change effects.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode to NP"
 Guid="8ebdfc9f-c2c5-4b2e-b752-d67355b6c413"
>
<Comment>If we do not want to have mode change effects, set the previous mode to NP.</Comment>
<PreConditions>
<PreCondition
 Guid="32a9adb4-3245-4c1e-b95c-67069794cf4b"
>NOT HandleModeChange</PreCondition></PreConditions>
<Actions>
<Action
 Guid="96e5e078-f5b9-41cc-a2f1-93eba1b05570"
>Kernel.Modes.ModeTransitions.PrevMode &lt;- ModeEnum.NP</Action><Action
 Guid="e6983aab-b519-4cb7-a77c-73b9922a4ed3"
>Kernel.BrakeCommands.CommandEmergencyBrake(Kernel.BrakeCommands.BrakeReasonEnum.PermanentCommandInCurrentMode)</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode to SB"
 Guid="76ad682f-0281-40f8-a3f7-b6e703316efa"
>
<Comment>If we do want to have mode change effects, set the previous mode to SB.</Comment>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="bee8c964-228c-47a6-bac4-c12d12d32541"
>Kernel.Modes.ModeTransitions.PrevMode &lt;- ModeEnum.SB</Action><Action
 Guid="4041729a-0ee3-4def-ae1c-abb0cc84cedd"
>DMI.MasterDMI().PreviousMode &lt;- ModeEnum.SB</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Power off"
 Guid="f786e85c-b3a0-44e5-9e1e-f3d9dcfb6d15"
>
<Comment>Turn the power off.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Power on"
 Guid="e8942ff7-264d-4af7-8822-d1fc343319f0"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="5659c98f-6a31-4223-acc9-a2b28a50e1e1"
>Kernel.PowerOn &lt;- False</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ETCS not isolated"
 Guid="e877f8b4-15f2-4b7b-b03a-f72159d6da6b"
>
<Comment>Un-isolate the ETCS from the train.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ETCS not isolated"
 Guid="13315b3d-52d0-4862-bfe2-4bfa9ec43953"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="f0fb213d-8f70-4981-a54d-3c2b7841a476"
>TIU.ETCSIsolated &lt;- False</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="350"
 Y="150"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="SetNLMode"
 Guid="eb11bfd5-3fb4-4a6d-8247-04a423f4b5ad"
>
<Comment>Procedure that sets the mode to NL and sets all data so maintain this mode.</Comment>
<Parameters>
<Parameter
 Type="Boolean"
 Name="HandleModeChange"
 Guid="1676187f-6d45-464f-9c32-390f5584512e"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set NL mode"
 Guid="09c02121-9785-48b5-afb1-9a7deef051ba"
>
<Comment>Set the mode and the previous mode (to protect from mode change activations) to NL.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set NL mode"
 Guid="19fb8c13-eb91-4180-afcb-93d52f70f694"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="796568d9-37bb-419b-bde8-5367fe92cc4d"
>Kernel.Mode &lt;- ModeEnum.NL</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode"
 Guid="c07600e2-4182-459b-afb5-6dc4657bebd9"
>
<Comment>If the parameter HandleModeCahnge is set to false, the previous mode is also set to NL to block the mode change effects.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode to NL"
 Guid="3b73c4b6-5cb1-42eb-aa1b-c39ab4fc138a"
>
<Comment>If we do not want to have mode change effects, set the previous mode to NL.</Comment>
<PreConditions>
<PreCondition
 Guid="a78ab73b-65c9-4c76-a953-58b97fdc9d61"
>NOT HandleModeChange</PreCondition></PreConditions>
<Actions>
<Action
 Guid="084a67aa-2e91-485d-a22e-f1d649b0f0e1"
>Kernel.Modes.ModeTransitions.PrevMode &lt;- ModeEnum.NL</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode to NP"
 Guid="d98e8b75-2151-4e4a-8e3b-8822222c7e1a"
>
<Comment>If we do want to have mode change effects, set the previous mode to NP.</Comment>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="e6a92b40-a69c-4fe5-854e-80031524c196"
>Kernel.Modes.ModeTransitions.PrevMode &lt;- ModeEnum.NP</Action><Action
 Guid="26fb5fd7-cf73-48b9-9bc6-5cc59edd61df"
>DMI.MasterDMI().PreviousMode &lt;- ModeEnum.NP</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="DMI cab open"
 Guid="48e4e92e-3529-4f4e-9228-ea46545e2646"
>
<Comment>Open the DMI cab.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="DMI cab open"
 Guid="7763bee5-4fef-4302-9c3f-6fb230f1e553"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="60a90a3e-b49e-4876-a997-18f1cb68f1ec"
>TIU.CabA.Desk1IsActive &lt;- True</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Power on"
 Guid="88ae30fb-9747-4849-886a-76ee6042a99a"
>
<Comment>Switch the power on.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Power on"
 Guid="7ec912b2-10c3-4413-b81a-095f3e7096cd"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="4eb4c8ad-e14d-48d2-aa09-08c4c65f2921"
>Kernel.PowerOn &lt;- True</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ETCS not isolated"
 Guid="5790dd9f-a506-4fa7-993b-44c6dbd42e79"
>
<Comment>Un-isolate the ETCS from the train.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ETCS not isolated"
 Guid="041e8386-3e02-4da1-b60d-6940342fef7b"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="db8c326d-5adb-4d33-bbfa-51355cf89d08"
>TIU.ETCSIsolated &lt;- False</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Non leading input"
 Guid="5423fbef-ddad-401a-bde8-67b06786ca3f"
>
<Comment>Set the non-leading input.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Non leading input"
 Guid="5221386e-dba5-43dd-b0fc-a8daefbadbc2"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="8f711aa7-7203-4de4-95f1-4c43c1a6254d"
>TIU.NonLeadingPermitted &lt;- True</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set procedure"
 Guid="2c285bca-9201-4c7a-a57d-a064a80426d1"
>
<Comment>Set HandleModeChange to NoProcedure.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set procedure"
 Guid="87e860a1-9f54-45aa-8b9a-abf376faec83"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="b1502d39-0ecc-4061-b5d2-1f2bb3cebf53"
>Kernel.HandleModeChange &lt;- Kernel.HandleModeChangeSM.NoProcedure</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="130"
 Y="210"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="SetRVMode"
 Guid="0a9100cb-5bfa-4a3f-85d9-ab268296567a"
>
<Comment>Procedure that sets the mode to RV and sets all data so maintain this mode.</Comment>
<Parameters>
<Parameter
 Type="Boolean"
 Name="HandleModeChange"
 Guid="09259e83-7359-4d65-b107-73ca88654da6"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set RV mode"
 Guid="959d81fd-867a-4685-9808-15597a47e56b"
>
<Comment>Set the mode and the previous mode (to protect from mode change activations) to RV.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set RV mode"
 Guid="285dc887-b11e-4e77-8f13-822c95ec5214"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="6c4a7ad9-00c5-48f2-9ca2-4d0cc16a9deb"
>Kernel.Mode &lt;- ModeEnum.RV</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode"
 Guid="fbd378bb-5830-44cf-8a48-f2015c264db2"
>
<Comment>If the parameter HandleModeCahnge is set to false, the previous mode is also set to RV to block the mode change effects.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode to RV"
 Guid="78d6d2ec-a047-4744-a886-57f89cc7528d"
>
<Comment>If we do not want to have mode change effects, set the previous mode to RV.</Comment>
<PreConditions>
<PreCondition
 Guid="2439538a-0d31-4974-a2a9-beb92863e373"
>NOT HandleModeChange</PreCondition></PreConditions>
<Actions>
<Action
 Guid="20cc6c55-0cef-4e3e-8cbd-1930bf899ecb"
>Kernel.Modes.ModeTransitions.PrevMode &lt;- ModeEnum.RV</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Set previous mode to NP"
 Guid="b17a9c35-8003-4892-abbd-9d6d84fc104d"
>
<Comment>If we do want to have mode change effects, set the previous mode to NP.</Comment>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="d12013f1-f5fc-46d8-9bc1-d5a2c2788b32"
>Kernel.Modes.ModeTransitions.PrevMode &lt;- ModeEnum.NP</Action><Action
 Guid="9408e78c-40fb-41f0-946b-bfba9da60a91"
>DMI.MasterDMI().PreviousMode &lt;- ModeEnum.NP</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="DMI cab open"
 Guid="01280127-f0fe-4cab-a005-1ce07f15072b"
>
<Comment>Open the DMI cab.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="DMI cab open"
 Guid="c441e90c-ec38-43e0-ad8d-d04340745b85"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="30c16573-0a8a-4093-a480-d76056c79823"
>TIU.CabA.Desk1IsActive &lt;- True</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Power on"
 Guid="ff560e13-5ba8-43fe-8a70-31edb838bfe1"
>
<Comment>Turn the power on.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Power on"
 Guid="05db15ba-90d1-40a2-bcff-7d402937b6d9"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="a9ff126d-9fa5-4f08-959e-81c6ed75d7c9"
>Kernel.PowerOn &lt;- True</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Validate the train position"
 Guid="4f67e3fe-d0bc-4e13-9343-f122a1168c33"
>
<Comment>Validates the train position</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Validate the train position"
 Guid="2ca22c7c-4165-4bf2-aff3-4d13f46d7bd3"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="cb66e7be-fb20-4c98-93f4-209420a78c13"
>ValidateInformation(Kernel.TrainPosition.Position)</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ETCS not isolated"
 Guid="a8cc5ea0-768f-451c-8512-74e94138890c"
>
<Comment>Un-isomate the ETCS from the train.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ETCS not isolated"
 Guid="193f8ab5-8d3e-459a-b98b-a1ebe9326e1d"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="355c3c92-27b6-439a-a783-9b331301f219"
>TIU.ETCSIsolated &lt;- False</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="240"
 Y="60"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="InitializeFixedValues"
 Guid="91326901-7ff5-4e7b-84b4-cb373482ce11"
>
<Comment>Initializes the test environment with a set of fixed values as specified in ERA_Braking_cuvers_tool_v3.0.xlsm.</Comment>
<Rules>
<Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Initialize fixed values"
 Guid="2f342616-f08b-4f2a-ad76-0df5ca5c851f"
>
<Comment>Initializes the test environment with a set of fixed values as specified in ERA_Braking_cuvers_tool_v3.0.xlsm.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Initialize fixed values"
 Guid="f3cba488-1191-4969-8a47-cca7f31a3b48"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="7e85e74c-9534-4ea0-b6c0-4f897f274950"
>Kernel.SpeedAndDistanceMonitoring.CeilingSpeedMonitoring.dV_ebi_max &lt;- 15.0</Action><Action
 Guid="0a9ce767-5ef2-4720-a120-474f637e9aa8"
>Kernel.SpeedAndDistanceMonitoring.CeilingSpeedMonitoring.dV_ebi_min &lt;- 7.5</Action><Action
 Guid="ecdc9d99-2b1a-4a23-aae9-0accb278f9bf"
>Kernel.SpeedAndDistanceMonitoring.CeilingSpeedMonitoring.dV_sbi_max &lt;- 10.0</Action><Action
 Guid="806278c7-48bf-4823-90f0-8d281f434936"
>Kernel.SpeedAndDistanceMonitoring.CeilingSpeedMonitoring.dV_sbi_min &lt;- 5.5</Action><Action
 Guid="58b75e15-4729-4944-9cac-d6db49b0701b"
>Kernel.SpeedAndDistanceMonitoring.CeilingSpeedMonitoring.dV_warning_max &lt;- 5.0</Action><Action
 Guid="e0499a82-9634-411e-ac8e-fa39db72a54d"
>Kernel.SpeedAndDistanceMonitoring.CeilingSpeedMonitoring.dV_warning_min &lt;- 4.0</Action><Action
 Guid="cfe8e4de-c889-462f-bfb6-2792f3fe59c7"
>Kernel.SpeedAndDistanceMonitoring.CeilingSpeedMonitoring.V_ebi_max &lt;- 210.0</Action><Action
 Guid="f912e407-dafd-42d1-9a7b-f98b7e9e943a"
>Kernel.SpeedAndDistanceMonitoring.CeilingSpeedMonitoring.V_ebi_min &lt;- 110.0</Action><Action
 Guid="fb2743c8-e7ee-4eb8-be74-4bd33422c371"
>Kernel.SpeedAndDistanceMonitoring.CeilingSpeedMonitoring.V_sbi_max &lt;- 210.0</Action><Action
 Guid="0dd5306d-48aa-4790-805f-4fbe295deb87"
>Kernel.SpeedAndDistanceMonitoring.CeilingSpeedMonitoring.V_sbi_min &lt;- 110.0</Action><Action
 Guid="409e3c78-979d-431f-bb37-602cc97c66ad"
>Kernel.SpeedAndDistanceMonitoring.CeilingSpeedMonitoring.V_warning_max &lt;- 140.0</Action><Action
 Guid="6f61e8bc-03b3-43c8-b319-472661e27709"
>Kernel.SpeedAndDistanceMonitoring.CeilingSpeedMonitoring.V_warning_min &lt;- 110.0</Action><Action
 Guid="08b1cd8b-424e-4190-a9cd-a6e0973c09be"
>Kernel.SpeedAndDistanceMonitoring.PreIndicationLocation.T_preindication &lt;- 7.0</Action><Action
 Guid="437480c3-c7d2-4e2b-940b-fde43f2f88a0"
>Kernel.SpeedAndDistanceMonitoring.TargetSpeedMonitoring.T_driver &lt;- 4.0</Action><Action
 Guid="b35cebb9-6122-4972-af90-d63324279878"
>Kernel.SpeedAndDistanceMonitoring.TargetSpeedMonitoring.T_warning &lt;- 2.0</Action><Action
 Guid="684b0de2-256d-47f1-9441-cd735eb4fe6d"
>Kernel.TrackDescription.Gradient.M_rotating_max &lt;- 15.0</Action><Action
 Guid="528a7dba-991e-4eed-ad14-de3bc5391e83"
>Kernel.TrackDescription.Gradient.M_rotating_min &lt;- 2.0</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="350"
 Y="60"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="InitializeTrainData"
 Guid="47ef17c8-315c-4519-a3c6-4ad190fb967d"
>
<Comment>Initializes the different components of the train data for the test environment.</Comment>
<Rules>
<Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="TrainData"
 Guid="62c122e1-b783-47a7-b65f-60a1ef8997f4"
>
<Comment>Initialization of the train data.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="TrainData"
 Guid="e37e14be-eeca-4887-8d9a-143fcdb02cd8"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="6991fbd7-808c-47ef-92ae-35f3c3d9a8bb"
>InitializeTrainData_ERA()</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="BrakingParameters"
 Guid="8ad2f60c-51c5-4246-9c5b-3f5d40b252af"
>
<Comment>Initialization of the braking parameters.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="BrakingParameters"
 Guid="82b4c2fa-0b65-4194-811b-879feaa6db04"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="4d6003d8-6380-41b4-a175-a0fcbc9eeae4"
>InitializeBrakingParameters()</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="BNS"
 Guid="7f325cd7-fc5e-4b96-a831-2c9f6a3af9df"
>
<Comment>Initialization of the BNS.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="BNS"
 Guid="0d77b94f-090e-4a5b-b5ea-b877804672f7"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="cee30602-7806-4cce-a5a2-d6fd6b303a79"
>InitializeTrainData_BNS()</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="570"
 Y="60"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="InitializeTrainData_ERA"
 Guid="71722c61-36f8-4c73-9471-14eb436d205a"
>
<Comment>Initializes the test environment with the train data as specified in ERA_Braking_cuvers_tool_v3.0.xlsm.</Comment>
<Rules>
<Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Train data"
 Guid="6cdfcaa4-fa2b-4c22-92d0-f81997e116a0"
>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Train data"
 Guid="5cb26d74-95fa-46db-b136-e74191e516e4"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="3c40c469-55cf-4e97-8742-74f6f25d4e1d"
>BTM.ActiveAntennaPosition &lt;- 5.0</Action><Action
 Guid="7d442961-2150-4931-ac66-b8c407eac3e6"
>Kernel.TrainData.BrakingParameters.ContributionOfSpecialBrakeIsAllowed &lt;- True</Action><Action
 Guid="d6a65106-9d66-4565-880a-3816d15bd453"
>Kernel.TrainData.TrainData.Value.BrakePosition &lt;- Kernel.TrainData.BrakingParameters.BrakePositionsEnum.PassengerTrainInP</Action><Action
 Guid="b46ed63b-c019-4a10-a125-38155e0e146e"
>Kernel.TrainData.TrainData.Value.EBModels &lt;- Kernel.TrainData.BrakingParameters.EBModelSetStruct
{
    ModelSet =&gt; Kernel.TrainData.BrakingParameters.BrakingModelSetStruct{
    EddyCurrent =&gt; Kernel.TrainData.BrakingParameters.BrakingModelStruct{
        Val0 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
            SpeedStep =&gt; 0.0,
            Acceleration =&gt; 1.07
        },
        Val1 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
            SpeedStep =&gt; 160.0,
            Acceleration =&gt; 0.8
        },
        Val2 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
            SpeedStep =&gt; BaseTypes.Speed.Infinity,
            Acceleration =&gt; 0.0
        }
    },
    Magnetic =&gt; Kernel.TrainData.BrakingParameters.BrakingModelStruct{
        Val0 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
            SpeedStep =&gt; 0.0,
            Acceleration =&gt; 1.07
        },
        Val1 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
            SpeedStep =&gt; 160.0,
            Acceleration =&gt; 0.8
        },
        Val2 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
            SpeedStep =&gt; BaseTypes.Speed.Infinity,
            Acceleration =&gt; 0.0
        }
    },
    Regenerative =&gt; Kernel.TrainData.BrakingParameters.BrakingModelStruct{
        Val0 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
            SpeedStep =&gt; 0.0,
            Acceleration =&gt; 1.07
        },
        Val1 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
            SpeedStep =&gt; 160.0,
            Acceleration =&gt; 0.8
        },
        Val2 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
            SpeedStep =&gt; BaseTypes.Speed.Infinity,
            Acceleration =&gt; 0.0
        }
    },
    EddyCurrent_Magnetic =&gt; Kernel.TrainData.BrakingParameters.BrakingModelStruct{
        Val0 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
            SpeedStep =&gt; 0.0,
            Acceleration =&gt; 1.07
        },
        Val1 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
            SpeedStep =&gt; 160.0,
            Acceleration =&gt; 0.8
        },
        Val2 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
            SpeedStep =&gt; BaseTypes.Speed.Infinity,
            Acceleration =&gt; 0.0
        }
    },
    EddyCurrent_Regenerative =&gt; Kernel.TrainData.BrakingParameters.BrakingModelStruct{
        Val0 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
            SpeedStep =&gt; 0.0,
            Acceleration =&gt; 1.07
        },
        Val1 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
            SpeedStep =&gt; 160.0,
            Acceleration =&gt; 0.8
        },
        Val2 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
            SpeedStep =&gt; BaseTypes.Speed.Infinity,
            Acceleration =&gt; 0.0
        }
    },
    Magnetic_Regenerative =&gt; Kernel.TrainData.BrakingParameters.BrakingModelStruct{
        Val0 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
            SpeedStep =&gt; 0.0,
            Acceleration =&gt; 1.07
        },
        Val1 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
            SpeedStep =&gt; 160.0,
            Acceleration =&gt; 0.8
        },
        Val2 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
            SpeedStep =&gt; BaseTypes.Speed.Infinity,
            Acceleration =&gt; 0.0
        }
    },
    EddyCurrent_Magnetic_Regenerative =&gt; Kernel.TrainData.BrakingParameters.BrakingModelStruct{
        Val0 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
            SpeedStep =&gt; 0.0,
            Acceleration =&gt; 1.07
        },
        Val1 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
            SpeedStep =&gt; 160.0,
            Acceleration =&gt; 0.8
        },
        Val2 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
            SpeedStep =&gt; BaseTypes.Speed.Infinity,
            Acceleration =&gt; 0.0
        }
    },
    No_Special_Brakes =&gt; Kernel.TrainData.BrakingParameters.BrakingModelStruct{
        Val0 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
            SpeedStep =&gt; 0.0,
            Acceleration =&gt; 1.07
        },
        Val1 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
            SpeedStep =&gt; 160.0,
            Acceleration =&gt; 0.8
        },
        Val2 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
            SpeedStep =&gt; BaseTypes.Speed.Infinity,
            Acceleration =&gt; 0.0
        }
    }
},
    Kdry_rstValuesSet =&gt; Kernel.TrainData.BrakingParameters.Kdry_rstValuesSetStruct{},
    Kwet_rstValuesSet =&gt; Kernel.TrainData.BrakingParameters.Kwet_rstValuesSetStruct{}
}</Action><Action
 Guid="fe0d9359-7fb8-4b61-ba53-4010e0266b0e"
>Kernel.TrainData.TrainData.Value.M_rotating_nom &lt;- Percentage.NA</Action><Action
 Guid="40725ae5-5b0f-4676-86bf-40f90ae2f801"
>Kernel.TrainData.TrainData.Value.MaximumSpeed &lt;- 220.0</Action><Action
 Guid="bc8cdf38-ef71-442e-bfa7-1e6495f34e58"
>Kernel.TrainData.TrainData.Value.SBCommandIsImplemented &lt;- True</Action><Action
 Guid="c8715996-5d54-4601-9b89-b56dd6822aad"
>Kernel.TrainData.TrainData.Value.SBModels &lt;- Kernel.TrainData.BrakingParameters.SBModelSetStruct{
    ModelSet =&gt; Kernel.TrainData.BrakingParameters.BrakingModelSetStruct{
        EddyCurrent =&gt; Kernel.TrainData.BrakingParameters.BrakingModelStruct{
            Val0 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
                SpeedStep =&gt; 0.0,
                Acceleration =&gt; 0.92
            },
            Val1 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
                SpeedStep =&gt; 160.0,
                Acceleration =&gt; 0.69
            },
            Val2 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
                SpeedStep =&gt; BaseTypes.Speed.Infinity,
                Acceleration =&gt; 0.0
            }
        },
        Magnetic =&gt; Kernel.TrainData.BrakingParameters.BrakingModelStruct{
            Val0 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
                SpeedStep =&gt; 0.0,
                Acceleration =&gt; 0.92
            },
            Val1 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
                SpeedStep =&gt; 160.0,
                Acceleration =&gt; 0.69
            },
            Val2 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
                SpeedStep =&gt; BaseTypes.Speed.Infinity,
                Acceleration =&gt; 0.0
            }
        },
        Regenerative =&gt; Kernel.TrainData.BrakingParameters.BrakingModelStruct{
            Val0 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
                SpeedStep =&gt; 0.0,
                Acceleration =&gt; 0.92
            },
            Val1 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
                SpeedStep =&gt; 160.0,
                Acceleration =&gt; 0.69
            },
            Val2 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
                SpeedStep =&gt; BaseTypes.Speed.Infinity,
                Acceleration =&gt; 0.0
            }
        },
        EddyCurrent_Magnetic =&gt; Kernel.TrainData.BrakingParameters.BrakingModelStruct{
            Val0 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
                SpeedStep =&gt; 0.0,
                Acceleration =&gt; 0.92
            },
            Val1 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
                SpeedStep =&gt; 160.0,
                Acceleration =&gt; 0.69
            },
            Val2 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
                SpeedStep =&gt; BaseTypes.Speed.Infinity,
                Acceleration =&gt; 0.0
            }
        },
        EddyCurrent_Regenerative =&gt; Kernel.TrainData.BrakingParameters.BrakingModelStruct{
            Val0 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
                SpeedStep =&gt; 0.0,
                Acceleration =&gt; 0.92
            },
            Val1 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
                SpeedStep =&gt; 160.0,
                Acceleration =&gt; 0.69
            },
            Val2 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
                SpeedStep =&gt; BaseTypes.Speed.Infinity,
                Acceleration =&gt; 0.0
            }
        },
        Magnetic_Regenerative =&gt; Kernel.TrainData.BrakingParameters.BrakingModelStruct{
            Val0 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
                SpeedStep =&gt; 0.0,
                Acceleration =&gt; 0.92
            },
            Val1 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
                SpeedStep =&gt; 160.0,
                Acceleration =&gt; 0.69
            },
            Val2 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
                SpeedStep =&gt; BaseTypes.Speed.Infinity,
                Acceleration =&gt; 0.0
            }
        },
        EddyCurrent_Magnetic_Regenerative =&gt; Kernel.TrainData.BrakingParameters.BrakingModelStruct{
            Val0 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
                SpeedStep =&gt; 0.0,
                Acceleration =&gt; 0.92
            },
            Val1 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
                SpeedStep =&gt; 160.0,
                Acceleration =&gt; 0.69
            },
            Val2 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
                SpeedStep =&gt; BaseTypes.Speed.Infinity,
                Acceleration =&gt; 0.0
            }
        },
        No_Special_Brakes =&gt; Kernel.TrainData.BrakingParameters.BrakingModelStruct{
            Val0 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
                SpeedStep =&gt; 0.0,
                Acceleration =&gt; 0.92
            },
            Val1 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
                SpeedStep =&gt; 160.0,
                Acceleration =&gt; 0.69
            },
            Val2 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct{
                SpeedStep =&gt; BaseTypes.Speed.Infinity,
                Acceleration =&gt; 0.0
            }
        }
    }
}</Action><Action
 Guid="6b4c0780-e55c-4dc1-94c6-21bf90a5b8cc"
>Kernel.TrainData.TrainData.Value.TractionCutOffInterfaceIsImplemented &lt;- False</Action><Action
 Guid="ca39eb79-4831-4354-8c0d-8ce788720338"
>Kernel.TrainData.TrainData.Value.TractionModel &lt;- Kernel.TrainData.TractionModelStruct
{
    Coefficient =&gt; 0.0,
    Constant    =&gt; 0.0
}</Action><Action
 Guid="e9aefb43-8673-44d9-bd63-7fd9365eed67"
>Kernel.TrainData.TrainData.Value.TrainLength &lt;- 197.0</Action><Action
 Guid="b051c2e9-f029-4116-85ec-d6ff1553a724"
>Kernel.TrainData.TrainData.Value.LoadingGauge &lt;- Messages.M_LOADINGGAUGE.G1</Action><Action
 Guid="21f79198-7336-4d3c-9879-93d2351a0ad6"
>Kernel.TrainData.TrainData.Value.AxleLoadCategory &lt;- 2</Action><Action
 Guid="f4007406-b528-43d2-b117-eabce2566ae6"
>Kernel.TrainData.TrainData.Value.TractionSystems &lt;- [Kernel.TrainData.TractionSystemStruct{
    Voltage =&gt; Messages.M_VOLTAGE.AC_15_kV_16_7_Hz,
    Country =&gt; 85
}]</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="460"
 Y="60"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="InitializeTrainData_BNS"
 Guid="5fa6178b-0707-4501-aa77-f810d08f96f4"
>
<Comment>Initializes the BNS for the test environment.</Comment>
<Rules>
<Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Initialize BNS"
 Guid="a9fc2480-14e6-4d53-87a9-45bd3eba70b7"
>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Initialize BNS"
 Guid="b94190b7-3d38-49f1-9330-65e9f0f26f22"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="b038e878-3e0d-4f36-b6cc-0a44ceb51394"
>Kernel.TrainData.TrainData.Value.NormalServiceBrakeModels &lt;- Kernel.TrainData.BrakingParameters.BNSModelSetStruct
{
    A_SB01 =&gt; 0.4,
    A_SB12 =&gt; 0.7,
    TrainInP =&gt; Kernel.TrainData.BrakingParameters.BNSModelStruct
    {
        BNS_0 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelStruct
        {
            Val0 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
            {
                SpeedStep =&gt; 0.0,
                Acceleration =&gt; 0.8
            },
            Val2 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
            {
                SpeedStep =&gt; 120.0,
                Acceleration =&gt; 0.4
            },
            Val3 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
            {
                SpeedStep =&gt; 200.0,
                Acceleration =&gt; 0.2
            },
            Val1 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
            {
                SpeedStep =&gt; 60.0,
                Acceleration =&gt; 0.6
            }
        },
        BNS_1 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelStruct
        {
            Val6 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
            {
                SpeedStep =&gt; 200.0,
                Acceleration =&gt; 0.14
            },
            Val0 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
            {
                SpeedStep =&gt; 0.0,
                Acceleration =&gt; 0.9
            },
            Val2 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
            {
                SpeedStep =&gt; 40.0,
                Acceleration =&gt; 0.64
            },
            Val3 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
            {
                SpeedStep =&gt; 75.0,
                Acceleration =&gt; 0.5
            },
            Val4 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
            {
                SpeedStep =&gt; 100.0,
                Acceleration =&gt; 0.35
            },
            Val5 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
            {
                SpeedStep =&gt; 150.0,
                Acceleration =&gt; 0.2
            },
            Val1 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
            {
                SpeedStep =&gt; 25.0,
                Acceleration =&gt; 0.8
            }
        },
        BNS_2 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelStruct
        {
            Val0 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
            {
                SpeedStep =&gt; 0.0,
                Acceleration =&gt; 0.6
            },
            Val2 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
            {
                SpeedStep =&gt; 200.0,
                Acceleration =&gt; 0.1
            },
            Val1 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
            {
                SpeedStep =&gt; 80.0,
                Acceleration =&gt; 0.2
            }
        }
    },
    TrainInG =&gt; Kernel.TrainData.BrakingParameters.BNSModelStruct
    {
        BNS_0 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelStruct
        {
            Val0 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
            {
                SpeedStep =&gt; 0.0,
                Acceleration =&gt; 0.8
            },
            Val2 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
            {
                SpeedStep =&gt; 80.0,
                Acceleration =&gt; 0.6
            },
            Val3 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
            {
                SpeedStep =&gt; 120.0,
                Acceleration =&gt; 0.45
            },
            Val4 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
            {
                SpeedStep =&gt; 180.0,
                Acceleration =&gt; 0.32
            },
            Val5 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
            {
                SpeedStep =&gt; 250.0,
                Acceleration =&gt; 0.3
            },
            Val1 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
            {
                SpeedStep =&gt; 50.0,
                Acceleration =&gt; 0.72
            }
        },
        BNS_1 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelStruct
        {
            Val0 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
            {
                SpeedStep =&gt; 0.0,
                Acceleration =&gt; 0.82
            },
            Val2 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
            {
                SpeedStep =&gt; 70.0,
                Acceleration =&gt; 0.68
            },
            Val3 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
            {
                SpeedStep =&gt; 100.0,
                Acceleration =&gt; 0.51
            },
            Val4 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
            {
                SpeedStep =&gt; 150.0,
                Acceleration =&gt; 0.34
            },
            Val5 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
            {
                SpeedStep =&gt; 200.0,
                Acceleration =&gt; 0.27
            },
            Val1 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
            {
                SpeedStep =&gt; 50.0,
                Acceleration =&gt; 0.7
            }
        },
        BNS_2 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelStruct
        {
            Val6 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
            {
                SpeedStep =&gt; 250.0,
                Acceleration =&gt; 0.3
            },
            Val0 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
            {
                SpeedStep =&gt; 0.0,
                Acceleration =&gt; 0.94
            },
            Val2 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
            {
                SpeedStep =&gt; 75.0,
                Acceleration =&gt; 0.65
            },
            Val3 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
            {
                SpeedStep =&gt; 100.0,
                Acceleration =&gt; 0.5
            },
            Val4 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
            {
                SpeedStep =&gt; 150.0,
                Acceleration =&gt; 0.4
            },
            Val5 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
            {
                SpeedStep =&gt; 200.0,
                Acceleration =&gt; 0.35
            },
            Val1 =&gt; Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
            {
                SpeedStep =&gt; 40.0,
                Acceleration =&gt; 0.8
            }
        }
    }
}</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="680"
 Y="60"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="InitializeBrakingParameters"
 Guid="a715fb74-3eaa-4c9e-ae98-89318e334731"
>
<Comment>Initializes the test environment with a set of brake parameters.</Comment>
<Rules>
<Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Brake parameters"
 Guid="dbe0d12a-240b-4f9f-8daa-4bf7e25b31ff"
>
<Comment>Initializes the test environment with a set of brake parameters as specified in ERA_Braking_cuvers_tool_v3.0.xlsm.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Brake parameters"
 Guid="a93a6c9b-1046-49f1-89b6-bdabf5370678"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="a33077c7-164c-4515-bec1-0c5c5b461893"
>Kernel.TrainData.TrainData.Value.EBModels.Kdry_rstValuesSet.EddyCurrent_Magnetic_Regenerative.Cl__99_9999999 &lt;- Kernel.TrainData.BrakingParameters.CorrectFactorValueStruct
{
    CF0 =&gt; 1.0,
    CF1 =&gt; 1.0,
    CF2 =&gt; 1.0,
    CF3 =&gt; 1.0,
    CF4 =&gt; 1.0,
    CF5 =&gt; 1.0,
    CF6 =&gt; 1.0
}</Action><Action
 Guid="7e7f2da9-15b2-4500-9a7e-beeaa4765077"
>Kernel.TrainData.TrainData.Value.EBModels.Kdry_rstValuesSet.Magnetic_Regenerative.Cl__99_9999999 &lt;- Kernel.TrainData.BrakingParameters.CorrectFactorValueStruct
{
    CF0 =&gt; 1.0,
    CF1 =&gt; 1.0,
    CF2 =&gt; 1.0,
    CF3 =&gt; 1.0,
    CF4 =&gt; 1.0,
    CF5 =&gt; 1.0,
    CF6 =&gt; 1.0
}</Action><Action
 Guid="1f51258f-2c97-43b8-afb9-a6c8e54a3359"
>Kernel.TrainData.TrainData.Value.EBModels.Kwet_rstValuesSet.EddyCurrent_Magnetic_Regenerative &lt;- Kernel.TrainData.BrakingParameters.CorrectFactorValueStruct
{
    CF0 =&gt; 1.0,
    CF1 =&gt; 1.0,
    CF2 =&gt; 1.0,
    CF3 =&gt; 1.0,
    CF4 =&gt; 1.0,
    CF5 =&gt; 1.0,
    CF6 =&gt; 1.0
}</Action><Action
 Guid="28247bc5-b4d1-443d-abdb-c9d78de37a9c"
>Kernel.TrainData.TrainData.Value.EBModels.Kwet_rstValuesSet.Magnetic_Regenerative &lt;- Kernel.TrainData.BrakingParameters.CorrectFactorValueStruct
{
    CF0 =&gt; 1.0,
    CF1 =&gt; 1.0,
    CF2 =&gt; 1.0,
    CF3 =&gt; 1.0,
    CF4 =&gt; 1.0,
    CF5 =&gt; 1.0,
    CF6 =&gt; 1.0
}</Action><Action
 Guid="167f3030-0360-436f-8aaa-5461b29a9300"
>Kernel.TrainData.TrainData.Value.EBModels.ModelSet.EddyCurrent_Magnetic_Regenerative.Val0 &lt;- Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
{
    SpeedStep =&gt; 0.0,
    Acceleration =&gt; 1.0
}</Action><Action
 Guid="2d565349-283a-4e2e-b7e9-c50f18a7aad1"
>Kernel.TrainData.TrainData.Value.EBModels.ModelSet.EddyCurrent_Magnetic_Regenerative.Val1 &lt;- Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
{
    SpeedStep =&gt; BaseTypes.Speed.Infinity,
    Acceleration =&gt; 1.0
}</Action><Action
 Guid="b0bb769c-c10e-4a0b-ad3c-9e8a34a7d447"
>Kernel.TrainData.TrainData.Value.EBModels.ModelSet.Magnetic_Regenerative.Val0 &lt;- Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
{
    SpeedStep =&gt; 0.0,
    Acceleration =&gt; 0.8
}</Action><Action
 Guid="9e946eb1-fbf9-4aa4-bb20-42fcfff2795f"
>Kernel.TrainData.TrainData.Value.EBModels.ModelSet.Magnetic_Regenerative.Val1 &lt;- Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
{
    SpeedStep =&gt; BaseTypes.Speed.Infinity,
    Acceleration =&gt; 0.8
}</Action><Action
 Guid="323aa94c-71aa-4d07-819a-53f5d193f23f"
>Kernel.TrainData.TrainData.Value.EddyCurrentBrakeInterface &lt;- Kernel.TrainData.BrakingParameters.BrakeInterfaceStatusEnum.Both</Action><Action
 Guid="d72fcd10-b85a-481f-bd1e-4c040e7db41d"
>Kernel.TrainData.TrainData.Value.MagneticShoeBrakeInterface &lt;- Kernel.TrainData.BrakingParameters.BrakeInterfaceStatusEnum.EB</Action><Action
 Guid="fefdb53c-464b-402b-a454-215cd1e05456"
>Kernel.TrainData.TrainData.Value.RegenerativeBrakeInterface &lt;- Kernel.TrainData.BrakingParameters.BrakeInterfaceStatusEnum.Both</Action><Action
 Guid="2bdfdcaa-7036-4a51-80c2-790e3ca55354"
>Kernel.TrainData.TrainData.Value.SBModels.ModelSet.EddyCurrent_Regenerative.Val0 &lt;- Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
{
    SpeedStep =&gt; 0.0,
    Acceleration =&gt; 1.0
}</Action><Action
 Guid="8e938a00-c711-4be7-b232-e19d6665747e"
>Kernel.TrainData.TrainData.Value.SBModels.ModelSet.EddyCurrent_Regenerative.Val1 &lt;- Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
{
    SpeedStep =&gt; BaseTypes.Speed.Infinity,
    Acceleration =&gt; 1.0
}</Action><Action
 Guid="af7e9fe1-d498-413e-8e3b-3d58cf9352a4"
>Kernel.TrainData.TrainData.Value.SBModels.ModelSet.Regenerative.Val0 &lt;- Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
{
    SpeedStep =&gt; 0.0,
    Acceleration =&gt; 1.0
}</Action><Action
 Guid="12a57242-17c4-4102-927d-f5d27dc743a2"
>Kernel.TrainData.TrainData.Value.SBModels.ModelSet.Regenerative.Val1 &lt;- Kernel.TrainData.BrakingParameters.BrakingModelValueStruct
{
    SpeedStep =&gt; BaseTypes.Speed.Infinity,
    Acceleration =&gt; 1.0
}</Action><Action
 Guid="94b46c6a-e4a9-4d83-abe8-ca9962f9a1f6"
>Kernel.TrainData.TrainData.Value.T_brake_emergency.EddyCurrent_Magnetic_Regenerative &lt;- 2.5</Action><Action
 Guid="ca632082-5fc8-40dc-aba8-ecc7508c5ab3"
>Kernel.TrainData.TrainData.Value.T_brake_emergency.Magnetic_Regenerative &lt;- 2.0</Action><Action
 Guid="7b0da0bf-d15b-4b38-b096-28bb9bfe21f4"
>Kernel.TrainData.TrainData.Value.T_brake_service.EddyCurrent_Regenerative &lt;- 2.5</Action><Action
 Guid="4d6fc214-8b0b-479f-a868-0fc4f28de186"
>Kernel.TrainData.TrainData.Value.T_brake_service.Regenerative &lt;- 2.0</Action><Action
 Guid="02b895f4-1f03-4575-bf38-a593fe4cb558"
>TIU.SpecialBrakeStatus.EddyCurrentBrakeIsActive &lt;- True</Action><Action
 Guid="5c55cd1a-20e5-4d70-bd82-c8fb142d6438"
>TIU.SpecialBrakeStatus.MagneticShoeBrakeIsActive &lt;- True</Action><Action
 Guid="6f3d0005-42f3-4f70-a434-4912e6ef2c46"
>TIU.SpecialBrakeStatus.RegenerativeBrakeIsActive &lt;- True</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Conversion model"
 Guid="44f3f49f-166f-494c-b831-1e37377074bc"
>
<Comment>Initializes the conversion model.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Conversion model"
 Guid="945cf2ab-9d5e-4b23-bb7e-4369587123a2"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="24727e78-c449-42d6-84ec-a5afec9d581e"
>Kernel.TrainData.BrakingParameters.ConversionModel.Initialize()</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="790"
 Y="60"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="InitializeTrackDescription"
 Guid="fa8f1aad-2c4f-4c66-9ce3-fad345208fbc"
>
<Comment>Initializes the different components of the track description for the test environment.</Comment>
<Rules>
<Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Permitted braking distance"
 Guid="250f3381-ec03-4d12-9edc-28f4a609582b"
>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Permitted braking distance"
 Guid="03fecf32-2668-445e-bcaa-373675cc17a4"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="62e4b6e9-2397-4c30-a416-1c5330c2aa41"
>Kernel.TrackDescription.PermittedBrakingDistance.SpeedRestrictionsProfile &lt;- Kernel.TrackDescription.PermittedBrakingDistance.SRPBDProfileStruct{
InitialState =&gt; Messages.Q_TRACKINIT.No_initial_states_to_be_resumed__profile_to_follow,
EmptyProfileDistance =&gt; 0.0,
SpeedRestrictions =&gt; []
}</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="20"
 Y="360"
 Width="100"
 Height="50"
 NeedsRequirement="FALSE"
 Name="SetUndesiredMovementReferences"
 Guid="29717919-ce20-4cb7-a091-6d0b448b1c3d"
>
<Comment>Initializes the reference positions for undesired movement protection with the provided distance.</Comment>
<Parameters>
<Parameter
 Type="Default.BaseTypes.Distance"
 Name="aDistance"
 Guid="84ffdd60-db82-4084-90e4-56a03fdc3857"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 X="0"
 Y="0"
 NeedsRequirement="FALSE"
 Name="Set undesired movement references"
 Guid="0b3f620e-ec23-4eee-9945-fe866845ba26"
>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 NeedsRequirement="FALSE"
 Name="Set undesired movement references"
 Guid="69ff22e8-4117-4e03-844a-e65d87611dbf"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="63b56f82-5741-4427-ae8a-143eec725013"
>Kernel.UndesirableMovement.ReverseMovementReferencePosition &lt;- aDistance</Action><Action
 Guid="7ca859da-6492-49ff-a26a-69fac4711f24"
>Kernel.UndesirableMovement.RollAwayMovementReferencePosition &lt;- aDistance</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="350"
 Y="270"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="InitializeEURORADIO"
 Guid="dd32d4c3-756d-4439-8880-aaeb6b9346fb"
>
<Comment>Procedure to initialize a RBC connection using some default or provided values.</Comment>
<Rules>
<Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Connect the terminals to a network"
 Guid="46f8ebc9-65f4-4111-8ad0-69da6c366dcd"
>
<Comment>Connects the terminals to a network</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Connect the terminal to a network"
 Guid="83c26010-0e07-45a5-81f0-812759fe87b3"
>
<Comment>Register both terminals to the same network and set the first terminal as the main terminal.</Comment>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="8f327b41-2c6d-4ca7-b053-e4101e0376e0"
>EURORADIO.Terminal.Terminal1 &lt;- EURORADIO.Terminal.TerminalStruct {
     RBCConnection =&gt; EMPTY,
     RegistrationState =&gt; EURORADIO.Terminal.TerminalStruct.RegistrationStateSM.Registered,
     RegistrationRequestState =&gt; EURORADIO.Terminal.RegisteringRequestStruct {
         RequestState =&gt; Default.RequestEnum.Disabled,
         Response =&gt; False 
    },
     RegistrationOrderIsReceived =&gt; False,
     NetworkIdToRegister =&gt; &apos;&apos;,
     Id =&gt; &apos;FirstTerminal&apos;,
     NetworkId =&gt; &apos;Some Network&apos;,
     IsMainTerminal =&gt; True 
}</Action><Action
 Guid="fb9710d9-edf7-46b0-a421-6d7be3b19c91"
>EURORADIO.Terminal.Terminal2 &lt;- EURORADIO.Terminal.TerminalStruct {
     RBCConnection =&gt; EMPTY,
     RegistrationState =&gt; EURORADIO.Terminal.TerminalStruct.RegistrationStateSM.Registered,
     RegistrationRequestState =&gt; EURORADIO.Terminal.RegisteringRequestStruct {
         RequestState =&gt; Default.RequestEnum.Disabled,
         Response =&gt; False 
    },
     RegistrationOrderIsReceived =&gt; Boolean.False,
     NetworkIdToRegister =&gt; &apos;&apos;,
     Id =&gt; &apos;SecondTerminal&apos;,
     NetworkId =&gt; &apos;Some Network&apos;,
     IsMainTerminal =&gt; False
}</Action><Action
 Guid="db13f804-9ee4-4e3c-bc69-33d4ef131c01"
>EURORADIO.Terminal.LastKnownNetworkId &lt;- &apos;Some Network&apos;</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Initialize the RBC connection"
 Guid="650c4014-03d6-4038-baa7-49dda51de679"
>
<Comment>Initialize the RBC connection of the first and main terminal (unless handover, only one RBCConnection is used at a time).</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Initialize the RBC connection"
 Guid="ffbd8b1b-db3a-49fa-a25f-2c960a02ca88"
>
<Comment>Initialize the CurrentRBCConnection (the one of the first terminal in this case) and set the last known RBC.</Comment>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="b4cb92aa-1cd5-49d1-b69e-344862edbad2"
>EURORADIO.Terminal.Terminal1.RBCConnection. &lt;- EURORADIO.RBCConnection.RBCStruct
{
  ConnectionState =&gt; EURORADIO.RBCConnection.RBCStruct.ConnectionStateSM.Connected,
  ContactData =&gt; EURORADIO.RBCConnection.Contact.RBCContactStruct
  {
    Id =&gt; EURORADIO.RBCConnection.Contact.RBCIdStruct
    {
      Country =&gt; 81, 
      Id =&gt; 4549
    }, 
    PhoneNumber =&gt; &apos;123456789&apos;, 
    DataState =&gt; Default.DataStateEnum.Valid
  },
  ContactRBCOrder =&gt; EMPTY,
  ContactTimerSupervised =&gt; Boolean.True,
  Data =&gt; EURORADIO.RBCConnection.Data.DataStruct{
    MessageIn =&gt; Messages.EURORADIO.MessageIn.Message
  {
    SystemVersion2 =&gt; EMPTY, 
    SystemVersion1 =&gt; EMPTY, 
    Priority =&gt; 0, 
    BitField =&gt; &apos;&apos;
  }, 
  MessageOut =&gt; Messages.EURORADIO.MessageOut.Message
  {
    SystemVersion2 =&gt; EMPTY, 
    SystemVersion1 =&gt; EMPTY, 
    BitField =&gt; &apos;&apos;
  }
  },
  OnboardReference_MessageTimer =&gt; Kernel.DateAndTime.CurrentTime,
  SafeRadioConnection =&gt; EURORADIO.RBCConnection.SafeRadioConnection.SafeRadioConnectionStruct{
    ConnectionIsEstablished =&gt; Boolean.True, 
    ConnectionRequestIsReceived =&gt; Boolean.False, 
    LastRequestTime =&gt; 0.0,
    NumberOfSentRequests =&gt; 0,
    SpecialCaseSessionEstablishmentReason =&gt; EURORADIO.RBCConnection.SpecialCaseSessionEstablishmentReasonEnum.DoNotEstablish
},  
  SafeRadioConnectionStatus =&gt; EURORADIO.RBCConnection.SafeRadioConnectionStatusEnum.ConnectionUp,
  SessionManagementData =&gt; EURORADIO.RBCConnection.SessionManagement.SessionManagementStruct{
    AcknowledgementOfTerminationReceived =&gt; Boolean.False,
    InitiationOfACommunicationSessionReceived =&gt; Boolean.False,
    SystemVersion =&gt; VersionManagement.SystemVersionStruct
    {
      Value =&gt; VersionManagement.SystemVersionEnum.Version2_0, 
      DataState =&gt; Default.DataStateEnum.Valid
    }
}
}</Action><Action
 Guid="c2a04f64-3aa4-45d6-ab67-179103bd81a7"
>EURORADIO.RBCConnection.Contact.SetLastKnownRBC( anRBCContactStruct =&gt;  EURORADIO.RBCConnection.CurrentRBCConnection().ContactData)</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="130"
 Y="360"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="InitializeDMICabs"
 Guid="493537b3-74b2-4515-a6bb-90822c5cb3ae"
>
<ReqRef
 Id="deed4628-97e4-4181-8665-7509256de3fa"
 SpecId="33a01dd1-de78-4ea3-9e96-a198d1a29277"
 Guid="7f1079cb-a9af-4b40-86e4-0f31bf930363"
>
</ReqRef><ReqRef
 Id="839d8340-fe74-4358-8e90-bbcbf37f22e7"
 SpecId="33a01dd1-de78-4ea3-9e96-a198d1a29277"
 Guid="3babb536-3ec7-462a-b91d-79d3b240b6fe"
>
</ReqRef><ReqRef
 Id="8ec72be6-e0c4-4144-b5eb-11ce0f95c2f7"
 SpecId="c238ead1-8ba7-4613-ae49-4288833ea80d"
 Guid="d08867d8-8723-4884-bfa8-c83e7b71328c"
>
</ReqRef><ReqRef
 Id="1103646b-bce8-434d-989b-512b6d07f522"
 SpecId="c238ead1-8ba7-4613-ae49-4288833ea80d"
 Guid="b363d924-122c-4e6c-84b6-8dbe0711adb1"
>
</ReqRef><ReqRef
 Id="0e567e4f-a153-426b-9319-7888b64d642a"
 SpecId="c238ead1-8ba7-4613-ae49-4288833ea80d"
 Guid="8f713ddf-7a2e-465b-9950-cecc5056b8d2"
>
</ReqRef><ReqRef
 Id="f4830d74-9f76-4ace-b362-2b7b734f306f"
 SpecId="c238ead1-8ba7-4613-ae49-4288833ea80d"
 Guid="8cf29556-4b94-4fd9-915d-1e41b066082c"
>
</ReqRef><Comment>Initializes the DMI according to the parameters provided.</Comment>
<Parameters>
<Parameter
 Type="DMI.DMIConfigurationEnum"
 Name="aDMIConfiguration"
 Guid="ed0a49a8-f713-45fa-acf3-7cae4bbc07a8"
>
</Parameter><Parameter
 Type="Boolean"
 Name="aDMI1IsMaster"
 Guid="e60f9b6a-4a4d-4220-8525-34a2e58c135c"
>
</Parameter></Parameters>
<Rules>
<Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 Name="Setup DMI 1"
 Guid="14f03fe4-d4ec-4c1d-bc2d-0a4a99361145"
>
<Comment>Setup the first DMI.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Setup DMI 1 - Cab A"
 Guid="28bc1d3b-1396-419a-8a78-203c72579eaf"
>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="bc585b95-3fe5-4e3f-9ad2-92b3f4ed7f3f"
>DMI.DMI1 &lt;- DMI.DMIStruct
{
  PreviousMode =&gt; Default.ModeEnum.Unknown, 
  IsMaster =&gt; (aDMI1IsMaster OR aDMIConfiguration == DMI.DMIConfigurationEnum.SingleDMI), 
  DisplayLanguage =&gt; DMI.DisplayLanguageStruct
  {
    DataState =&gt; Default.DataStateEnum.Valid, 
    Value =&gt; Default.LanguageEnum.EN
  }, 
  Cab =&gt; DMI.CabEnum.CabA, 
  Desk =&gt; DMI.CabDeskEnum.Desk1
}</Action><Action
 Guid="7264cb79-8a04-4434-a627-a2a7f5a2981e"
>TIU.CabA.Desk1IsActive &lt;- (aDMI1IsMaster OR aDMIConfiguration == DMI.DMIConfigurationEnum.SingleDMI)</Action><Action
 Guid="243d51ba-55ad-4b80-b0d3-bc4f71fb5e63"
>TIU.CabA.IsFittedWithSingleDesk &lt;- aDMIConfiguration in [DMI.DMIConfigurationEnum.SingleDMI, DMI.DMIConfigurationEnum.TwoCabs]</Action><Action
 Guid="fe45d45e-5e80-47c0-9be5-05bc0c1c6a87"
>TIU.CabA.VirtualCabAActive &lt;- False</Action><Action
 Guid="71039f41-4d7e-416d-a8b8-1ebda8991fc4"
>TIU.CabA.VirtualCabBActive &lt;- False</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 Name="Setup DMI 2"
 Guid="0885e647-3804-45e8-b110-ee8db478c759"
>
<Comment>Setup the second DMI, if any.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="DMI 2 - Cab A"
 Guid="9ae0dae4-5f2f-4143-a973-afd92fe7b2cc"
>
<Comment>Cab A has two desks.</Comment>
<PreConditions>
<PreCondition
 Guid="e9760b32-ac7d-406c-895a-746be2cd5865"
>aDMIConfiguration == DMI.DMIConfigurationEnum.SingleCabTwoDesks</PreCondition></PreConditions>
<Actions>
<Action
 Guid="bf238d50-9546-4569-b9d7-0bc781b75b86"
>DMI.DMI2 &lt;- DMI.DMIStruct
{
  PreviousMode =&gt; Default.ModeEnum.Unknown, 
  IsMaster =&gt; NOT aDMI1IsMaster, 
  DisplayLanguage =&gt; DMI.DisplayLanguageStruct
  {
    DataState =&gt; Default.DataStateEnum.Valid, 
    Value =&gt; Default.LanguageEnum.EN
  }, 
  Cab =&gt; DMI.CabEnum.CabA, 
  Desk =&gt; DMI.CabDeskEnum.Desk2
}</Action><Action
 Guid="0fceec4e-c6e3-4a55-8c20-bc84ce1ad23a"
>TIU.CabB.Desk1IsActive &lt;- False</Action><Action
 Guid="44e12cb2-f547-4936-b103-922e597da2dc"
>TIU.CabB.Desk2IsActive &lt;- False</Action><Action
 Guid="662914af-64bc-44c6-9be0-28884c83374c"
>TIU.CabB.VirtualCabAActive &lt;- False</Action><Action
 Guid="70006806-48a6-4ea8-b0a0-146f92d20d4f"
>TIU.CabB.VirtualCabBActive &lt;- False</Action><Action
 Guid="6fc7e4d3-9f04-41fd-a8c4-3872666b1fc8"
>TIU.CabA.Desk2IsActive &lt;- NOT aDMI1IsMaster</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 Name="DMI 2 - Cab B"
 Guid="7d6aed49-93cb-4580-88ca-4109cba30b59"
>
<Comment>Two cabs, each with one desk.</Comment>
<PreConditions>
<PreCondition
 Guid="eb1308cb-2eb3-42ee-9ebb-e8afb212f0bc"
>aDMIConfiguration == DMI.DMIConfigurationEnum.TwoCabs</PreCondition></PreConditions>
<Actions>
<Action
 Guid="b74a1c78-750c-49ca-84af-9c8f32a69294"
>DMI.DMI2 &lt;- DMI.DMIStruct
{
  PreviousMode =&gt; Default.ModeEnum.Unknown, 
  IsMaster =&gt; NOT aDMI1IsMaster, 
  DisplayLanguage =&gt; DMI.DisplayLanguageStruct
  {
    DataState =&gt; Default.DataStateEnum.Valid, 
    Value =&gt; Default.LanguageEnum.EN
  }, 
  Cab =&gt; DMI.CabEnum.CabB, 
  Desk =&gt; DMI.CabDeskEnum.Desk1
}</Action><Action
 Guid="2c7e9d20-3048-4cfc-83e3-ac44fda62219"
>TIU.CabB.Desk1IsActive &lt;- NOT aDMI1IsMaster</Action><Action
 Guid="a7e8395d-e98e-45ed-b4d2-b521eead22ed"
>TIU.CabB.Desk2IsActive &lt;- False</Action><Action
 Guid="39f2bc37-50d8-4035-822c-7d2f42217301"
>TIU.CabB.VirtualCabAActive &lt;- False</Action><Action
 Guid="7f95742e-ebc4-4f01-8cf4-a46d1893bbb7"
>TIU.CabB.VirtualCabBActive &lt;- False</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 Name="Only one DMI"
 Guid="2725c200-300f-4051-9fd6-e36fcbedfddc"
>
<Comment>There is only a single DMI.</Comment>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="3a0c2d1e-0e8c-4a06-b7c1-c8b0cf79791f"
>DMI.DMI2 &lt;- EMPTY</Action><Action
 Guid="5642460f-30d8-452f-8008-0e0f0e5fd612"
>TIU.CabB.Desk1IsActive &lt;- False</Action><Action
 Guid="d82c3dc3-4cd9-4858-848d-d5222d047fa9"
>TIU.CabB.Desk2IsActive &lt;- False</Action><Action
 Guid="88ca6187-6bb9-4ff3-98ff-f509bdd0ce08"
>TIU.CabB.VirtualCabBActive &lt;- False</Action><Action
 Guid="42d5c41a-3a3d-4fa5-b1b0-6dbb873704f7"
>TIU.CabB.VirtualCabAActive &lt;- False</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="350"
 Y="420"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="InitializeTerminals"
 Guid="f84fa73a-679f-40d4-8437-08eaec261189"
>
<Comment>This procedure initialize the terminals but let their RBCConnections to the NoConnectionState.</Comment>
<Rules>
<Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Connect the terminals to a network"
 Guid="a6e25ccc-569a-48f4-9206-9e7420fd9767"
>
<Comment>Connects the terminals to a network</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Connect the terminal to a network"
 Guid="4fb13cba-bda0-41a5-b18d-ceb39fc7bb9b"
>
<Comment>Register both terminals to the same network and set the first terminal as the main terminal.</Comment>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="2b93fdb0-201e-4fbe-9ecc-41f609b7c32a"
>EURORADIO.Terminal.Terminal1 &lt;- EURORADIO.Terminal.TerminalStruct {
     RegistrationState =&gt; EURORADIO.Terminal.TerminalStruct.RegistrationStateSM.Registered,
     RegistrationRequestState =&gt; EURORADIO.Terminal.RegisteringRequestStruct {
         RequestState =&gt; Default.RequestEnum.Disabled,
         Response =&gt; False 
    },
     RegistrationOrderIsReceived =&gt; False,
     NetworkIdToRegister =&gt; &apos;&apos;,
     Id =&gt; &apos;FirstTerminal&apos;,
     NetworkId =&gt; &apos;Some Network&apos;,
     IsMainTerminal =&gt; True 
}</Action><Action
 Guid="e1d3b2f1-fcbf-4e43-9be1-5a963f4f1241"
>EURORADIO.Terminal.Terminal2 &lt;- EURORADIO.Terminal.TerminalStruct {
     RegistrationState =&gt; EURORADIO.Terminal.TerminalStruct.RegistrationStateSM.Registered,
     RegistrationRequestState =&gt; EURORADIO.Terminal.RegisteringRequestStruct {
         RequestState =&gt; Default.RequestEnum.Disabled,
         Response =&gt; False 
    },
     RegistrationOrderIsReceived =&gt; Boolean.False,
     NetworkIdToRegister =&gt; &apos;&apos;,
     Id =&gt; &apos;SecondTerminal&apos;,
     NetworkId =&gt; &apos;Some Network&apos;,
     IsMainTerminal =&gt; False
}</Action><Action
 Guid="c275b9aa-9403-4f80-a7ca-c0a573c12ce5"
>EURORADIO.Terminal.LastKnownNetworkId &lt;- &apos;Some Network&apos;</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="460"
 Y="360"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="InitializeRBCConnection"
 Guid="71ce38df-0d93-42a5-ae27-5f73240947dc"
>
<Comment>Sets the RBCConnection of the main terminal to the connected state. Terminals should have been set before.</Comment>
<Rules>
<Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Initialize the RBC connection"
 Guid="d2e80f3a-d2b6-4d64-a1d0-30f2283f590c"
>
<Comment>Initialize the RBC connection of the first and main terminal (unless handover, only one RBCConnection is used at a time).</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Initialize the RBC connection"
 Guid="632e765d-c2af-4559-a859-c1d489fca9af"
>
<Comment>Initialize the CurrentRBCConnection (the one of the first terminal in this case) and set the last known RBC.</Comment>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="5eaec0fc-e4d1-4029-85c0-faa3ce55d614"
>EURORADIO.Terminal.Terminal1.RBCConnection. &lt;- EURORADIO.RBCConnection.RBCStruct
{
  ConnectionState =&gt; EURORADIO.RBCConnection.RBCStruct.ConnectionStateSM.Connected,
  ContactData =&gt; EURORADIO.RBCConnection.Contact.RBCContactStruct
  {
    Id =&gt; EURORADIO.RBCConnection.Contact.RBCIdStruct
    {
      Country =&gt; 81, 
      Id =&gt; 4549
    }, 
    PhoneNumber =&gt; &apos;132456798&apos;, 
    DataState =&gt; Default.DataStateEnum.Valid
  },
  ContactRBCOrder =&gt; EMPTY,
  ContactTimerSupervised =&gt; Boolean.True,
  Data =&gt; EURORADIO.RBCConnection.Data.DataStruct{
    MessageIn =&gt; Messages.EURORADIO.MessageIn.Message
  {
    SystemVersion2 =&gt; EMPTY, 
    SystemVersion1 =&gt; EMPTY, 
    Priority =&gt; 0, 
    BitField =&gt; &apos;&apos;
  }, 
  MessageOut =&gt; Messages.EURORADIO.MessageOut.Message
  {
    SystemVersion2 =&gt; EMPTY, 
    SystemVersion1 =&gt; EMPTY, 
    BitField =&gt; &apos;&apos;
  }
  },
  OnboardReference_MessageTimer =&gt; Kernel.DateAndTime.CurrentTime,
  SafeRadioConnection =&gt; EURORADIO.RBCConnection.SafeRadioConnection.SafeRadioConnectionStruct{
    ConnectionIsEstablished =&gt; Boolean.True, 
    ConnectionRequestIsReceived =&gt; Boolean.False, 
    LastRequestTime =&gt; 0.0,
    NumberOfSentRequests =&gt; 0,
    SpecialCaseSessionEstablishmentReason =&gt; EURORADIO.RBCConnection.SpecialCaseSessionEstablishmentReasonEnum.DoNotEstablish
},  
  SafeRadioConnectionStatus =&gt; EURORADIO.RBCConnection.SafeRadioConnectionStatusEnum.ConnectionUp,
  SessionManagementData =&gt; EURORADIO.RBCConnection.SessionManagement.SessionManagementStruct{
    AcknowledgementOfTerminationReceived =&gt; Boolean.False,
    InitiationOfACommunicationSessionReceived =&gt; Boolean.False,
    SystemVersion =&gt; VersionManagement.SystemVersionStruct
    {
      Value =&gt; VersionManagement.SystemVersionEnum.Version2_0, 
      DataState =&gt; Default.DataStateEnum.Valid
    }
}
}</Action><Action
 Guid="8cf496da-8e5a-477f-98b3-bc3c4ef17b9f"
>EURORADIO.RBCConnection.Contact.SetLastKnownRBC( anRBCContactStruct =&gt;  EURORADIO.RBCConnection.CurrentRBCConnection().ContactData)</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure><Procedure
 X="350"
 Y="360"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="InitializeDefaultTerminals"
 Guid="ca9bf73d-27fc-4629-8547-297e96b80677"
>
<Comment>This procedure initialize the terminals but let their RBCConnections to the NoConnectionState.</Comment>
<Rules>
<Rule
 Priority="Processing"
 X="0"
 Y="0"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Connect the terminals to a network"
 Guid="90e5dd91-d47e-437b-ae0f-d92402f69549"
>
<Comment>Connects the terminals to a network</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="Connect the terminal to a network"
 Guid="7fd8d73f-9a16-46eb-a54d-7a360287b960"
>
<Comment>Register both terminals to the same network and set the first terminal as the main terminal.</Comment>
<PreConditions>
</PreConditions>
<Actions>
<Action
 Guid="a343ecee-10af-4357-b05d-ab9fdbbef9f9"
>EURORADIO.Terminal.Terminal1 &lt;- EURORADIO.Terminal.TerminalStruct {
     RegistrationState =&gt; EURORADIO.Terminal.TerminalStruct.RegistrationStateSM.NotRegistered,
     RegistrationRequestState =&gt; EURORADIO.Terminal.RegisteringRequestStruct {
         RequestState =&gt; Default.RequestEnum.Disabled,
         Response =&gt; False 
    },
     RegistrationOrderIsReceived =&gt; False,
     NetworkIdToRegister =&gt; &apos;&apos;,
     Id =&gt; &apos;FirstTerminal&apos;,
     NetworkId =&gt; &apos;&apos;,
     IsMainTerminal =&gt; True 
}</Action><Action
 Guid="3526a35d-a793-42cc-8119-62a21d6da87a"
>EURORADIO.Terminal.Terminal2 &lt;- EURORADIO.Terminal.TerminalStruct {
     RegistrationState =&gt; EURORADIO.Terminal.TerminalStruct.RegistrationStateSM.NotRegistered,
     RegistrationRequestState =&gt; EURORADIO.Terminal.RegisteringRequestStruct {
         RequestState =&gt; Default.RequestEnum.Disabled,
         Response =&gt; False 
    },
     RegistrationOrderIsReceived =&gt; Boolean.False,
     NetworkIdToRegister =&gt; &apos;&apos;,
     Id =&gt; &apos;SecondTerminal&apos;,
     NetworkId =&gt; &apos;&apos;,
     IsMainTerminal =&gt; False
}</Action><Action
 Guid="d69bb9dc-a973-4773-af85-cd8478f89588"
>EURORADIO.Terminal.LastKnownNetworkId &lt;- &apos;&apos;</Action></Actions>
</RuleCondition></Conditions>
</Rule></Rules>
</Procedure></Procedures>
</NameSpace>
